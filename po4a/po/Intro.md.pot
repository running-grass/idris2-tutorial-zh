# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Stefan HÃ¶ck
# This file is distributed under the same license as the Functional Programming in Idris 2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Functional Programming in Idris 2 1.0\n"
"POT-Creation-Date: 2025-05-15 20:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1368 ../src/Tutorial/Dependent.md:910
#: ../src/Tutorial/DPair.md:1206 ../src/Tutorial/Eq.md:1100
#: ../src/Tutorial/Folds.md:1064 ../src/Tutorial/Functions1.md:583
#: ../src/Tutorial/Functions2.md:964 ../src/Tutorial/Functor.md:1430
#: ../src/Tutorial/Interfaces.md:821 ../src/Tutorial/Intro.md:453
#: ../src/Tutorial/IO.md:1125 ../src/Tutorial/Predicates.md:1371
#: ../src/Tutorial/Prim.md:1410 ../src/Tutorial/Traverse.md:1148
#: ../src/Appendices/Neovim.md:374 ../src/Appendices/Projects.md:890
#, no-wrap
msgid ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/Dependent.md:1 ../src/Tutorial/Intro.md:90
#, no-wrap
msgid "Dependent Types"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/Functor.md:1423 ../src/Tutorial/Intro.md:444
#, no-wrap
msgid "What's next?"
msgstr ""

#. type: Title #
#: ../src/Tutorial/Intro.md:1
#, no-wrap
msgid "Introduction"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:15
msgid ""
"Welcome to my Idris 2 tutorial. I'll try and treat as many aspects of the "
"Idris 2 programming language as possible here.  All `.md` files in here are "
"literate Idris files: They consist of Markdown (hence the `.md` ending), "
"which is being pretty printed by GitHub together with Idris code blocks, "
"which can be type checked and built by the Idris compiler (more on this "
"later).  Note, however, that regular Idris source files use an `.idr` "
"ending, and that you go with that file type unless you end up writing much "
"more prose than code as I do at the moment. Later in this tutorial, you'll "
"have to solve some exercises, the solutions of which can be found in the "
"`src/Solutions` subfolder. There, I use regular `.idr` files."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:23
msgid ""
"Before we begin, make sure to install the Idris compiler on your system.  "
"Throughout this tutorial, I assume you installed the *pack* package manager "
"and setup a skeleton package as described [here](../Appendices/Install.md). "
"It is certainly possible to follow along with just the Idris compiler "
"installed by other means, but some adjustments will be necessary when "
"starting REPL sessions or building executables."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:27
msgid ""
"Every Idris source file should typically start with a module name plus some "
"necessary imports, and this document is no exception:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:28
#, no-wrap
msgid "module Tutorial.Intro\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:35
msgid ""
"A module name consists of a list of identifiers separated by dots and must "
"reflect the folder structure plus the module file's name."
msgstr ""

#. type: Title ##
#: ../src/Tutorial/Intro.md:36
#, no-wrap
msgid "About the Idris Programming Language"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:41
msgid ""
"Idris is a *pure*, *dependently typed*, *total* *functional* programming "
"language. I'll quickly explain each of these adjectives in this section."
msgstr ""

#. type: Title ###
#: ../src/Tutorial/Intro.md:42
#, no-wrap
msgid "Functional Programming"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:56
msgid ""
"In functional programming languages, functions are first-class constructs, "
"meaning that they can be assigned to variables, passed as arguments to other "
"functions, and returned as results from functions. Unlike for instance in "
"object-oriented programming languages, in functional programming, functions "
"are the main form of abstraction. This means that whenever we find a common "
"pattern or (almost) identical code in several parts of a project, we try to "
"abstract over this in order to have to write the corresponding code only "
"once.  We do this by introducing one or more new functions implementing this "
"behavior. Doing so, we often try to be as general as possible to make our "
"functions as versatile to use as possible."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:60
msgid ""
"Functional programming languages are concerned with the evaluation of "
"functions, unlike classical imperative languages, which are concerned with "
"the execution of statements."
msgstr ""

#. type: Title ###
#: ../src/Tutorial/Intro.md:61
#, no-wrap
msgid "Pure Functional Programming"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:71
msgid ""
"Pure functional programming languages come with an additional important "
"guarantee: Functions don't have side effects like writing to a file or "
"mutating global state. They can only compute a result from their arguments "
"possibly by invoking other pure functions, *and nothing else*. As a "
"consequence, given the same input, they will *always* generate the same "
"output.  This property is known as [referential transparency](https://en."
"wikipedia.org/wiki/Referential_transparency)."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:73
msgid "Pure functions have several advantages:"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:76
msgid ""
"They can easily be tested by specifying (possibly randomly generated)  sets "
"of input arguments together with the expected results."
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:80
msgid ""
"They are thread-safe, since they don't mutate global state, and as such can "
"be freely used in several computations running in parallel."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:82
msgid "There are, of course, also some disadvantages:"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:85
msgid ""
"Some algorithms are hard to implement efficiently using only pure functions."
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:89
msgid ""
"Writing programs that actually *do* something (have some observable effect) "
"is a bit trickier but certainly possible."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:97
msgid ""
"Idris is a strongly, statically typed programming language. This means that "
"every Idris expression is given a *type* (for instance: integer, list of "
"strings, boolean, function from integer to boolean, etc.)  and types are "
"verified at compile time to rule out certain common programming errors."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:103
msgid ""
"For instance, if a function expects an argument of type `String` (a sequence "
"of unicode characters, such as `\"Hello123\"`), it is a *type error* to "
"invoke this function with an argument of type `Integer`, and the Idris "
"compiler will refuse to generate an executable from such an ill-typed "
"program."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:111
msgid ""
"Being *statically typed* means that the Idris compiler will catch type "
"errors at *compile time*, that is, before it generates an executable program "
"that can be run. The opposite to this are *dynamically typed* languages such "
"as Python, which check for type errors at *runtime*, that is, when a program "
"is being executed. It is the philosophy of statically typed languages to "
"catch as many type errors as possible before there even is a program that "
"can be run."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:119
msgid ""
"Even more, Idris is *dependently typed*, which is one of its most "
"characteristic properties in the landscape of programming languages. In "
"Idris, types are *first class*: Types can be passed as arguments to "
"functions, and functions can return types as their results. Even more, types "
"can *depend* on other *values*.  What this means, and why this is incredibly "
"useful, we'll explore in due time."
msgstr ""

#. type: Title ###
#: ../src/Tutorial/Intro.md:120
#, no-wrap
msgid "Total Functions"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:127
msgid ""
"A *total* function is a pure function, that is guaranteed to return a value "
"of the expected return type for every possible input in a finite number of "
"computational steps. A total function will never fail with an exception or "
"loop infinitely, although it can still take arbitrarily long to compute its "
"result"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:136
msgid ""
"Idris comes with a totality checker built-in, which enables us to verify the "
"functions we write to be provably total. Totality in Idris is opt-in, as in "
"general, checking the totality of an arbitrary computer program is "
"undecidable (see also the [halting problem](https://en.wikipedia.org/wiki/"
"Halting_problem)).  However, if we annotate a function with the `total` "
"keyword, Idris will fail with a type error, if its totality checker cannot "
"verify that the function in question is indeed total."
msgstr ""

#. type: Title ##
#: ../src/Tutorial/Intro.md:137
#, no-wrap
msgid "Using the REPL"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:144
msgid ""
"Idris comes with a useful REPL (an acronym for *Read Evaluate Print Loop*), "
"which we will use for tinkering with small ideas, and for quickly "
"experimenting with the code we just wrote.  In order to start a REPL "
"session, run the following command in a terminal:"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:145
#, no-wrap
msgid "pack repl\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:150
msgid "Idris should now be ready to accept you commands:"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:151
#, no-wrap
msgid ""
"     ____    __     _         ___\n"
"    /  _/___/ /____(_)____   |__ \\\n"
"    / // __  / ___/ / ___/   __/ /     Version 0.5.1-3c532ea35\n"
"  _/ // /_/ / /  / (__  )   / __/      https://www.idris-lang.org\n"
" /___/\\__,_/_/  /_/____/   /____/      Type :? for help\n"
"\n"
"Welcome to Idris 2.  Enjoy yourself!\n"
"Main>\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:164
msgid ""
"We can go ahead and enter some simple arithmetic expressions. Idris will "
"*evaluate* these and print the result:"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:165
#, no-wrap
msgid ""
"Main> 2 * 4\n"
"8\n"
"Main> 3 * (7 + 100)\n"
"321\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:174
msgid ""
"Since every expression in Idris has an associated *type*, we might want to "
"inspect these as well:"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:175
#, no-wrap
msgid ""
"Main> :t 2\n"
"2 : Integer\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:183
msgid ""
"Here `:t` is a command of the Idris REPL (it is not part of the Idris "
"programming language), and it is used to inspect the type of an expression."
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:184
#, no-wrap
msgid ""
"Main> :t 2 * 4\n"
"2 * 4 : Integer\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:199
msgid ""
"Whenever we perform calculations with integer literals without being "
"explicit about the types we want to use, Idris will use `Integer` as a "
"default. `Integer` is an arbitrary precision signed integer type. It is one "
"of the *primitive types* built into the language. Other primitives include "
"fixed precision signed and unsigned integral types (`Bits8`, `Bits16`, "
"`Bits32` `Bits64`, `Int8`, `Int16`, `Int32`, and `Int64`), double precision "
"(64 bit) floating point numbers (`Double`), unicode characters (`Char`) and "
"strings of unicode characters (`String`).  We will use many of these in due "
"time."
msgstr ""

#. type: Title ##
#: ../src/Tutorial/Intro.md:200
#, no-wrap
msgid "A First Idris Program"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:207
msgid ""
"We will often start up a REPL for tinkering with small parts of the Idris "
"language, for reading some documentation, or for inspecting the content of "
"an Idris module, but now we will write a minimal Idris program to get "
"started with the language. Here comes the mandatory *Hello World*:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:208
#, no-wrap
msgid ""
"main : IO ()\n"
"main = putStrLn \"Hello World!\"\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:216
msgid ""
"We will inspect the code above in some detail in a moment, but first we'd "
"like to compile and run it. From this project's root directory, run the "
"following:"
msgstr ""

#. type: Fenced code block (sh)
#: ../src/Tutorial/Intro.md:216
#, no-wrap
msgid "pack -o hello exec src/Tutorial/Intro.md\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:224
msgid ""
"This will create executable `hello` in directory `build/exec`, which can be "
"invoked from the command-line like so (without the dollar prefix; this is "
"used here to distinguish the terminal command from its output):"
msgstr ""

#. type: Fenced code block (sh)
#: ../src/Tutorial/Intro.md:225
#, no-wrap
msgid ""
"$ build/exec/hello\n"
"Hello World!\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:238
#, no-wrap
msgid ""
"The pack program requires an `.ipkg` to be in scope (in the current\n"
"directory or one of its parent directories) from which\n"
"it will get other settings like the source directory to use\n"
"(`src` in our case). The optional `-o` option gives the name of the\n"
"executable to be generated. Pack comes up with a name of its own\n"
"it this is missing. Type `pack help` for a list\n"
"of available command-line options and commands, and `pack help <cmd>`\n"
"for getting help for a specific command.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:241
msgid ""
"As an alternative, you can also load this source file in a REPL session and "
"invoke function `main` from there:"
msgstr ""

#. type: Fenced code block (sh)
#: ../src/Tutorial/Intro.md:242
#, no-wrap
msgid "pack repl src/Tutorial/Intro.md\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:246
#, no-wrap
msgid ""
"Tutorial.Intro> :exec main\n"
"Hello World!\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:253
msgid ""
"Go ahead and try both ways of building and running function `main` on your "
"system!"
msgstr ""

#. type: Title ##
#: ../src/Tutorial/Intro.md:254
#, no-wrap
msgid "The Shape of an Idris Definition"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:258
msgid ""
"Now that we executed our first Idris program, we will talk a bit more about "
"the code we had to write to define it."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:265
msgid ""
"A typical top level function in Idris consists of three things: The "
"function's name (`main` in our case), its type (`IO ()`)  plus its "
"implementation (`putStrLn \"Hello World\"`). It is easier to explain these "
"things with a couple of simple examples. Below, we define a top level "
"constant for the largest unsigned eight bit integer:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:266
#, no-wrap
msgid ""
"maxBits8 : Bits8\n"
"maxBits8 = 255\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:280
msgid ""
"The first line can be read as: \"We'd like to declare (nullary)  function "
"`maxBits8`. It is of type `Bits8`\". This is called the *function "
"declaration*: we declare that there shall be a function of the given name "
"and type. The second line reads: \"The result of invoking `maxBits8` should "
"be `255`.\" (As you can see, we can use integer literals for other integral "
"types than just `Integer`.) This is called the *function definition*: "
"Function `maxBits8` should behave as described here when being evaluated."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:283
msgid ""
"We can inspect this at the REPL. Load this source file into an Idris REPL "
"(as described above), and run the following tests."
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:284
#, no-wrap
msgid ""
"Tutorial.Intro> maxBits8\n"
"255\n"
"Tutorial.Intro> :t maxBits8\n"
"Tutorial.Intro.maxBits8 : Bits8\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:292
msgid "We can also use `maxBits8` as part of another expression:"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:293
#, no-wrap
msgid ""
"Tutorial.Intro> maxBits8 - 100\n"
"155\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:300
msgid ""
"I called `maxBits8` a *nullary function*, which is just a fancy word for "
"*constant*. Let's write and test our first *real* function:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:301
#, no-wrap
msgid ""
"distanceToMax : Bits8 -> Bits8\n"
"distanceToMax n = maxBits8 - n\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:313
#, no-wrap
msgid ""
"This introduces some new syntax and a new kind of type: Function\n"
"types. `distanceToMax : Bits8 -> Bits8` can be read as follows:\n"
"\"`distanceToMax` is a function of one argument of type `Bits8`, which\n"
"returns a result of type `Bits8`\". In the implementation, the argument\n"
"is given a local identifier `n`, which is then used in the\n"
"calculation on the right hand side. Again, go ahead and try this\n"
"function at the REPL:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:314
#, no-wrap
msgid ""
"Tutorial.Intro> distanceToMax 12\n"
"243\n"
"Tutorial.Intro> :t distanceToMax\n"
"Tutorial.Intro.distanceToMax : Bits8 -> Bits8\n"
"Tutorial.Intro> :t distanceToMax 12\n"
"distanceToMax 12 : Bits8\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:325
msgid ""
"As a final example, let's implement a function to calculate the square of an "
"integer:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:326
#, no-wrap
msgid ""
"square : Integer -> Integer\n"
"square n = n * n\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:339
msgid ""
"We now learn a very important aspect of programming in Idris: Idris is a "
"*statically typed* programming language. We are not allowed to freely mix "
"types as we please. Doing so will result in an error message from the type "
"checker (which is part of the compilation process of Idris).  For instance, "
"if we try the following at the REPL, we will get a type error:"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:340
#, no-wrap
msgid ""
"Tutorial.Intro> square maxBits8\n"
"Error: ...\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:350
msgid ""
"The reason: `square` expects an argument of type `Integer`, but `maxBits8` "
"is of type `Bits8`. Many primitive types are interconvertible (sometimes "
"with the risk of loss of precision) using function `cast` (more on the "
"details later):"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:351
#, no-wrap
msgid ""
"Tutorial.Intro> square (cast maxBits8)\n"
"65025\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:362
msgid ""
"Note, that in the example above the result is much larger that `maxBits8`. "
"The reason is, that `maxBits8` is first converted to an `Integer` of the "
"same value, which is then squared. If on the other hand we squared "
"`maxBits8` directly, the result would be truncated to still fit the valid "
"range of `Bits8`:"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:363
#, no-wrap
msgid ""
"Tutorial.Intro> maxBits8 * maxBits8\n"
"1\n"
msgstr ""

#. type: Title ##
#: ../src/Tutorial/Intro.md:368
#, no-wrap
msgid "Where to get Help"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:373
msgid ""
"There are several resources available online and in print, where you can "
"find help and documentation about the Idris programming language. Here is a "
"non-comprehensive list of them:"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:375
msgid ""
"[Type-Driven Development with Idris](https://www.manning.com/books/type-"
"driven-development-with-idris)"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:382
#, no-wrap
msgid ""
"  *The* Idris book! This describes in great detail\n"
"  the core concepts for using Idris and dependent types\n"
"  to write robust and concise code. It uses Idris 1 in\n"
"  its examples, so parts of it have to be slightly adjusted\n"
"  when using Idris 2. There is also a\n"
"  [list of required updates](https://idris2.readthedocs.io/en/latest/typedd/typedd.html).\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:384
msgid ""
"[A Crash Course in Idris 2](https://idris2.readthedocs.io/en/latest/tutorial/"
"index.html)"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:389
#, no-wrap
msgid ""
"  The official Idris 2 tutorial. A comprehensive but dense explanation of\n"
"  all features of Idris 2. I find this to be useful as a reference, and as such\n"
"  it is highly accessible. However, it is not an introduction to functional\n"
"  programming or type-driven development in general.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:391
msgid "[The Idris 2 GitHub Repository](https://github.com/idris-lang/Idris2)"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:398
#, no-wrap
msgid ""
"  Look here for detailed installation instructions and some\n"
"  introductory material. There is also a [wiki](https://github.com/idris-lang/Idris2/wiki),\n"
"  where you can find a [list of editor plugins](https://github.com/idris-lang/Idris2/wiki/The-Idris-editor-experience),\n"
"  a [list of community libraries](https://github.com/idris-lang/Idris2/wiki/Libraries),\n"
"  a [list of external backends](https://github.com/idris-lang/Idris2/wiki/External-backends),\n"
"  and other useful information.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:400
msgid "[The Idris 2 Discord Channel](https://discord.gg/UX68fDs2jc)"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:406
#, no-wrap
msgid ""
"  If you get stuck with a piece of code, want to ask about some\n"
"  obscure language feature, want to promote your new library,\n"
"  or want to just hang out with other Idris programmers, this\n"
"  is the place to go. The discord channel is pretty active and\n"
"  *very* friendly towards newcomers.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:408
msgid "The Idris REPL"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:414
#, no-wrap
msgid ""
"  Finally, a lot of useful information can be provided by\n"
"  Idris itself. I tend to have at least one REPL session open all the\n"
"  time when programming in Idris. My editor (neovim) is set up\n"
"  to use the [language server for Idris 2](https://github.com/idris-community/idris2-lsp),\n"
"  which is incredibly useful. In the REPL,\n"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:t` to inspect the type of an expression or meta variable (hole): `:t "
"foldl`,"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:ti` to inspect the type of a function including implicit arguments: `:"
"ti foldl`,"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid "use `:m` to list all meta variables (holes) in scope,"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:doc` to access the documentation of a top level function (`:doc the`), "
"a data type plus all its constructors and available hints (`:doc Bool`), a "
"language feature (`:doc case`, `:doc let`, `:doc interface`, `:doc record`, "
"or even `:doc ?`), or an interface (`:doc Uninhabited`),"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:module` to import a module from one of the available packages: `:"
"module Data.Vect`,"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:browse` to list the names and types of all functions exported by a "
"loaded module: `:browse Data.Vect`,"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:help` to get a list of other commands plus a short description for "
"each."
msgstr ""

#. type: Title ##
#: ../src/Tutorial/Intro.md:432
#, no-wrap
msgid "Summary"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:439
msgid ""
"In this introduction we learned about the most basic features of the Idris "
"programming language. We used the REPL to tinker with our ideas and inspect "
"the types of things in our code, and we used the Idris compiler to compile "
"an Idris source file to an executable."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:443
msgid ""
"We also learned about the basic shape of a top level definition in Idris, "
"which always consists of an identifier (its name), a type, and an "
"implementation."
msgstr ""

#. type: Plain text
#: ../src/Tutorial/Intro.md:451
msgid ""
"In the [next chapter](Functions1.md), we start programming in Idris for "
"real. We learn how to write our own pure functions, how functions compose, "
"and how we can treat functions just like other values and pass them around "
"as arguments to other functions."
msgstr ""
