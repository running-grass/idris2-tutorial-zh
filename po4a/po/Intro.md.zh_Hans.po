# Chinese translations for po package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the po package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: po 4a\n"
"POT-Creation-Date: 2025-05-15 07:57+0000\n"
"PO-Revision-Date: 2025-05-15 03:06+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1368 ../src/Tutorial/Dependent.md:910
#: ../src/Tutorial/DPair.md:1206 ../src/Tutorial/Eq.md:1100
#: ../src/Tutorial/Folds.md:1064 ../src/Tutorial/Functions1.md:583
#: ../src/Tutorial/Functions2.md:964 ../src/Tutorial/Functor.md:1430
#: ../src/Tutorial/Interfaces.md:821 ../src/Tutorial/Intro.md:453
#: ../src/Tutorial/IO.md:1125 ../src/Tutorial/Predicates.md:1371
#: ../src/Tutorial/Prim.md:1410 ../src/Tutorial/Traverse.md:1148
#: ../src/Appendices/Neovim.md:374 ../src/Appendices/Projects.md:890
#, no-wrap
msgid ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"
msgstr ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"

#. type: Title ###
#: ../src/Tutorial/Dependent.md:1 ../src/Tutorial/Intro.md:90
#, no-wrap
msgid "Dependent Types"
msgstr "依赖类型"

#. type: Title ###
#: ../src/Tutorial/Functor.md:1423 ../src/Tutorial/Intro.md:444
#, no-wrap
msgid "What's next?"
msgstr "接下来做什么？"

#. type: Title #
#: ../src/Tutorial/Intro.md:1
#, no-wrap
msgid "Introduction"
msgstr "引言"

#. type: Plain text
#: ../src/Tutorial/Intro.md:15
msgid ""
"Welcome to my Idris 2 tutorial. I'll try and treat as many aspects of the "
"Idris 2 programming language as possible here.  All `.md` files in here are "
"literate Idris files: They consist of Markdown (hence the `.md` ending), "
"which is being pretty printed by GitHub together with Idris code blocks, "
"which can be type checked and built by the Idris compiler (more on this "
"later).  Note, however, that regular Idris source files use an `.idr` "
"ending, and that you go with that file type unless you end up writing much "
"more prose than code as I do at the moment. Later in this tutorial, you'll "
"have to solve some exercises, the solutions of which can be found in the "
"`src/Solutions` subfolder. There, I use regular `.idr` files."
msgstr ""
"欢迎来到我的 Idris 2 教程。我会尽量全面地介绍 Idris 2 编程语言的各个方面。这"
"里的所有 `.md` 文件都是文学化 Idris 文件：它们由 Markdown 组成（因此以 `.md` "
"结尾），GitHub 会将其与 Idris 代码块一起美观地渲染，这些代码块可以被 Idris 编"
"译器类型检查和构建（稍后会详细介绍）。需要注意的是，常规 Idris 源文件使用 "
"`.idr` 作为后缀，除非你像我现在这样写了大量说明性文字，否则建议使用 `.idr` 文"
"件类型。在本教程后续，你需要完成一些练习，答案可以在 `src/Solutions` 子目录中"
"找到，那里我使用的是常规的 `.idr` 文件。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:23
msgid ""
"Before we begin, make sure to install the Idris compiler on your system.  "
"Throughout this tutorial, I assume you installed the *pack* package manager "
"and setup a skeleton package as described [here](../Appendices/Install.md). "
"It is certainly possible to follow along with just the Idris compiler "
"installed by other means, but some adjustments will be necessary when "
"starting REPL sessions or building executables."
msgstr ""
"在开始之前，请确保你已经在系统上安装了 Idris 编译器。本教程假定你已安装 "
"*pack* 包管理器，并按照[这里](../Appendices/Install.md)的说明配置了一个基础"
"包。当然，仅通过其他方式安装 Idris 编译器也可以学习本教程，但在启动 REPL 会话"
"或构建可执行文件时，可能需要做一些调整。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:27
msgid ""
"Every Idris source file should typically start with a module name plus some "
"necessary imports, and this document is no exception:"
msgstr ""
"每个 Idris 源文件通常都以模块名和一些必要的导入语句开头，本教程也不例外："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:28
#, no-wrap
msgid "module Tutorial.Intro\n"
msgstr "module Tutorial.Intro\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:35
msgid ""
"A module name consists of a list of identifiers separated by dots and must "
"reflect the folder structure plus the module file's name."
msgstr "模块名由用点分隔的标识符组成，必须与文件夹结构及模块文件名相对应。"

#. type: Title ##
#: ../src/Tutorial/Intro.md:36
#, no-wrap
msgid "About the Idris Programming Language"
msgstr "关于 Idris 编程语言"

#. type: Plain text
#: ../src/Tutorial/Intro.md:41
msgid ""
"Idris is a *pure*, *dependently typed*, *total* *functional* programming "
"language. I'll quickly explain each of these adjectives in this section."
msgstr ""
"Idris 是一种*纯*、*依值类型*、*完全*的*函数式*编程语言。本节将简要解释这些术"
"语的含义。"

#. type: Title ###
#: ../src/Tutorial/Intro.md:42
#, no-wrap
msgid "Functional Programming"
msgstr "函数式编程"

#. type: Plain text
#: ../src/Tutorial/Intro.md:56
msgid ""
"In functional programming languages, functions are first-class constructs, "
"meaning that they can be assigned to variables, passed as arguments to other "
"functions, and returned as results from functions. Unlike for instance in "
"object-oriented programming languages, in functional programming, functions "
"are the main form of abstraction. This means that whenever we find a common "
"pattern or (almost) identical code in several parts of a project, we try to "
"abstract over this in order to have to write the corresponding code only "
"once.  We do this by introducing one or more new functions implementing this "
"behavior. Doing so, we often try to be as general as possible to make our "
"functions as versatile to use as possible."
msgstr ""
"在函数式编程语言中，函数是一等公民，这意味着它们可以赋值给变量、作为参数传递"
"给其他函数，也可以作为函数的返回值。与面向对象编程语言不同，函数式编程中，函"
"数是主要的抽象手段。这意味着当我们在项目的多个部分发现相同或类似的代码时，会"
"通过抽象出一个或多个新函数来实现复用，从而只需编写一次相关代码。通常我们会尽"
"量让函数设计得通用，以便在更多场景下复用。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:60
msgid ""
"Functional programming languages are concerned with the evaluation of "
"functions, unlike classical imperative languages, which are concerned with "
"the execution of statements."
msgstr "函数式编程语言关注的是函数的求值，而传统命令式语言关注的是语句的执行。"

#. type: Title ###
#: ../src/Tutorial/Intro.md:61
#, no-wrap
msgid "Pure Functional Programming"
msgstr "纯函数式编程"

#. type: Plain text
#: ../src/Tutorial/Intro.md:71
msgid ""
"Pure functional programming languages come with an additional important "
"guarantee: Functions don't have side effects like writing to a file or "
"mutating global state. They can only compute a result from their arguments "
"possibly by invoking other pure functions, *and nothing else*. As a "
"consequence, given the same input, they will *always* generate the same "
"output.  This property is known as [referential transparency](https://"
"en.wikipedia.org/wiki/Referential_transparency)."
msgstr ""
"纯函数式编程语言还提供了一个重要保证：函数不会产生诸如写文件或修改全局状态等"
"副作用。它们只能通过参数（以及可能调用其他纯函数）来计算结果，*除此之外别无他"
"法*。因此，给定相同的输入，它们*总是*产生相同的输出。这一特性被称为[引用透明]"
"(https://en.wikipedia.org/wiki/Referential_transparency)。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:73
msgid "Pure functions have several advantages:"
msgstr "纯函数有诸多优点："

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:76
msgid ""
"They can easily be tested by specifying (possibly randomly generated)  sets "
"of input arguments together with the expected results."
msgstr "可以通过指定（甚至随机生成）输入参数及期望结果，轻松对其进行测试。"

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:80
msgid ""
"They are thread-safe, since they don't mutate global state, and as such can "
"be freely used in several computations running in parallel."
msgstr ""
"由于不会修改全局状态，纯函数是线程安全的，因此可以在多个并发计算中自由使用。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:82
msgid "There are, of course, also some disadvantages:"
msgstr "当然，纯函数也有一些局限："

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:85
msgid ""
"Some algorithms are hard to implement efficiently using only pure functions."
msgstr "有些算法仅用纯函数难以高效实现。"

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:89
msgid ""
"Writing programs that actually *do* something (have some observable effect) "
"is a bit trickier but certainly possible."
msgstr ""
"要编写真正*产生效果*（即有可观察副作用）的程序会更复杂一些，但绝对可行。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:97
msgid ""
"Idris is a strongly, statically typed programming language. This means that "
"every Idris expression is given a *type* (for instance: integer, list of "
"strings, boolean, function from integer to boolean, etc.)  and types are "
"verified at compile time to rule out certain common programming errors."
msgstr ""
"Idris 是一种强类型、静态类型的编程语言。这意味着每个 Idris 表达式都有一个*类"
"型*（如：整数、字符串列表、布尔值、从整数到布尔值的函数等），并且类型会在编译"
"时被检查，以避免常见的编程错误。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:103
msgid ""
"For instance, if a function expects an argument of type `String` (a sequence "
"of unicode characters, such as `\"Hello123\"`), it is a *type error* to "
"invoke this function with an argument of type `Integer`, and the Idris "
"compiler will refuse to generate an executable from such an ill-typed "
"program."
msgstr ""
"例如，如果某个函数需要 `String` 类型的参数（即 Unicode 字符序列，如 "
"`\"Hello123\"`），而你用 `Integer` 类型的参数调用它，这就是*类型错误*，Idris "
"编译器会拒绝为这种类型错误的程序生成可执行文件。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:111
msgid ""
"Being *statically typed* means that the Idris compiler will catch type "
"errors at *compile time*, that is, before it generates an executable program "
"that can be run. The opposite to this are *dynamically typed* languages such "
"as Python, which check for type errors at *runtime*, that is, when a program "
"is being executed. It is the philosophy of statically typed languages to "
"catch as many type errors as possible before there even is a program that "
"can be run."
msgstr ""
"*静态类型*意味着 Idris 编译器会在*编译时*捕获类型错误，也就是说，在生成可执行"
"程序之前就能发现错误。与之相对的是*动态类型*语言（如 Python），它们会在*运行"
"时*（即程序执行时）检查类型错误。静态类型语言的理念是在程序运行前尽可能多地发"
"现类型错误。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:119
msgid ""
"Even more, Idris is *dependently typed*, which is one of its most "
"characteristic properties in the landscape of programming languages. In "
"Idris, types are *first class*: Types can be passed as arguments to "
"functions, and functions can return types as their results. Even more, types "
"can *depend* on other *values*.  What this means, and why this is incredibly "
"useful, we'll explore in due time."
msgstr ""
"此外，Idris 还支持*依值类型*，这是其在编程语言领域最具代表性的特性之一。在 "
"Idris 中，类型是一等公民：类型可以作为参数传递给函数，函数也可以返回类型作为"
"结果。更进一步，类型还可以*依赖于*其他*值*。这些特性意味着什么，以及它们为何"
"如此强大，我们会在后续详细探讨。"

#. type: Title ###
#: ../src/Tutorial/Intro.md:120
#, no-wrap
msgid "Total Functions"
msgstr "全函数"

#. type: Plain text
#: ../src/Tutorial/Intro.md:127
msgid ""
"A *total* function is a pure function, that is guaranteed to return a value "
"of the expected return type for every possible input in a finite number of "
"computational steps. A total function will never fail with an exception or "
"loop infinitely, although it can still take arbitrarily long to compute its "
"result"
msgstr ""
"*全*函数是一类纯函数，它保证对每一个可能的输入，都能在有限的计算步骤内返回一"
"个符合预期类型的值。全函数不会因异常而失败，也不会陷入无限循环（尽管计算时间"
"可能很长）。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:136
msgid ""
"Idris comes with a totality checker built-in, which enables us to verify the "
"functions we write to be provably total. Totality in Idris is opt-in, as in "
"general, checking the totality of an arbitrary computer program is "
"undecidable (see also the [halting problem](https://en.wikipedia.org/wiki/"
"Halting_problem)).  However, if we annotate a function with the `total` "
"keyword, Idris will fail with a type error, if its totality checker cannot "
"verify that the function in question is indeed total."
msgstr ""
"Idris 内置了完全性检查器，可以帮助我们验证所写函数是否真正\"全\"。在 Idris "
"中，完全性检查是可选的，因为一般来说，判断任意程序是否完全是不可判定的（参见"
"[停机问题](https://en.wikipedia.org/wiki/Halting_problem)）。但如果你用 "
"`total` 关键字标注某个函数，而 Idris 检查器无法证明其完全性，则会报类型错误。"

#. type: Title ##
#: ../src/Tutorial/Intro.md:137
#, no-wrap
msgid "Using the REPL"
msgstr "使用 REPL"

#. type: Plain text
#: ../src/Tutorial/Intro.md:144
msgid ""
"Idris comes with a useful REPL (an acronym for *Read Evaluate Print Loop*), "
"which we will use for tinkering with small ideas, and for quickly "
"experimenting with the code we just wrote.  In order to start a REPL "
"session, run the following command in a terminal:"
msgstr ""
"Idris 自带了一个非常实用的 REPL（即 *Read Evaluate Print Loop*，读-求值-打印-"
"循环），我们可以用它来尝试小想法，或快速测试刚写的代码。要启动 REPL 会话，请"
"在终端输入："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:145
#, no-wrap
msgid "pack repl\n"
msgstr "pack repl\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:150
msgid "Idris should now be ready to accept you commands:"
msgstr "Idris 现在应该准备好接受你的命令了："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:151
#, no-wrap
msgid ""
"     ____    __     _         ___\n"
"    /  _/___/ /____(_)____   |__ \\\n"
"    / // __  / ___/ / ___/   __/ /     Version 0.5.1-3c532ea35\n"
"  _/ // /_/ / /  / (__  )   / __/      https://www.idris-lang.org\n"
" /___/\\__,_/_/  /_/____/   /____/      Type :? for help\n"
"\n"
"Welcome to Idris 2.  Enjoy yourself!\n"
"Main>\n"
msgstr ""
"     ____    __     _         ___\n"
"    /  _/___/ /____(_)____   |__ \\\n"
"    / // __  / ___/ / ___/   __/ /     Version 0.5.1-3c532ea35\n"
"  _/ // /_/ / /  / (__  )   / __/      https://www.idris-lang.org\n"
" /___/\\__,_/_/  /_/____/   /____/      Type :? for help\n"
"\n"
"Welcome to Idris 2.  Enjoy yourself!\n"
"Main>\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:164
msgid ""
"We can go ahead and enter some simple arithmetic expressions. Idris will "
"*evaluate* these and print the result:"
msgstr "我们可以输入一些简单的算术表达式，Idris 会*求值*并输出结果："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:165
#, no-wrap
msgid ""
"Main> 2 * 4\n"
"8\n"
"Main> 3 * (7 + 100)\n"
"321\n"
msgstr ""
"Main> 2 * 4\n"
"8\n"
"Main> 3 * (7 + 100)\n"
"321\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:174
msgid ""
"Since every expression in Idris has an associated *type*, we might want to "
"inspect these as well:"
msgstr ""
"由于 Idris 中每个表达式都有对应的*类型*，我们也可以查看它们的类型信息："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:175
#, no-wrap
msgid ""
"Main> :t 2\n"
"2 : Integer\n"
msgstr ""
"Main> :t 2\n"
"2 : Integer\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:183
msgid ""
"Here `:t` is a command of the Idris REPL (it is not part of the Idris "
"programming language), and it is used to inspect the type of an expression."
msgstr ""
"这里的 `:t` 是 Idris REPL 的命令（不是 Idris 语言本身的一部分），用于查看表达"
"式的类型。"

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:184
#, no-wrap
msgid ""
"Main> :t 2 * 4\n"
"2 * 4 : Integer\n"
msgstr ""
"Main> :t 2 * 4\n"
"2 * 4 : Integer\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:199
msgid ""
"Whenever we perform calculations with integer literals without being "
"explicit about the types we want to use, Idris will use `Integer` as a "
"default. `Integer` is an arbitrary precision signed integer type. It is one "
"of the *primitive types* built into the language. Other primitives include "
"fixed precision signed and unsigned integral types (`Bits8`, `Bits16`, "
"`Bits32` `Bits64`, `Int8`, `Int16`, `Int32`, and `Int64`), double precision "
"(64 bit) floating point numbers (`Double`), unicode characters (`Char`) and "
"strings of unicode characters (`String`).  We will use many of these in due "
"time."
msgstr ""
"当我们用整数字面量进行计算而未明确指定类型时，Idris 默认使用 `Integer` 类型。"
"`Integer` 是一种任意精度的有符号整数，是语言内置的*原语类型*之一。其他原语类"
"型还包括定长有符号和无符号整数（如 `Bits8`、`Bits16`、`Bits32`、`Bits64`、"
"`Int8`、`Int16`、`Int32`、`Int64`）、双精度（64 位）浮点数（`Double`）、"
"Unicode 字符（`Char`）和 Unicode 字符串（`String`）等。后续我们会用到其中许多"
"类型。"

#. type: Title ##
#: ../src/Tutorial/Intro.md:200
#, no-wrap
msgid "A First Idris Program"
msgstr "第一个 Idris 程序"

#. type: Plain text
#: ../src/Tutorial/Intro.md:207
msgid ""
"We will often start up a REPL for tinkering with small parts of the Idris "
"language, for reading some documentation, or for inspecting the content of "
"an Idris module, but now we will write a minimal Idris program to get "
"started with the language. Here comes the mandatory *Hello World*:"
msgstr ""
"我们经常会启动一个 REPL 来修补 Idris 语言的一小部分，阅读一些文档，或检查 "
"Idris 模块的内容，但现在我们将编写一个最小的 Idris 程序来开始使用该语言。这是"
"强制性的 *Hello World*："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:208
#, no-wrap
msgid ""
"main : IO ()\n"
"main = putStrLn \"Hello World!\"\n"
msgstr ""
"main : IO ()\n"
"main = putStrLn \"Hello World!\"\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:216
msgid ""
"We will inspect the code above in some detail in a moment, but first we'd "
"like to compile and run it. From this project's root directory, run the "
"following:"
msgstr ""
"稍后我们将详细检查上面的代码，但首先我们要编译并运行它。在此项目的根目录中，"
"运行以下命令："

#. type: Fenced code block (sh)
#: ../src/Tutorial/Intro.md:216
#, no-wrap
msgid "pack -o hello exec src/Tutorial/Intro.md\n"
msgstr "pack -o hello exec src/Tutorial/Intro.md\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:224
msgid ""
"This will create executable `hello` in directory `build/exec`, which can be "
"invoked from the command-line like so (without the dollar prefix; this is "
"used here to distinguish the terminal command from its output):"
msgstr ""
"这将在目录 `build/exec` 中创建可执行文件 `hello`，可以像这样从命令行调用它"
"（没有美元前缀；这里用来区分终端命令和它的输出）："

#. type: Fenced code block (sh)
#: ../src/Tutorial/Intro.md:225
#, no-wrap
msgid ""
"$ build/exec/hello\n"
"Hello World!\n"
msgstr ""
"$ build/exec/hello\n"
"Hello World!\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:238
#, no-wrap
msgid ""
"The pack program requires an `.ipkg` to be in scope (in the current\n"
"directory or one of its parent directories) from which\n"
"it will get other settings like the source directory to use\n"
"(`src` in our case). The optional `-o` option gives the name of the\n"
"executable to be generated. Pack comes up with a name of its own\n"
"it this is missing. Type `pack help` for a list\n"
"of available command-line options and commands, and `pack help <cmd>`\n"
"for getting help for a specific command.\n"
msgstr "`--find-ipkg` 选项将在当前目录或其父目录之一中查找 `.ipkg` 文件，从中获取其他设置，如要使用的源码目录（在我们的例子中是 `src`）。`-o` 选项给出要生成的可执行文件的名称。输入 `idris2 --help` 以获取可用命令行选项和环境变量的列表。\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:241
msgid ""
"As an alternative, you can also load this source file in a REPL session and "
"invoke function `main` from there:"
msgstr ""
"作为替代方案，您还可以在 REPL 会话中加载此源文件并从那里调用函数 `main`："

#. type: Fenced code block (sh)
#: ../src/Tutorial/Intro.md:242
#, no-wrap
msgid "pack repl src/Tutorial/Intro.md\n"
msgstr "pack repl src/Tutorial/Intro.md\n"

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:246
#, no-wrap
msgid ""
"Tutorial.Intro> :exec main\n"
"Hello World!\n"
msgstr ""
"Tutorial.Intro> :exec main\n"
"Hello World!\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:253
msgid ""
"Go ahead and try both ways of building and running function `main` on your "
"system!"
msgstr "继续尝试在您的系统上构建和运行函数 `main` 的两种方法！"

#. type: Title ##
#: ../src/Tutorial/Intro.md:254
#, no-wrap
msgid "The Shape of an Idris Definition"
msgstr "如何声明一个 Idris 定义"

#. type: Plain text
#: ../src/Tutorial/Intro.md:258
msgid ""
"Now that we executed our first Idris program, we will talk a bit more about "
"the code we had to write to define it."
msgstr ""
"现在我们执行了第一个 Idris 程序，接下来我们将更多地讨论我们如何编写代码来定义"
"它。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:265
msgid ""
"A typical top level function in Idris consists of three things: The "
"function's name (`main` in our case), its type (`IO ()`)  plus its "
"implementation (`putStrLn \"Hello World\"`). It is easier to explain these "
"things with a couple of simple examples. Below, we define a top level "
"constant for the largest unsigned eight bit integer:"
msgstr ""
"Idris 中一个典型的顶级函数由三部分组成：函数的名称（在我们的例子中是 "
"`main`），它的类型（`IO ()`）加上它的实现（`putStrLn \"Hello World\"`）。用几"
"个简单的例子来解释这些事情会更容易。下面，我们为最大的无符号八位整数定义一个"
"顶级常量："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:266
#, no-wrap
msgid ""
"maxBits8 : Bits8\n"
"maxBits8 = 255\n"
msgstr ""
"maxBits8 : Bits8\n"
"maxBits8 = 255\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:280
msgid ""
"The first line can be read as: \"We'd like to declare (nullary)  function "
"`maxBits8`. It is of type `Bits8`\". This is called the *function "
"declaration*: we declare that there shall be a function of the given name "
"and type. The second line reads: \"The result of invoking `maxBits8` should "
"be `255`.\" (As you can see, we can use integer literals for other integral "
"types than just `Integer`.) This is called the *function definition*: "
"Function `maxBits8` should behave as described here when being evaluated."
msgstr ""
"第一行可以读作：\"我们想声明（零元）函数 `maxBits8`。它的类型是 `Bits8`\"。这"
"称为*函数声明*：我们声明，应该有一个给定名称和类型的函数。第二行读作：\"调用 "
"`maxBits8` 的结果应该是 `255`。\"（如您所见，我们可以将整数字面量用于其他整数"
"类型，而不仅仅是 `Integer`。）第二行称为*函数定义*：此处应该描述函数 "
"`maxBits8` 在求值时的表现。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:283
msgid ""
"We can inspect this at the REPL. Load this source file into an Idris REPL "
"(as described above), and run the following tests."
msgstr ""
"我们可以在 REPL 进行检查。将此源文件加载到 Idris REPL 中（如上所述），然后运"
"行以下测试。"

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:284
#, no-wrap
msgid ""
"Tutorial.Intro> maxBits8\n"
"255\n"
"Tutorial.Intro> :t maxBits8\n"
"Tutorial.Intro.maxBits8 : Bits8\n"
msgstr ""
"Tutorial.Intro> maxBits8\n"
"255\n"
"Tutorial.Intro> :t maxBits8\n"
"Tutorial.Intro.maxBits8 : Bits8\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:292
msgid "We can also use `maxBits8` as part of another expression:"
msgstr "我们也可以使用 `maxBits8` 作为另一个表达式的一部分："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:293
#, no-wrap
msgid ""
"Tutorial.Intro> maxBits8 - 100\n"
"155\n"
msgstr ""
"Tutorial.Intro> maxBits8 - 100\n"
"155\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:300
msgid ""
"I called `maxBits8` a *nullary function*, which is just a fancy word for "
"*constant*. Let's write and test our first *real* function:"
msgstr ""
"我将 `maxBits8` 称为*零元函数*，它只是*常量*的一个花哨的同义词。让我们编写并"
"测试我们的第一个*真实*的函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:301
#, no-wrap
msgid ""
"distanceToMax : Bits8 -> Bits8\n"
"distanceToMax n = maxBits8 - n\n"
msgstr ""
"distanceToMax : Bits8 -> Bits8\n"
"distanceToMax n = maxBits8 - n\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:313
#, no-wrap
msgid ""
"This introduces some new syntax and a new kind of type: Function\n"
"types. `distanceToMax : Bits8 -> Bits8` can be read as follows:\n"
"\"`distanceToMax` is a function of one argument of type `Bits8`, which\n"
"returns a result of type `Bits8`\". In the implementation, the argument\n"
"is given a local identifier `n`, which is then used in the\n"
"calculation on the right hand side. Again, go ahead and try this\n"
"function at the REPL:\n"
msgstr "这引入了一些新语法和一种新类型：函数类型。 `distanceToMax : Bits8 -> Bits8` 可以这样读：\"`distanceToMax` 是具有一个 `Bits8` 类型参数的函数，它返回 `Bits8` 类型的结果\"。在实现中，参数给定一个本地标识符 `n`，然后在右侧计算。再次在 REPL 中尝试函数：\n"

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:314
#, no-wrap
msgid ""
"Tutorial.Intro> distanceToMax 12\n"
"243\n"
"Tutorial.Intro> :t distanceToMax\n"
"Tutorial.Intro.distanceToMax : Bits8 -> Bits8\n"
"Tutorial.Intro> :t distanceToMax 12\n"
"distanceToMax 12 : Bits8\n"
msgstr ""
"Tutorial.Intro> distanceToMax 12\n"
"243\n"
"Tutorial.Intro> :t distanceToMax\n"
"Tutorial.Intro.distanceToMax : Bits8 -> Bits8\n"
"Tutorial.Intro> :t distanceToMax 12\n"
"distanceToMax 12 : Bits8\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:325
msgid ""
"As a final example, let's implement a function to calculate the square of an "
"integer:"
msgstr "作为最后一个例子，让我们实现一个计算整数平方的函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Intro.md:326
#, no-wrap
msgid ""
"square : Integer -> Integer\n"
"square n = n * n\n"
msgstr ""
"square : Integer -> Integer\n"
"square n = n * n\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:339
msgid ""
"We now learn a very important aspect of programming in Idris: Idris is a "
"*statically typed* programming language. We are not allowed to freely mix "
"types as we please. Doing so will result in an error message from the type "
"checker (which is part of the compilation process of Idris).  For instance, "
"if we try the following at the REPL, we will get a type error:"
msgstr ""
"我们现在要学习 Idris 编程的一个非常重要的方面：Idris 是*静态类型*编程语言，不"
"能随意混用不同类型。否则会收到类型检查器的报错（类型检查是 Idris 编译过程的一"
"部分）。例如，在 REPL 中尝试如下操作时会报类型错误："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:340
#, no-wrap
msgid ""
"Tutorial.Intro> square maxBits8\n"
"Error: ...\n"
msgstr ""
"Tutorial.Intro> square maxBits8\n"
"Error: ...\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:350
msgid ""
"The reason: `square` expects an argument of type `Integer`, but `maxBits8` "
"is of type `Bits8`. Many primitive types are interconvertible (sometimes "
"with the risk of loss of precision) using function `cast` (more on the "
"details later):"
msgstr ""
"原因是：`square` 需要 `Integer` 类型的参数，而 `maxBits8` 的类型是 `Bits8`。"
"许多原语类型之间可以用 `cast` 函数进行转换（有时可能会丢失精度，后面会详细介"
"绍）："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:351
#, no-wrap
msgid ""
"Tutorial.Intro> square (cast maxBits8)\n"
"65025\n"
msgstr ""
"Tutorial.Intro> square (cast maxBits8)\n"
"65025\n"

#. type: Plain text
#: ../src/Tutorial/Intro.md:362
msgid ""
"Note, that in the example above the result is much larger that `maxBits8`. "
"The reason is, that `maxBits8` is first converted to an `Integer` of the "
"same value, which is then squared. If on the other hand we squared "
"`maxBits8` directly, the result would be truncated to still fit the valid "
"range of `Bits8`:"
msgstr ""
"请注意，上例的结果远大于 `maxBits8`。这是因为 `maxBits8` 先被转换为同值的 "
"`Integer`，再进行平方。如果直接对 `maxBits8` 求平方，结果会被截断以适应 "
"`Bits8` 的取值范围："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Intro.md:363
#, no-wrap
msgid ""
"Tutorial.Intro> maxBits8 * maxBits8\n"
"1\n"
msgstr ""
"Tutorial.Intro> maxBits8 * maxBits8\n"
"1\n"

#. type: Title ##
#: ../src/Tutorial/Intro.md:368
#, no-wrap
msgid "Where to get Help"
msgstr "在哪里可以获得帮助"

#. type: Plain text
#: ../src/Tutorial/Intro.md:373
msgid ""
"There are several resources available online and in print, where you can "
"find help and documentation about the Idris programming language. Here is a "
"non-comprehensive list of them:"
msgstr ""
"有许多线上和纸质资源可以查阅 Idris 编程语言的帮助和文档，下面列出部分常用参"
"考："

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:375
msgid ""
"[Type-Driven Development with Idris](https://www.manning.com/books/type-"
"driven-development-with-idris)"
msgstr ""
"[使用 Idris 进行类型驱动开发](https://www.manning.com/books/type-driven-"
"development-with-idris)"

#. type: Plain text
#: ../src/Tutorial/Intro.md:382
#, no-wrap
msgid ""
"  *The* Idris book! This describes in great detail\n"
"  the core concepts for using Idris and dependent types\n"
"  to write robust and concise code. It uses Idris 1 in\n"
"  its examples, so parts of it have to be slightly adjusted\n"
"  when using Idris 2. There is also a\n"
"  [list of required updates](https://idris2.readthedocs.io/en/latest/typedd/typedd.html).\n"
msgstr "*专门*讲 Idris 的书！这描述得很详细。使用 Idris 和依赖类型的核心概念编写健壮和简洁的代码。它使用 Idris 1 实现书中的例子，所以使用 Idris 2 时它的一部分必须稍微调整，有一个[所需更新列表](https://idris2.readthedocs.io/en/latest/typedd/typedd.html)。\n"

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:384
msgid ""
"[A Crash Course in Idris 2](https://idris2.readthedocs.io/en/latest/tutorial/"
"index.html)"
msgstr ""
"[Idris 2 速成课程](https://idris2.readthedocs.io/en/latest/tutorial/"
"index.html)"

#. type: Plain text
#: ../src/Tutorial/Intro.md:389
#, no-wrap
msgid ""
"  The official Idris 2 tutorial. A comprehensive but dense explanation of\n"
"  all features of Idris 2. I find this to be useful as a reference, and as such\n"
"  it is highly accessible. However, it is not an introduction to functional\n"
"  programming or type-driven development in general.\n"
msgstr "Idris 2 官方教程，对 Idris 2 的所有特性做了全面而深入的讲解，适合作为参考手册。但它并不是函数式编程或类型驱动开发的入门读物。\n"

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:391
msgid "[The Idris 2 GitHub Repository](https://github.com/idris-lang/Idris2)"
msgstr "[Idris 2 GitHub 存储库](https://github.com/idris-lang/Idris2)"

#. type: Plain text
#: ../src/Tutorial/Intro.md:398
#, no-wrap
msgid ""
"  Look here for detailed installation instructions and some\n"
"  introductory material. There is also a [wiki](https://github.com/idris-lang/Idris2/wiki),\n"
"  where you can find a [list of editor plugins](https://github.com/idris-lang/Idris2/wiki/The-Idris-editor-experience),\n"
"  a [list of community libraries](https://github.com/idris-lang/Idris2/wiki/Libraries),\n"
"  a [list of external backends](https://github.com/idris-lang/Idris2/wiki/External-backends),\n"
"  and other useful information.\n"
msgstr ""
"  在这里查看详细的安装说明和一些介绍材料。还有一个[wiki](https://github.com/idris-lang/Idris2/wiki)，\n"
"  在这里你可以找到[编辑器插件列表](https://github.com/idris-lang/Idris2/wiki/The-Idris-editor-experience)，\n"
"  [社区库列表](https://github.com/idris-lang/Idris2/wiki/Libraries),\n"
"  [外部后端列表](https://github.com/idris-lang/Idris2/wiki/External-backends),\n"
"  和其他有用的信息。\n"

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:400
msgid "[The Idris 2 Discord Channel](https://discord.gg/UX68fDs2jc)"
msgstr "[Idris 2 Discord 频道](https://discord.gg/UX68fDs2jc)"

#. type: Plain text
#: ../src/Tutorial/Intro.md:406
#, no-wrap
msgid ""
"  If you get stuck with a piece of code, want to ask about some\n"
"  obscure language feature, want to promote your new library,\n"
"  or want to just hang out with other Idris programmers, this\n"
"  is the place to go. The discord channel is pretty active and\n"
"  *very* friendly towards newcomers.\n"
msgstr "  如果你被一段代码卡住了，想问一些晦涩的语言功能，想推广你的新库，或者想和其他 Idris 程序员一起出去玩，可以来这个地方。  Discord 频道非常活跃且对新人*非常*友好。\n"

#. type: Bullet: '* '
#: ../src/Tutorial/Intro.md:408
msgid "The Idris REPL"
msgstr "Idris REPL"

#. type: Plain text
#: ../src/Tutorial/Intro.md:414
#, no-wrap
msgid ""
"  Finally, a lot of useful information can be provided by\n"
"  Idris itself. I tend to have at least one REPL session open all the\n"
"  time when programming in Idris. My editor (neovim) is set up\n"
"  to use the [language server for Idris 2](https://github.com/idris-community/idris2-lsp),\n"
"  which is incredibly useful. In the REPL,\n"
msgstr "  最后，Idris 本身可以提供很多有用的信息。在 Idris 编程的时间我倾向于至少打开一个 REPL 会话。我的编辑器（neovim）已设置使用 [Idris 2 的语言服务器](https://github.com/idris-community/idris2-lsp)，在 REPL 中这非常有用。\n"

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:t` to inspect the type of an expression or meta variable (hole): `:t "
"foldl`,"
msgstr "使用 `:t` 检查表达式或元变量（孔）的类型：`:t foldl`,"

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:ti` to inspect the type of a function including implicit arguments: "
"`:ti foldl`,"
msgstr "使用 `:ti` 检查包含隐式参数的函数类型：`:ti foldl`,"

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid "use `:m` to list all meta variables (holes) in scope,"
msgstr "使用 `:m` 列出作用域内的所有元变量（孔），"

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:doc` to access the documentation of a top level function (`:doc the`), "
"a data type plus all its constructors and available hints (`:doc Bool`), a "
"language feature (`:doc case`, `:doc let`, `:doc interface`, `:doc record`, "
"or even `:doc ?`), or an interface (`:doc Uninhabited`),"
msgstr ""
"使用 `:doc` 访问顶级函数 (`:doc the`) 的文档，一种数据类型及其所有构造函数和"
"可用提示 (`:doc Bool` )，语言特性（`:doc case`, `:doc let`, `:doc "
"interface`, `:doc record`，甚至是 `:doc ?`)，或者一个接口（`:doc "
"Uninhabited`），"

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:module` to import a module from one of the available packages: "
"`:module Data.Vect`,"
msgstr "使用 `:module` 从可用包之一导入模块：`:module Data.Vect`,"

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:browse` to list the names and types of all functions exported by a "
"loaded module: `:browse Data.Vect`,"
msgstr ""
"使用 `:browse` 列出加载模块导出的所有函数的名称和类型： `:browse Data.Vect`,"

#. type: Bullet: '  * '
#: ../src/Tutorial/Intro.md:431
msgid ""
"use `:help` to get a list of other commands plus a short description for "
"each."
msgstr "使用 `:help` 获取其他命令的列表以及每个命令的简短描述。"

#. type: Title ##
#: ../src/Tutorial/Intro.md:432
#, no-wrap
msgid "Summary"
msgstr "概括"

#. type: Plain text
#: ../src/Tutorial/Intro.md:439
msgid ""
"In this introduction we learned about the most basic features of the Idris "
"programming language. We used the REPL to tinker with our ideas and inspect "
"the types of things in our code, and we used the Idris compiler to compile "
"an Idris source file to an executable."
msgstr ""
"在本介绍中，我们了解了 Idris 编程语言的最基本功能。我们使用 REPL 来修改我们的"
"想法并检查代码中事物的类型，我们使用 Idris 编译器将 Idris 源文件编译为可执行"
"文件。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:443
msgid ""
"We also learned about the basic shape of a top level definition in Idris, "
"which always consists of an identifier (its name), a type, and an "
"implementation."
msgstr ""
"我们还了解了 Idris 中顶级定义的基本形式，它始终由标识符（其名称）、类型和实现"
"组成。"

#. type: Plain text
#: ../src/Tutorial/Intro.md:451
msgid ""
"In the [next chapter](Functions1.md), we start programming in Idris for "
"real. We learn how to write our own pure functions, how functions compose, "
"and how we can treat functions just like other values and pass them around "
"as arguments to other functions."
msgstr ""
"在[下一章](Functions1.md)中，我们开始在 Idris 中进行真正的编程。我们学习如何"
"编写我们自己的纯函数，函数如何组合，以及我们如何像对待其他值一样对待函数并将"
"它们作为参数传递给其他函数。"
