# Chinese translations for po package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the po package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: po 4a\n"
"POT-Creation-Date: 2025-05-15 20:00+0800\n"
"PO-Revision-Date: 2025-05-15 03:06+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title #
#: ../src/Tutorial/DataTypes.md:1
#, no-wrap
msgid "Algebraic Data Types"
msgstr "代数数据类型"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:8
msgid ""
"In the [previous chapter](Functions1.md), we learned how to write our own "
"functions and combine them to create more complex functionality. Of equal "
"importance is the ability to define our own data types and use them as "
"arguments and results in functions."
msgstr ""
"在[上一章](Functions1.md)中，我们学会了如何编写自己的函数并组合他们来创建更复"
"杂的函数。同样重要的是能够定义我们自己的数据类型，并在函数参数和返回值中使用"
"它们。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:15
msgid ""
"This is a lengthy chapter, densely packed with information.  If you are new "
"to Idris and functional programming, make sure to follow along slowly, "
"experimenting with the examples, and possibly coming up with your own. Make "
"sure to try and solve *all* exercises. The solutions to the exercises can be "
"found [here](../Solutions/DataTypes.idr)."
msgstr ""
"这是一个冗长的章节，信息密集。\n"
"如果您不熟悉 Idris 和函数式编程，请一定要慢慢来，用例子做实验，并可能想出你自"
"己的示例。确保尝试并解决*所有*练习。练习题的答案可以在 [这里](../Solutions/"
"DataTypes.idr) 找到。"

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:16
#, no-wrap
msgid "module Tutorial.DataTypes\n"
msgstr "module Tutorial.DataTypes\n"

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:20
#, no-wrap
msgid "Enumerations"
msgstr "枚举"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:24
msgid "Let's start with a data type for the days of the week as an example."
msgstr "让我们以一个表示星期几的数据类型为例开始讲解"

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:25
#, no-wrap
msgid ""
"data Weekday = Monday\n"
"             | Tuesday\n"
"             | Wednesday\n"
"             | Thursday\n"
"             | Friday\n"
"             | Saturday\n"
"             | Sunday\n"
msgstr ""
"data Weekday = Monday\n"
"             | Tuesday\n"
"             | Wednesday\n"
"             | Thursday\n"
"             | Friday\n"
"             | Saturday\n"
"             | Sunday\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:38
msgid ""
"The declaration above defines a new *type* (`Weekday`) and several new "
"*values* (`Monday` to `Sunday`) of the given type. Go ahead, and verify this "
"at the REPL:"
msgstr ""
"上面的声明定义了一个新的*类型*(`Weekday`)和该类型给定的几个*值*(`Monday` 到 "
"`Sunday`)。接下来在 REPL 上验证这一点："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:39
#, no-wrap
msgid ""
"Tutorial.DataTypes> :t Monday\n"
"Tutorial.DataTypes.Monday : Weekday\n"
"Tutorial.DataTypes> :t Weekday\n"
"Tutorial.DataTypes.Weekday : Type\n"
msgstr ""
"Tutorial.DataTypes> :t Monday\n"
"Tutorial.DataTypes.Monday : Weekday\n"
"Tutorial.DataTypes> :t Weekday\n"
"Tutorial.DataTypes.Weekday : Type\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:48
msgid ""
"So, `Monday` is of type `Weekday`, while `Weekday` itself is of type `Type`."
msgstr "所以，`Monday` 是 `Weekday` 类型，而 `Weekday` 本身是 `Type` 类型。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:52
msgid ""
"It is important to note that a value of type `Weekday` can only ever be one "
"of the values listed above. It is a *type error* to use anything else where "
"a `Weekday` is expected."
msgstr ""
"需要注意的是，`Weekday` 类型的值只能是上面列出的值之一。在需要 `Weekday` 的地"
"方使用其他任何值都会产生一个*类型错误*。"

#. type: Title ####
#: ../src/Tutorial/DataTypes.md:53 ../src/Appendices/QTT.md:318
#, no-wrap
msgid "Pattern Matching"
msgstr "模式匹配"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:59
msgid ""
"In order to use our new data type as a function argument, we need to learn "
"about an important concept in functional programming languages: Pattern "
"matching. Let's implement a function which calculates the successor of a "
"weekday:"
msgstr ""
"为了使用我们的新数据类型作为函数参数，我们需要了解函数式编程语言中的一个重要"
"概念：模式匹配。让我们实现一个函数，它计算一个星期几的后继："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:60
#, no-wrap
msgid ""
"total\n"
"next : Weekday -> Weekday\n"
"next Monday    = Tuesday\n"
"next Tuesday   = Wednesday\n"
"next Wednesday = Thursday\n"
"next Thursday  = Friday\n"
"next Friday    = Saturday\n"
"next Saturday  = Sunday\n"
"next Sunday    = Monday\n"
msgstr ""
"total\n"
"next : Weekday -> Weekday\n"
"next Monday    = Tuesday\n"
"next Tuesday   = Wednesday\n"
"next Wednesday = Thursday\n"
"next Thursday  = Friday\n"
"next Friday    = Saturday\n"
"next Saturday  = Sunday\n"
"next Sunday    = Monday\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:81
msgid ""
"In order to inspect a `Weekday` argument, we match on the different possible "
"values and return a result for each of them.  This is a very powerful "
"concept, as it allows us to match on and extract values from deeply nested "
"data structures.  The different cases in a pattern match are inspected from "
"top to bottom, each being compared against the current function argument. "
"Once a matching pattern is found, the computation on the right hand side of "
"this pattern is evaluated. Later patterns are then ignored."
msgstr ""
"为了检查 `Weekday` 参数，我们匹配不同的可能值并为每个值返回一个结果。这是一个"
"非常强大的概念，因为它允许我们匹配并从深度嵌套的数据结构中提取值。从上到下检"
"查模式匹配中的不同情况，每个都与当前函数参数进行比较。一旦找到匹配的模式，该"
"模式右侧的计算是会求值。后面的模式将被忽略。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:89
msgid ""
"For instance, if we invoke `next` with argument `Thursday`, the first three "
"patterns (`Monday`, `Tuesday`, and `Wednesday`)  will be checked against the "
"argument, but they do not match.  The fourth pattern is a match, and result "
"`Friday` is being returned. Later patterns are then ignored, even if they "
"would also match the input (this becomes relevant with catch-all patterns, "
"which we will talk about in a moment)."
msgstr ""
"例如，如果我们使用参数 `Thursday` 调用 `next`，前三个模式（`Monday`、"
"`Tuesday` 和 `Wednesday`）将根据参数进行检查，但它们不匹配。第四个模式是匹配"
"的，结果 `Friday` 被返回。然后忽略后面的模式，即使它们还会匹配输入（这与全捕"
"获模式有关，我们稍后会谈到）。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:98
msgid ""
"The function above is provably total. Idris knows about the possible values "
"of type `Weekday`, and can therefore figure out that our pattern match "
"covers all possible cases. We can therefore annotate the function with the "
"`total` keyword, and Idris will answer with a type error if it can't verify "
"the function's totality. (Go ahead, and try removing one of the clauses in "
"`next` to get an idea about how an error message from the coverage checker "
"looks like.)"
msgstr ""
"上面的函数可以证明是完全的。Idris 知道`Weekday` 类型的可能值，因此可以计算我"
"们的模式匹配涵盖了所有可能的情况。我们可以使用 `total` 关键字注释函数，如果 "
"Idris 无法验证函数的完全性，会得到一个类型错误。 （继续，并尝试删除其中一个 "
"`next` 中的子句来了解错误是如何产生的，并且可以看看来自覆盖性检查器的错误消息"
"长什么样。）"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:105
msgid ""
"Please remember that these are very strong guarantees from the type checker: "
"Given enough resources, a provably total function will *always* return a "
"result of the given type in a finite amount of time (*resources* here "
"meaning computational resources like memory or, in case of recursive "
"functions, stack space)."
msgstr ""
"请记住，这些来自类型检查器：给定足够的资源，一个可证明的全函数在有限时间内将*"
"总是*返回给定类型的结果（*资源*的意思是计算资源，比如内存，或者，在递归函数情"
"况下的堆栈空间）。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:106
#, no-wrap
msgid "Catch-all Patterns"
msgstr "全捕获模式"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:111
msgid ""
"Sometimes, it is convenient to only match on a subset of the possible values "
"and collect the remaining possibilities in a catch-all clause:"
msgstr ""
"有时比较实用的是只匹配一个可能子集的值，并收集剩余的可能性到全捕获模式中："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:112
#, no-wrap
msgid ""
"total\n"
"isWeekend : Weekday -> Bool\n"
"isWeekend Saturday = True\n"
"isWeekend Sunday   = True\n"
"isWeekend _        = False\n"
msgstr ""
"total\n"
"isWeekend : Weekday -> Bool\n"
"isWeekend Saturday = True\n"
"isWeekend Sunday   = True\n"
"isWeekend _        = False\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:125
msgid ""
"The final line with the catch-all pattern is only invoked if the argument is "
"not equal to `Saturday` or `Sunday`.  Remember: Patterns in a pattern match "
"are matched against the input from top to bottom, and the first match "
"decides which path on the right hand side will be taken."
msgstr ""
"如果参数不等于 `Saturday` 或 `Sunday`，仅调用具有全捕获模式的最后一行。记住："
"模式匹配中的模式匹配\n"
"从上到下的输入和第一个匹配决定将采用右侧的哪条路径。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:129
msgid ""
"We can use catch-all patterns to implement an equality test for `Weekday` "
"(we will not yet use the `==` operator for this; this will have to wait "
"until we learn about *interfaces*):"
msgstr ""
"我们可以使用全捕获模式来实现等式测试`Weekday`（我们还不会为此使用 `==` 运算"
"符；这将必须等到我们了解*接口*以后）："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:130
#, no-wrap
msgid ""
"total\n"
"eqWeekday : Weekday -> Weekday -> Bool\n"
"eqWeekday Monday Monday        = True\n"
"eqWeekday Tuesday Tuesday      = True\n"
"eqWeekday Wednesday Wednesday  = True\n"
"eqWeekday Thursday Thursday    = True\n"
"eqWeekday Friday Friday        = True\n"
"eqWeekday Saturday Saturday    = True\n"
"eqWeekday Sunday Sunday        = True\n"
"eqWeekday _ _                  = False\n"
msgstr ""
"total\n"
"eqWeekday : Weekday -> Weekday -> Bool\n"
"eqWeekday Monday Monday        = True\n"
"eqWeekday Tuesday Tuesday      = True\n"
"eqWeekday Wednesday Wednesday  = True\n"
"eqWeekday Thursday Thursday    = True\n"
"eqWeekday Friday Friday        = True\n"
"eqWeekday Saturday Saturday    = True\n"
"eqWeekday Sunday Sunday        = True\n"
"eqWeekday _ _                  = False\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:143
#, no-wrap
msgid "Enumeration Types in the Prelude"
msgstr "Prelude 中的枚举类型"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:151
msgid ""
"Data types like `Weekday` consisting of a finite set of values are sometimes "
"called *enumerations*. The Idris *Prelude* defines some common enumerations "
"for us: for instance, `Bool` and `Ordering`. As with `Weekday`, we can use "
"pattern matching when implementing functions on these types:"
msgstr ""
"`Weekday` 等数据类型由有限集组成的值有时称为*枚举*。Idris 的 *Prelude* 为我们"
"定义了一些常见的枚举，例如 `Bool` 和 `Ordering`。与 `Weekday` 一样，我们可以"
"在实现函数时使用模式匹配在这些类型上："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:152
#, no-wrap
msgid ""
"-- this is how `not` is implemented in the *Prelude*\n"
"total\n"
"negate : Bool -> Bool\n"
"negate False = True\n"
"negate True  = False\n"
msgstr ""
"-- 这个是 *Prelude* 中的 `not` 函数的实现\n"
"negate : Bool -> Bool\n"
"negate False = True\n"
"negate True  = False\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:162
msgid ""
"The `Ordering` data type describes an ordering relation between two values. "
"For instance:"
msgstr "`Ordering` 数据类型描述了两个值之间的顺序关系。例如："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:163
#, no-wrap
msgid ""
"total\n"
"compareBool : Bool -> Bool -> Ordering\n"
"compareBool False False = EQ\n"
"compareBool False True  = LT\n"
"compareBool True True   = EQ\n"
"compareBool True False  = GT\n"
msgstr ""
"total\n"
"compareBool : Bool -> Bool -> Ordering\n"
"compareBool False False = EQ\n"
"compareBool False True  = LT\n"
"compareBool True True   = EQ\n"
"compareBool True False  = GT\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:176
msgid ""
"Here, `LT` means that the first argument is *less than* the second, `EQ` "
"means that the two arguments are *equal* and `GT` means, that the first "
"argument is *greater than* the second."
msgstr ""
"这里，`LT` 表示第一个参数是*小于*第二个，`EQ`表示两个参数是*相等*，`GT` 表示"
"第一个参数是*大于*第二个。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:177
#, no-wrap
msgid "Case Expressions"
msgstr "Case 表达式"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:183
msgid ""
"Sometimes we need to perform a computation with one of the arguments and "
"want to pattern match on the result of this computation. We can use *case "
"expressions* in this situation:"
msgstr ""
"有时我们需要对参数执行计算并希望对结果进行模式匹配。这种情况下我们可以使用 "
"*case 表达式*："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:184
#, no-wrap
msgid ""
"-- returns the larger of the two arguments\n"
"total\n"
"maxBits8 : Bits8 -> Bits8 -> Bits8\n"
"maxBits8 x y =\n"
"  case compare x y of\n"
"    LT => y\n"
"    _  => x\n"
msgstr ""
"-- 返回两个参数中的最大值\n"
"total\n"
"maxBits8 : Bits8 -> Bits8 -> Bits8\n"
"maxBits8 x y =\n"
"  case compare x y of\n"
"    LT => y\n"
"    _  => x\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:202
msgid ""
"The first line of the case expression (`case compare x y of`)  will invoke "
"function `compare` with arguments `x` and `y`. On the following (indented) "
"lines, we pattern match on the result of this computation. This is of type "
"`Ordering`, so we expect one of the three constructors `LT`, `EQ`, or `GT` "
"as the result.  On the first line, we handle the `LT` case explicitly, while "
"the other two cases are handled with an underscore as a catch-all pattern."
msgstr ""
"case 表达式的第一行(`case compare x y of`)将使用参数 `x` 和 `y` 调用函数"
"`compare`。后面的（缩进）行，我们对结果进行模式匹配。compare的返回类型为 "
"`Ordering`，所以我们期望结果是三个构造函数 `LT`、`EQ` 或 `GT` 之一。在第一"
"行，我们明确地处理 `LT` 的情况，而其他两种情况下划线作为全捕获模式处理。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:206
msgid ""
"Note that indentation matters here: The case block as a whole must be "
"indented (if it starts on a new line), and the different cases must also be "
"indented by the same amount of whitespace."
msgstr ""
"请注意，缩进在这里很重要：整个 Case 块必须缩进（如果它从新行开始），并且不同"
"的 Case 也必须缩进相同数量的空格。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:209
msgid ""
"Function `compare` is overloaded for many data types. We will learn how this "
"works when we talk about interfaces."
msgstr ""
"函数 `compare` 对许多数据类型进行了重载。当我们谈论接口时，我们将了解它是如何"
"工作的。"

#. type: Title ####
#: ../src/Tutorial/DataTypes.md:210
#, no-wrap
msgid "If Then Else"
msgstr "If Then Else"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:214
msgid ""
"When working with `Bool`, there is an alternative to pattern matching common "
"to most programming languages:"
msgstr ""
"使用 `Bool` 时，可以使用模式匹配的替代方法，同时也是大多数编程语言的共同点："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:215
#, no-wrap
msgid ""
"total\n"
"maxBits8' : Bits8 -> Bits8 -> Bits8\n"
"maxBits8' x y = if compare x y == LT then y else x\n"
msgstr ""
"total\n"
"maxBits8' : Bits8 -> Bits8 -> Bits8\n"
"maxBits8' x y = if compare x y == LT then y else x\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:225
msgid ""
"Note that the `if then else` expression always returns a value and, "
"therefore, the `else` branch cannot be dropped. This is different from the "
"behavior in typical imperative languages, where `if` is a statement with "
"possible side effects."
msgstr ""
"请注意，`if then else` 表达式总是返回一个值。因此，不能删除 `else` 分支。这是"
"和典型的命令式语言中的行为所不同的，其中 `if` 是可能产生副作用的声明。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:226
#, no-wrap
msgid "Naming Conventions: Identifiers"
msgstr "命名约定：标识符"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:233
msgid ""
"While we are free to use lower-case and upper-case identifiers for function "
"names, type- and data constructors must be given upper-case identifiers in "
"order not to confuse Idris (operators are also fine).  For instance, the "
"following data definition is not valid, and Idris will complain that it "
"expected upper-case identifiers:"
msgstr ""
"虽然我们可以自由使用小写和大写函数名标识符，但是类型和数据构造函数必须为大写"
"标识符，以免对 Idris 产生混淆（运算符也可以）。例如，以下数据定义无效，并且 "
"Idris会抱怨它需要大写的标识符："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:234
#, no-wrap
msgid "data foo = bar | baz\n"
msgstr "data foo = bar | baz\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:240
msgid ""
"The same goes for similar data definitions like records and sum types (both "
"will be explained below):"
msgstr "类似的数据定义（如记录与和类型）也是如此（两者都将在下面解释）："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:241
#, no-wrap
msgid ""
"-- not valid Idris\n"
"record Foo where\n"
"  constructor mkfoo\n"
msgstr ""
"-- 非法的 Idris 定义\n"
"record Foo where\n"
"  constructor mkfoo\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:252
msgid ""
"On the other hand, we typically use lower-case identifiers for function "
"names, unless we plan to use them mostly during type checking (more on this "
"later). This is not enforced by Idris, however, so if you are working in a "
"domain where upper-case identifiers are preferable, feel free to use those:"
msgstr ""
"另一方面，我们通常使用小写的函数标识符名称，除非我们计划主要在类型检查期间使"
"用它们（之后会有更多关于这个的讨论）。然而，这不是 Idris 强制执行的，所以如果"
"你在首选大写标识符的地方，请随意使用他们："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:253
#, no-wrap
msgid ""
"foo : Bits32 -> Bits32\n"
"foo = (* 2)\n"
"\n"
"Bar : Bits32 -> Bits32\n"
"Bar = foo\n"
msgstr ""
"foo : Bits32 -> Bits32\n"
"foo = (* 2)\n"
"\n"
"Bar : Bits32 -> Bits32\n"
"Bar = foo\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:261 ../src/Tutorial/Dependent.md:444
#: ../src/Tutorial/DPair.md:348 ../src/Tutorial/Eq.md:279
#: ../src/Tutorial/Folds.md:373 ../src/Tutorial/Functor.md:381
#: ../src/Tutorial/Interfaces.md:189 ../src/Tutorial/IO.md:317
#: ../src/Tutorial/Predicates.md:305 ../src/Tutorial/Prim.md:448
#: ../src/Tutorial/Traverse.md:247
#, no-wrap
msgid "Exercises part 1"
msgstr "练习第 1 部分"

#. type: Bullet: '1. '
#: ../src/Tutorial/DataTypes.md:267
msgid ""
"Use pattern matching to implement your own versions of boolean operators "
"`(&&)` and `(||)` calling them `and` and `or` respectively."
msgstr ""
"使用模式匹配来实现您自己版本的布尔运算符 `(&&)` 和 `(||)` ，分别称为 `and` "
"和 `or`。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:274
#, no-wrap
msgid ""
"   Note: One way to go about this is to enumerate\n"
"   all four possible combinations of two boolean\n"
"   values and give the result for each. However, there\n"
"   is a shorter, more clever way,\n"
"   requiring only two pattern matches for each of the\n"
"   two functions.\n"
msgstr "   注意：解决此问题的一种方法是枚举两个布尔值的所有四种可能组合值并给出每个结果。然而，有一种更短、更聪明的方式，两个函数每个只需要两个模式匹配。\n"

#. type: Bullet: '2. '
#: ../src/Tutorial/DataTypes.md:282
msgid ""
"Define your own data type representing different units of time (seconds, "
"minutes, hours, days, weeks), and implement the following functions for "
"converting between time spans using different units. Hint: Use integer "
"division (`div`)  when going from seconds to some larger unit like hours)."
msgstr ""
"定义您自己的数据类型来表示不同的时间单位（秒、分钟、小时、天、周），并实现以"
"下函数以使用不同的单位在时间跨度之间进行转换。提示：当从秒到一些更大的单位"
"（如小时）时，使用整数除法（`div`）。"

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:283
#, no-wrap
msgid ""
"   data UnitOfTime = Second -- add additional values\n"
"\n"
"   -- calculate the number of seconds from a\n"
"   -- number of steps in the given unit of time\n"
"   total\n"
"   toSeconds : UnitOfTime -> Integer -> Integer\n"
"\n"
"   -- Given a number of seconds, calculate the\n"
"   -- number of steps in the given unit of time\n"
"   total\n"
"   fromSeconds : UnitOfTime -> Integer -> Integer\n"
"\n"
"   -- convert the number of steps in a given unit of time\n"
"   -- to the number of steps in another unit of time.\n"
"   -- use `fromSeconds` and `toSeconds` in your implementation\n"
"   total\n"
"   convert : UnitOfTime -> Integer -> UnitOfTime -> Integer\n"
msgstr ""
"   data UnitOfTime = Second -- 添加剩余的值\n"
"\n"
"   -- 给定一个数字及时间单位，计算出对应的秒数\n"
"   toSeconds : UnitOfTime -> Integer -> Integer\n"
"\n"
"   -- 给定一个秒数和时间单位，计算出对应的数字\n"
"   total\n"
"   fromSeconds : UnitOfTime -> Integer -> Integer\n"
"\n"
"   -- 给出待转换的时间单位及数字，然后给出要转换的时间单位，计算出结果数字\n"
"   -- 在实现中使用 `fromSeconds` 和 `toSeconds`\n"
"   total\n"
"   convert : UnitOfTime -> Integer -> UnitOfTime -> Integer\n"

#. type: Bullet: '3. '
#: ../src/Tutorial/DataTypes.md:306
msgid ""
"Define a data type for representing a subset of the chemical elements: "
"Hydrogen (H), Carbon (C), Nitrogen (N), Oxygen (O), and Fluorine (F)."
msgstr ""
"定义用于表示化学元素子集的数据类型：氢 (H)、碳 (C)、氮 (N)、氧 (O) 和氟 (F)。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:309
#, no-wrap
msgid ""
"   Declare and implement function `atomicMass`, which for each element\n"
"   returns its atomic mass in dalton:\n"
msgstr "   声明并实现函数 `atomicMass`，它对每个元素返回以道尔顿为单位的原子质量：\n"

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:310
#, no-wrap
msgid ""
"   Hydrogen : 1.008\n"
"   Carbon : 12.011\n"
"   Nitrogen : 14.007\n"
"   Oxygen : 15.999\n"
"   Fluorine : 18.9984\n"
msgstr ""
"   Hydrogen : 1.008\n"
"   Carbon : 12.011\n"
"   Nitrogen : 14.007\n"
"   Oxygen : 15.999\n"
"   Fluorine : 18.9984\n"

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:318
#, no-wrap
msgid "Sum Types"
msgstr "和类型"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:326
msgid ""
"Assume we'd like to write some web form, where users of our web application "
"can decide how they like to be addressed.  We give them a choice between two "
"common predefined forms of address (Mr and Mrs), but also allow them to "
"decide on a customized form. The possible choices can be encapsulated in an "
"Idris data type:"
msgstr ""
"假设我们想写一些 web 表单，我们的 Web 应用程序用户可以决定他们喜欢如何处理。"
"我们让他们在两个常见的预定义之间进行选择地址形式（先生和夫人），但也允许他们"
"决定一个定制的表格。可能的\n"
"选择可以封装在 Idris 数据类型中："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:327
#, no-wrap
msgid "data Title = Mr | Mrs | Other String\n"
msgstr "data Title = Mr | Mrs | Other String\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:336
msgid ""
"This looks almost like an enumeration type, with the exception that there is "
"a new thing, called a *data constructor*, which accepts a `String` argument "
"(actually, the values in an enumeration are also called (nullary) data "
"constructors).  If we inspect the types at the REPL, we learn the following:"
msgstr ""
"这看起来几乎像一个枚举类型，除了\n"
"有一个新东西，叫做*数据构造函数*，\n"
"它接受一个 `String` 参数（实际上，值\n"
"在枚举中也称为（空）数据构造函数）。\n"
"如果我们检查 REPL 中的类型，我们会了解到以下内容："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:337
#, no-wrap
msgid ""
"Tutorial.DataTypes> :t Mr\n"
"Tutorial.DataTypes.Mr : Title\n"
"Tutorial.DataTypes> :t Other\n"
"Tutorial.DataTypes.Other : String -> Title\n"
msgstr ""
"Tutorial.DataTypes> :t Mr\n"
"Tutorial.DataTypes.Mr : Title\n"
"Tutorial.DataTypes> :t Other\n"
"Tutorial.DataTypes.Other : String -> Title\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:347
msgid ""
"So, `Other` is a *function* from `String` to `Title`. This means, that we "
"can pass `Other` a `String` argument and get a `Title` as the result:"
msgstr ""
"所以，`Other` 是从 `String` 到 `Title` 的*函数*。这意味着，我们可以传递给 "
"`Other` 一个 `String` 参数并得到结果 `Title`："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:348
#, no-wrap
msgid ""
"total\n"
"dr : Title\n"
"dr = Other \"Dr.\"\n"
msgstr ""
"total\n"
"dr : Title\n"
"dr = Other \"Dr.\"\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:358
msgid ""
"Again, a value of type `Title` can only consist of one of the three choices "
"listed above, and again, we can use pattern matching to implement functions "
"on the `Title` data type in a provably total way:"
msgstr ""
"同样，`Title` 类型的值只能包含一个\n"
"在上面列出的三个选择中的一个，再一次，我们可以使用模式匹配来实现函数\n"
"在 `Title` 数据类型上以可证明的全部方式："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:359
#, no-wrap
msgid ""
"total\n"
"showTitle : Title -> String\n"
"showTitle Mr        = \"Mr.\"\n"
"showTitle Mrs       = \"Mrs.\"\n"
"showTitle (Other x) = x\n"
msgstr ""
"total\n"
"showTitle : Title -> String\n"
"showTitle Mr        = \"Mr.\"\n"
"showTitle Mrs       = \"Mrs.\"\n"
"showTitle (Other x) = x\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:372
msgid ""
"Note, how in the last pattern match, the string value stored in the `Other` "
"data constructor is *bound* to local variable `x`.  Also, the `Other x` "
"pattern has to be wrapped in parentheses, as otherwise Idris would think "
"`Other` and `x` were to distinct function arguments."
msgstr ""
"注意，在最后一个模式匹配中，存储在 `Other` 数据构造函数中字符串值被 *绑定* 到"
"局部变量 `x`。此外，`Other x` 模式必须用括号括起来，否则 Idris 会认为 "
"`Other` 和 `x` 是不同的函数参数。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:377
msgid ""
"This is a very common way to extract the values from data constructors.  We "
"can use `showTitle` to implement a function for creating a courteous "
"greeting:"
msgstr ""
"这是从数据构造函数中提取值的通用方式。我们可以使用 `showTitle` 来实现创建礼貌"
"问候的函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:378
#, no-wrap
msgid ""
"total\n"
"greet : Title -> String -> String\n"
"greet t name = \"Hello, \" ++ showTitle t ++ \" \" ++ name ++ \"!\"\n"
msgstr ""
"total\n"
"greet : Title -> String -> String\n"
"greet t name = \"Hello, \" ++ showTitle t ++ \" \" ++ name ++ \"!\"\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:387
msgid ""
"In the implementation of `greet`, we use string literals and the string "
"concatenation operator `(++)` to assemble the greeting from its parts."
msgstr ""
"在 `greet` 的实现中，我们使用字符串字面量和字符串连接运算符 `(++)` 从各个部分"
"组装问候语。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:389
msgid "At the REPL:"
msgstr "在 REPL 中："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:390
#, no-wrap
msgid ""
"Tutorial.DataTypes> greet dr \"Höck\"\n"
"\"Hello, Dr. Höck!\"\n"
"Tutorial.DataTypes> greet Mrs \"Smith\"\n"
"\"Hello, Mrs. Smith!\"\n"
msgstr ""
"Tutorial.DataTypes> greet dr \"Höck\"\n"
"\"Hello, Dr. Höck!\"\n"
"Tutorial.DataTypes> greet Mrs \"Smith\"\n"
"\"Hello, Mrs. Smith!\"\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:400
msgid ""
"Data types like `Title` are called *sum types* as they consist of the sum of "
"their different parts: A value of type `Title` is either a `Mr`, a `Mrs`, or "
"a `String` wrapped up in `Other`."
msgstr ""
"像 `Title` 这样的数据类型被称为*和类型* 因为它们由不同部分的和组成：`Title` "
"类型的值是 `Mr`、`Mrs` 或包裹在 `Other` 中的 `String`。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:407
msgid ""
"Here's another (drastically simplified) example of a sum type.  Assume we "
"allow two forms of authentication in our web application: Either by entering "
"a username plus a password (for which we'll use an unsigned 64 bit integer "
"here), or by providing user name plus a (very complex) secret key.  Here's a "
"data type to encapsulate this use case:"
msgstr ""
"这是 sum 类型的另一个（大大简化的）示例。\n"
"假设我们在 Web 应用程序中允许两种形式的身份验证：\n"
"通过输入用户名和密码（我们将使用\n"
"此处为无符号 64 位整数），或通过提供用户名加上一个（非常复杂的）密钥。\n"
"这是封装此用例的数据类型："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:408
#, no-wrap
msgid "data Credentials = Password String Bits64 | Key String String\n"
msgstr "data Credentials = Password String Bits64 | Key String String\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:414
msgid ""
"As an example of a very primitive login function, we can hard-code some "
"known credentials:"
msgstr "作为一个非常原始的登录函数的例子，我们可以硬编码一些已知的凭据："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:415
#, no-wrap
msgid ""
"total\n"
"login : Credentials -> String\n"
"login (Password \"Anderson\" 6665443) = greet Mr \"Anderson\"\n"
"login (Key \"Y\" \"xyz\")               = greet (Other \"Agent\") \"Y\"\n"
"login _                             = \"Access denied!\"\n"
msgstr ""
"total\n"
"login : Credentials -> String\n"
"login (Password \"Anderson\" 6665443) = greet Mr \"Anderson\"\n"
"login (Key \"Y\" \"xyz\")               = greet (Other \"Agent\") \"Y\"\n"
"login _                             = \"Access denied!\"\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:426
msgid ""
"As can be seen in the example above, we can also pattern match against "
"primitive values by using integer and string literals. Give `login` a go at "
"the REPL:"
msgstr ""
"从上面的例子中可以看出，我们也可以通过使用整数和字符串字面量的原始值进行模式"
"匹配字。在 REPL 中试一试 `login`："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:427
#, no-wrap
msgid ""
"Tutorial.DataTypes> login (Password \"Anderson\" 6665443)\n"
"\"Hello, Mr. Anderson!\"\n"
"Tutorial.DataTypes> login (Key \"Y\" \"xyz\")\n"
"\"Hello, Agent Y!\"\n"
"Tutorial.DataTypes> login (Key \"Y\" \"foo\")\n"
"\"Access denied!\"\n"
msgstr ""
"Tutorial.DataTypes> login (Password \"Anderson\" 6665443)\n"
"\"Hello, Mr. Anderson!\"\n"
"Tutorial.DataTypes> login (Key \"Y\" \"xyz\")\n"
"\"Hello, Agent Y!\"\n"
"Tutorial.DataTypes> login (Key \"Y\" \"foo\")\n"
"\"Access denied!\"\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:436 ../src/Tutorial/Dependent.md:623
#: ../src/Tutorial/DPair.md:653 ../src/Tutorial/Eq.md:555
#: ../src/Tutorial/Folds.md:668 ../src/Tutorial/Functor.md:965
#: ../src/Tutorial/Interfaces.md:352 ../src/Tutorial/IO.md:728
#: ../src/Tutorial/Predicates.md:672 ../src/Tutorial/Prim.md:711
#: ../src/Tutorial/Traverse.md:574
#, no-wrap
msgid "Exercises part 2"
msgstr "练习第 2 部分"

#. type: Bullet: '1. '
#: ../src/Tutorial/DataTypes.md:440
msgid ""
"Implement an equality test for `Title` (you can use the equality operator "
"`(==)` for comparing two `String`s):"
msgstr ""
"为 `Title` 实现相等测试（您可以使用相等运算符 `(==)` 比较两个 `String`）："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:441
#, no-wrap
msgid ""
"   total\n"
"   eqTitle : Title -> Title -> Bool\n"
msgstr ""
"   total\n"
"   eqTitle : Title -> Title -> Bool\n"

#. type: Bullet: '2. '
#: ../src/Tutorial/DataTypes.md:448
msgid ""
"For `Title`, implement a simple test to check, whether a custom title is "
"being used:"
msgstr "对于 `Title`，实现一个简单的测试来检查是否正在使用自定义标题："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:449
#, no-wrap
msgid ""
"   total\n"
"   isOther : Title -> Bool\n"
msgstr ""
"   total\n"
"   isOther : Title -> Bool\n"

#. type: Bullet: '3. '
#: ../src/Tutorial/DataTypes.md:456
msgid ""
"Given our simple `Credentials` type, there are three ways for authentication "
"to fail:"
msgstr "鉴于我们简单的 `Credentials` 类型，身份验证失败的三种方式："

#. type: Bullet: '   * '
#: ../src/Tutorial/DataTypes.md:461
msgid "An unknown username was used."
msgstr "使用了未知的用户名。"

#. type: Bullet: '   * '
#: ../src/Tutorial/DataTypes.md:461
msgid "The password given does not match the one associated with the username."
msgstr "给定的密码与与用户名关联的密码不匹配。"

#. type: Bullet: '   * '
#: ../src/Tutorial/DataTypes.md:461
msgid "An invalid key was used."
msgstr "使用了无效的密钥。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:467
#, no-wrap
msgid ""
"   Encapsulate these three possibilities in a sum type\n"
"   called `LoginError`,\n"
"   but make sure not to disclose any confidential information:\n"
"   An invalid username should be stored in the corresponding\n"
"   error value, but an invalid password or key should not.\n"
msgstr "   将这三种可能性封装在叫做 `LoginError` 的和类型中，但请确保不要泄露任何机密信息：无效的用户名应存储相应的错误值，但不应该存储无效的密码或密钥。\n"

#. type: Bullet: '4. '
#: ../src/Tutorial/DataTypes.md:471
msgid ""
"Implement function `showError : LoginError -> String`, which can be used to "
"display an error message to the user who unsuccessfully tried to login into "
"our web application."
msgstr ""
"实现函数 `showError : LoginError -> String`，可用于向尝试登录我们的 Web 应用"
"程序失败的用户显示错误消息。"

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:472
#, no-wrap
msgid "Records"
msgstr "记录"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:481
msgid ""
"It is often useful to group together several values as a logical unit. For "
"instance, in our web application we might want to group information about a "
"user in a single data type. Such data types are often called *product types* "
"(see below for an explanation).  The most common and convenient way to "
"define them is the `record` construct:"
msgstr ""
"将几个值组合在一起作为一个逻辑单元通常很有用。例如，在我们的 Web 应用程序中，"
"我们可能想要对用户的信息进行分组\n"
"在单一数据类型中。这种数据类型通常被称为*积类型*（见下文解释）。最常见和最方"
"便义方式是通过 `record` 构造进行定义："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:482
#, no-wrap
msgid ""
"record User where\n"
"  constructor MkUser\n"
"  name  : String\n"
"  title : Title\n"
"  age   : Bits8\n"
msgstr ""
"record User where\n"
"  constructor MkUser\n"
"  name  : String\n"
"  title : Title\n"
"  age   : Bits8\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:493
msgid ""
"The declaration above creates a new *type* called `User`, and a new *data "
"constructor* called `MkUser`. As usual, have a look at their types in the "
"REPL:"
msgstr ""
"上面的声明创建了一个名为 `User` 的新 *类型*，和一个名为 `MkUser` 的新 *数据构"
"造函数*。照常，看看他们在 REPL 中的类型："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:494
#, no-wrap
msgid ""
"Tutorial.DataTypes> :t User\n"
"Tutorial.DataTypes.User : Type\n"
"Tutorial.DataTypes> :t MkUser\n"
"Tutorial.DataTypes.MkUser : String -> Title -> Bits8 -> User\n"
msgstr ""
"Tutorial.DataTypes> :t User\n"
"Tutorial.DataTypes.User : Type\n"
"Tutorial.DataTypes> :t MkUser\n"
"Tutorial.DataTypes.MkUser : String -> Title -> Bits8 -> User\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:504
msgid ""
"We can use `MkUser` (which is a function from `String` to `Title` to `Bits8` "
"to `User`)  to create values of type `User`:"
msgstr ""
"我们可以使用 `MkUser` （这会从\n"
"`String` 到 `Title` 到 `Bits8` 到 `User`）\n"
"创建 `User` 类型的值："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:505
#, no-wrap
msgid ""
"total\n"
"agentY : User\n"
"agentY = MkUser \"Y\" (Other \"Agent\") 51\n"
"\n"
"total\n"
"drNo : User\n"
"drNo = MkUser \"No\" dr 73\n"
msgstr ""
"total\n"
"agentY : User\n"
"agentY = MkUser \"Y\" (Other \"Agent\") 51\n"
"\n"
"total\n"
"drNo : User\n"
"drNo = MkUser \"No\" dr 73\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:517
msgid ""
"We can also use pattern matching to extract the fields from a `User` value "
"(they can again be bound to local variables):"
msgstr "我们还可以使用模式匹配从 `User` 提取值（它们可以再次绑定到局部变量）："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:518
#, no-wrap
msgid ""
"total\n"
"greetUser : User -> String\n"
"greetUser (MkUser n t _) = greet t n\n"
msgstr ""
"total\n"
"greetUser : User -> String\n"
"greetUser (MkUser n t _) = greet t n\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:530
msgid ""
"In the example above, the `name` and `title` field are bound to two new "
"local variables (`n` and `t` respectively), which can then be used on the "
"right hand side of `greetUser`'s implementation. For the `age` field, which "
"is not used on the right hand side, we can use an underscore as a catch-all "
"pattern."
msgstr ""
"在上面的示例中，`name` 和 `title` 字段\n"
"绑定到两个新的局部变量（分别为 `n` 和 `t`），\n"
"然后可以在 `greetUser` 的右侧实现使用。对于 `age` 字段，在右侧未使用，我们可"
"以使用下划线作为全捕获模式。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:545
msgid ""
"Note, how Idris will prevent us from making a common mistake: If we confuse "
"the order of arguments, the implementation will no longer type check. We can "
"verify this by putting the erroneous code in a `failing` block: This is an "
"indented code block, which will lead to an error during elaboration (type "
"checking). We can give part of the expected error message as an optional "
"string argument to a failing block. If this does not match part of the error "
"message (or the whole code block does not fail to type check) the `failing` "
"block itself fails to type check. This is a useful tool to demonstrate that "
"type safety works in two directions: We can show that valid code type checks "
"but also that invalid code is rejected by the Idris elaborator:"
msgstr ""
"请注意，如果我们混淆了参数的顺序，Idris 将会阻止我们这个常见的错误：\n"
"实现将不能通过行类型检查。我们可以验证这一点，通过将错误代码放入 `failing` 块"
"中：这是缩进的代码块，在细化过程中（类型检查）会导致错误。我们可以给一部分预"
"期的错误消息作为 failing 块的可选字符串参数。如果这不能匹配部分错误消息（或在"
"类型检查中不会失败的整个代码块类）`failing` 块本身无法通过类型检查。下面是对"
"类型安全有帮助的两个方向：通过 Idris 细化，我们可以证明有效代码类型检查，但拒"
"绝无效代码："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:546
#, no-wrap
msgid ""
"failing \"Mismatch between: String and Title\"\n"
"  greetUser' : User -> String\n"
"  greetUser' (MkUser n t _) = greet n t\n"
msgstr ""
"failing \"Mismatch between: String and Title\"\n"
"  greetUser' : User -> String\n"
"  greetUser' (MkUser n t _) = greet n t\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:558
msgid ""
"In addition, for every record field, Idris creates an extractor function of "
"the same name. This can either be used as a regular function, or it can be "
"used in postfix notation by appending it to a variable of the record type "
"separated by a dot. Here are two examples for extracting the age from a user:"
msgstr ""
"此外，对于每个记录字段，Idris 都会创建一个同名提取函数。这既可以可以用作常规"
"函数，也可以用于通过将后缀表示法附加到变量，把记录类型用点作为分隔。\n"
"这里有两个例子，\n"
"从用户那里提取年龄："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:559
#, no-wrap
msgid ""
"getAgeFunction : User -> Bits8\n"
"getAgeFunction u = age u\n"
"\n"
"getAgePostfix : User -> Bits8\n"
"getAgePostfix u = u.age\n"
msgstr ""
"getAgeFunction : User -> Bits8\n"
"getAgeFunction u = age u\n"
"\n"
"getAgePostfix : User -> Bits8\n"
"getAgePostfix u = u.age\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:567
#, no-wrap
msgid "Syntactic Sugar for Records"
msgstr "记录的语法糖"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:581
msgid ""
"As was already mentioned in the [intro](Intro.md), Idris is a *pure* "
"functional programming language. In pure functions, we are not allowed to "
"modify global mutable state. As such, if we want to modify a record value, "
"we will always create a *new* value with the original value remaining "
"unchanged: Records and other Idris values are *immutable*.  While this *can* "
"have a slight impact on performance, it has the benefit that we can freely "
"pass a record value to different functions, without fear of the functions "
"modifying the value by in-place mutation. These are, again, very strong "
"guarantees, which makes it drastically easier to reason about our code."
msgstr ""
"正如在 [介绍](Intro.md) 中已经提到的，Idris是一种*纯*函数式编程语言。在纯函数"
"中，\n"
"我们不允许修改全局可变状态。像这样，\n"
"如果我们想修改记录值，我们总是创建一个*新*值，保留原始值不变：记录和其他 "
"Idris 值是*不可变的*。\n"
"虽然这个*可能会*对性能有轻微影响，但我们可以自由地将记录值传递给不同的函数会"
"带来一些好处，不用担心函数会修改参数值。这些是非常强大的保证，这使得对我们的"
"代码推理变得更加容易。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:586
msgid ""
"There are several ways to modify a record, the most general being to pattern "
"match on the record and adjust each field as desired. If, for instance, we'd "
"like to increase the age of a `User` by one, we could do the following:"
msgstr ""
"有几种方法可以修改记录，最通用的是在记录上进行模式匹配，并且\n"
"根据需要调整每个字段。例如，如果我们想要将 `User` 的年龄增加一，我们可以执行"
"以下操作："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:587
#, no-wrap
msgid ""
"total\n"
"incAge : User -> User\n"
"incAge (MkUser name title age) = MkUser name title (age + 1)\n"
msgstr ""
"total\n"
"incAge : User -> User\n"
"incAge (MkUser name title age) = MkUser name title (age + 1)\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:597
msgid ""
"That's a lot of code for such a simple thing, so Idris offers several "
"syntactic conveniences for this. For instance, using *record* syntax, we can "
"just access and update the `age` field of a value:"
msgstr ""
"这么简单的事情有很多代码，所以 Idris 为此提供了几种语法糖。例如，\n"
"使用*记录*语法，我们可以访问和更新 `age` 字段的值："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:598
#, no-wrap
msgid ""
"total\n"
"incAge2 : User -> User\n"
"incAge2 u = { age := u.age + 1 } u\n"
msgstr ""
"total\n"
"incAge2 : User -> User\n"
"incAge2 u = { age := u.age + 1 } u\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:607
msgid ""
"Assignment operator `:=` assigns a new value to the `age` field in `u`. "
"Remember, that this will create a new `User` value. The original value `u` "
"remains unaffected by this."
msgstr ""
"赋值运算符 `:=` 为 在 `u` 中的 `age` 字段分配一个新值。请记住，这将创建一个新"
"的 `User` 值。原本的值 `u` 不受此影响。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:613
msgid ""
"We can access a record field, either by using the field name as a projection "
"function (`age u`; also have a look at `:t age` in the REPL), or by using "
"dot syntax: `u.age`. This is special syntax and *not* related to the dot "
"operator for function composition (`(.)`)."
msgstr ""
"我们可以通过使用字段名称来访问记录字段，\n"
"作为投影函数 (`age u`; 在 REPL 中看看 `:t age`），或使用点语法：`u.age`。这个"
"特殊语法与函数组合的点运算符（`(.)`）*不*相关。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:616
msgid ""
"The use case of modifying a record field is so common that Idris provides "
"special syntax for this as well:"
msgstr ""
"修改记录字段的用例如此普遍，\n"
"Idris 也为此提供了特殊的语法："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:617
#, no-wrap
msgid ""
"total\n"
"incAge3 : User -> User\n"
"incAge3 u = { age $= (+ 1) } u\n"
msgstr ""
"total\n"
"incAge3 : User -> User\n"
"incAge3 u = { age $= (+ 1) } u\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:627
msgid ""
"Here, I used an *operator section* (`(+ 1)`) to make the code more concise.  "
"As an alternative to an operator section, we could have used an anonymous "
"function like so:"
msgstr ""
"在这里，我使用了*运算符块*(`(+ 1)`)来使代码更简洁。\n"
"作为运算符块的替代方案，\n"
"我们可以像这样使用匿名函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:628
#, no-wrap
msgid ""
"total\n"
"incAge4 : User -> User\n"
"incAge4 u = { age $= \\x => x + 1 } u\n"
msgstr ""
"total\n"
"incAge4 : User -> User\n"
"incAge4 u = { age $= \\x => x + 1 } u\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:637
msgid ""
"Finally, since our function's argument `u` is only used once at the very "
"end, we can drop it altogether, to get the following, highly concise version:"
msgstr ""
"最后，由于我们函数的参数 `u` 只是在最后被使用一次，我们可以完全放弃它，\n"
"获得以下高度简洁的版本："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:638
#, no-wrap
msgid ""
"total\n"
"incAge5 : User -> User\n"
"incAge5 = { age $= (+ 1) }\n"
msgstr ""
"total\n"
"incAge5 : User -> User\n"
"incAge5 = { age $= (+ 1) }\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:645
msgid "As usual, we should have a look at the result at the REPL:"
msgstr "像往常一样，我们应该看看 REPL 的结果："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:646
#, no-wrap
msgid ""
"Tutorial.DataTypes> incAge5 drNo\n"
"MkUser \"No\" (Other \"Dr.\") 74\n"
msgstr ""
"Tutorial.DataTypes> incAge5 drNo\n"
"MkUser \"No\" (Other \"Dr.\") 74\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:653
msgid ""
"It is possible to use this syntax to set and/or update several record fields "
"at once:"
msgstr "可以使用此语法来设置或更新一个或多个记录字段："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:654
#, no-wrap
msgid ""
"total\n"
"drNoJunior : User\n"
"drNoJunior = { name $= (++ \" Jr.\"), title := Mr, age := 17 } drNo\n"
msgstr ""
"total\n"
"drNoJunior : User\n"
"drNoJunior = { name $= (++ \" Jr.\"), title := Mr, age := 17 } drNo\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:660
#, no-wrap
msgid "Tuples"
msgstr "元组"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:666
msgid ""
"I wrote above that a record is also called a *product type*.  This is quite "
"obvious when we consider the number of possible values inhabiting a given "
"type. For instance, consider the following custom record:"
msgstr ""
"我在上面写了一条记录也被称为*积类型*。\n"
"当我们考虑存在于给定类型中的可能值数量的时候，这是很显而易见的。例如，考虑以"
"下自定义记录："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:667
#, no-wrap
msgid ""
"record Foo where\n"
"  constructor MkFoo\n"
"  wd   : Weekday\n"
"  bool : Bool\n"
msgstr ""
"record Foo where\n"
"  constructor MkFoo\n"
"  wd   : Weekday\n"
"  bool : Bool\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:678
msgid ""
"How many possible values of type `Foo` are there? The answer is `7 * 2 = "
"14`, as we can pair every possible `Weekday` (seven in total) with every "
"possible `Bool` (two in total). So, the number of possible values of a "
"record type is the *product* of the number of possible values for each field."
msgstr ""
"`Foo` 类型的可能值有多少？答案是`7 * 2 = 14`，\n"
"因为我们可以将所有可能的 `Weekday`（总共七个）与所有可能的\n"
"`Bool`（共两个）相乘。因此，记录类型的可能值的数量是每个字段可能值的数量的*积"
"*。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:680
msgid ""
"The canonical product type is the `Pair`, which is available from the "
"*Prelude*:"
msgstr "规范的积类型是 `Pair`，可从 *Prelude* 获得："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:681
#, no-wrap
msgid ""
"total\n"
"weekdayAndBool : Weekday -> Bool -> Pair Weekday Bool\n"
"weekdayAndBool wd b = MkPair wd b\n"
msgstr ""
"total\n"
"weekdayAndBool : Weekday -> Bool -> Pair Weekday Bool\n"
"weekdayAndBool wd b = MkPair wd b\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:692
msgid ""
"Since it is quite common to return several values from a function wrapped in "
"a `Pair` or larger tuple, Idris provides some syntactic sugar for working "
"with these. Instead of `Pair Weekday Bool`, we can just write `(Weekday, "
"Bool)`. Likewise, instead of `MkPair wd b`, we can just write `(wd, b)` (the "
"space is optional):"
msgstr ""
"因为通过包裹在 `Pair` 或更大的元组中，从一个函数返回多个值是很常见的，Idris "
"提供了一些与这些一起工作的语法糖。我们可以只写 `(Weekday, Bool)` 来代替 "
"`Pair Weekday Bool`。同样我们可以只写 `(wd, b)` （空格是可选的）来代替 "
"`MkPair wd b`："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:693
#, no-wrap
msgid ""
"total\n"
"weekdayAndBool2 : Weekday -> Bool -> (Weekday, Bool)\n"
"weekdayAndBool2 wd b = (wd, b)\n"
msgstr ""
"total\n"
"weekdayAndBool2 : Weekday -> Bool -> (Weekday, Bool)\n"
"weekdayAndBool2 wd b = (wd, b)\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:700
msgid "This works also for nested tuples:"
msgstr "这也适用于嵌套元组："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:701
#, no-wrap
msgid ""
"total\n"
"triple : Pair Bool (Pair Weekday String)\n"
"triple = MkPair False (Friday, \"foo\")\n"
"\n"
"total\n"
"triple2 : (Bool, Weekday, String)\n"
"triple2 = (False, Friday, \"foo\")\n"
msgstr ""
"total\n"
"triple : Pair Bool (Pair Weekday String)\n"
"triple = MkPair False (Friday, \"foo\")\n"
"\n"
"total\n"
"triple2 : (Bool, Weekday, String)\n"
"triple2 = (False, Friday, \"foo\")\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:713
msgid ""
"In the example above, `triple2` is converted to the form used in `triple` by "
"the Idris compiler."
msgstr ""
"在上面的例子中，`triple2` 在\n"
"Idris 编译器中会被转换成 `triple` 的形式来使用。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:715
msgid "We can even use tuple syntax in pattern matches:"
msgstr "我们甚至可以在模式匹配中使用元组语法："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:716
#, no-wrap
msgid ""
"total\n"
"bar : Bool\n"
"bar = case triple of\n"
"  (b,wd,_) => b && isWeekend wd\n"
msgstr ""
"total\n"
"bar : Bool\n"
"bar = case triple of\n"
"  (b,wd,_) => b && isWeekend wd\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:723
#, no-wrap
msgid "As Patterns"
msgstr "As 模式"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:728
msgid ""
"Sometimes, we'd like to take apart a value by pattern matching on it but "
"still retain the value as a whole for using it in further computations:"
msgstr ""
"有时，我们想通过模式匹配来提取它上面的一个值，但仍然保留使用它的整体值在进一"
"步的计算中："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:729
#, no-wrap
msgid ""
"total\n"
"baz : (Bool,Weekday,String) -> (Nat,Bool,Weekday,String)\n"
"baz t@(_,_,s) = (length s, t)\n"
msgstr ""
"total\n"
"baz : (Bool,Weekday,String) -> (Nat,Bool,Weekday,String)\n"
"baz t@(_,_,s) = (length s, t)\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:741
msgid ""
"In `baz`, variable `t` is *bound* to the triple as a whole, which is then "
"reused to construct the resulting quadruple. Remember, that `(Nat,Bool,"
"Weekday,String)` is just sugar for `Pair Nat (Bool,Weekday,String)`, and "
"`(length s, t)` is just sugar for `MkPair (length s) t`. Hence, the "
"implementation above is correct as is confirmed by the type checker."
msgstr ""
"在 `baz` 中，变量 `t` 会 *绑定* 到整个三元组，然后被重用以构造生成的四元组。"
"记住，\n"
"`(Nat,Bool,Weekday,String)` 只是 `Pair Nat (Bool,Weekday,String)` 的糖，而 "
"`(length s, t)` 只是\n"
"`MkPair（length s）t` 的糖。因此，上面的实现是正确的，由类型检查器确认。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:742 ../src/Tutorial/Dependent.md:843
#: ../src/Tutorial/DPair.md:1128 ../src/Tutorial/Eq.md:826
#: ../src/Tutorial/Folds.md:988 ../src/Tutorial/Functor.md:1235
#: ../src/Tutorial/Interfaces.md:624 ../src/Tutorial/IO.md:949
#: ../src/Tutorial/Predicates.md:1020 ../src/Tutorial/Prim.md:935
#: ../src/Tutorial/Traverse.md:1016
#, no-wrap
msgid "Exercises part 3"
msgstr "练习第 3 部分"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:748
#, no-wrap
msgid ""
"1. Define a record type for time spans by pairing a `UnitOfTime`\n"
"with an integer representing the duration of the time span in\n"
"the given unit of time. Define also a function for converting\n"
"a time span to an `Integer` representing the duration in seconds.\n"
msgstr "1. 通过把 `UnitOfTime` 和表示时间跨度的整数配对来定义一个记录类型。再定义一个用于转换的函数来定义时间跨度的记录类型，以秒为单位表示持续时间。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:752
#, no-wrap
msgid ""
"2. Implement an equality check for time spans: Two time spans\n"
"should be considered equal, if and only if they correspond to\n"
"the same number of seconds.\n"
msgstr "2. 对时间跨度实施相等检查：两个时间跨度应该被认为是相等的，当且仅当它们对应于相同的秒数。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:757
#, no-wrap
msgid ""
"3. Implement a function for pretty printing time spans:\n"
"The resulting string should display the time span in its\n"
"given unit, plus show the number of seconds in parentheses,\n"
"if the unit is not already seconds.\n"
msgstr ""
"3.实现美观的打印时间跨度的函数：\n"
"结果字符串应显示其时间跨度的给定单位，如果单位还不是秒，再加上括号中显示的秒数。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:761
#, no-wrap
msgid ""
"4. Implement a function for adding two time spans. If the\n"
"two time spans use different units of time, use the smaller\n"
"unit of time to ensure a lossless conversion.\n"
msgstr ""
"4. 实现两个时间跨度相加的功能。如果\n"
"两个时间跨度使用不同的时间单位，使用较小的时间单位，以确保无损转换。\n"

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:762
#, no-wrap
msgid "Generic Data Types"
msgstr "泛型数据类型"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:772
msgid ""
"Sometimes, a concept is general enough that we'd like to apply it not only "
"to a single type, but to all kinds of types. For instance, we might not want "
"to define data types for lists of integers, lists of strings, and lists of "
"booleans, as this would lead to a lot of code duplication.  Instead, we'd "
"like to have a single generic list type *parameterized* by the type of "
"values it stores. This section explains how to define and use generic types."
msgstr ""
"有时，我们会喜欢一个概念足够笼统，不仅适用于单一类型，而且适用于所有类型。例"
"如，我们可能不想定义整数列表、字符串列表和布尔列表，因为这会导致大量代码重"
"复。\n"
"相反，我们希望有一个通用列表类型，根据它存储的值的类型*参数化*。本节说明如何"
"定义和使用泛型类型。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:773
#, no-wrap
msgid "Maybe"
msgstr "Maybe"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:786
msgid ""
"Consider the case of parsing a `Weekday` from user input. Surely, such a "
"function should return `Saturday`, if the string input was `\"Saturday\"`, "
"but what if the input was `\"sdfkl332\"`? We have several options here.  For "
"instance, we could just return a default result (`Sunday` perhaps?). But is "
"this the behavior programmers expect when using our library? Maybe not. To "
"silently continue with a default value in the face of invalid user input is "
"hardly ever the best choice and may lead to a lot of confusion."
msgstr ""
"考虑解析来自用户输入的 `Weekday` 的情况。如果\n"
"字符串输入是 `\"Saturday\"`，一个函数的确应该返回 `Saturday`，但如果\n"
"输入是 `\"sdfkl332\"` 呢？我们在这里有几个选择。\n"
"例如，我们可以只返回一个默认结果\n"
"（也许是 `Sunday` ？）。但这是程序员在使用我们的库时期望行为吗？也许不吧。默"
"默地面对无效的用户输入，继续使用默认值不是最好的选择，可能会导致很多混乱。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:792
msgid ""
"In an imperative language, our function would probably throw an exception. "
"We could do this in Idris as well (there is function `idris_crash` in the "
"*Prelude* for this), but doing so, we would abandon totality! A high price "
"to pay for such a common thing as a parsing error."
msgstr ""
"在命令式语言中，我们的函数可能会\n"
"抛出异常。我们可以在 Idris 中这样做（*Prelude* 中有功能 `idris_crash`\n"
"这），好吧，但这样做，我们会放弃完全性！为解析错误等常见问题付出过高的代价。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:803
msgid ""
"In languages like Java, our function might also return some kind of `null` "
"value (leading to the dreaded `NullPointerException`s if not handled "
"properly in client code). Our solution will be similar, but instead of "
"silently returning `null`, we will make the possibility of failure visible "
"in the types! We define a custom data type, which encapsulates the "
"possibility of failure. Defining new data types in Idris is very cheap (in "
"terms of the amount of code needed), therefore this is often the way to go "
"in order to increase type safety.  Here's an example how to do this:"
msgstr ""
"在像 Java 这样的语言中，我们的函数也可能返回一种 `null` 值（如果\n"
"未在客户端代码中正确处理，会导致可怕的 `NullPointerException` ）。我们的解决"
"方案将很相似，但不是默默地返回 `null`，我们将在类型中显示失败的可能性！\n"
"我们定义了一个自定义的数据类型，它封装了可能的失败。在 Idris 中定义新的数据类"
"型非常廉价（就所需的代码量而言），因此这通常是为了增加类型安全性。\n"
"这是一个如何执行此操作的示例："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:804
#, no-wrap
msgid ""
"data MaybeWeekday = WD Weekday | NoWeekday\n"
"\n"
"total\n"
"readWeekday : String -> MaybeWeekday\n"
"readWeekday \"Monday\"    = WD Monday\n"
"readWeekday \"Tuesday\"   = WD Tuesday\n"
"readWeekday \"Wednesday\" = WD Wednesday\n"
"readWeekday \"Thursday\"  = WD Thursday\n"
"readWeekday \"Friday\"    = WD Friday\n"
"readWeekday \"Saturday\"  = WD Saturday\n"
"readWeekday \"Sunday\"    = WD Sunday\n"
"readWeekday _           = NoWeekday\n"
msgstr ""
"data MaybeWeekday = WD Weekday | NoWeekday\n"
"\n"
"total\n"
"readWeekday : String -> MaybeWeekday\n"
"readWeekday \"Monday\"    = WD Monday\n"
"readWeekday \"Tuesday\"   = WD Tuesday\n"
"readWeekday \"Wednesday\" = WD Wednesday\n"
"readWeekday \"Thursday\"  = WD Thursday\n"
"readWeekday \"Friday\"    = WD Friday\n"
"readWeekday \"Saturday\"  = WD Saturday\n"
"readWeekday \"Sunday\"    = WD Sunday\n"
"readWeekday _           = NoWeekday\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:823
msgid ""
"But assume now, we'd also like to read `Bool` values from user input. We'd "
"now have to write a custom data type `MaybeBool` and so on for all types "
"we'd like to read from `String`, and the conversion of which might fail."
msgstr ""
"但假设现在，我们还想从用户输入读取 `Bool` 值。我们现在必须编写一个自定义数据"
"类型 `MaybeBool` ，还有其他任何我们想从 `String` 中读取的类型，并且转换可能会"
"失败。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:827
msgid ""
"Idris, like many other programming languages, allows us to generalize this "
"behavior by using *generic data types*. Here's an example:"
msgstr ""
"与许多其他编程语言一样，Idris 允许我们\n"
"通过使用*泛型数据类型*来概括此行为。这是一个例子："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:828
#, no-wrap
msgid ""
"data Option a = Some a | None\n"
"\n"
"total\n"
"readBool : String -> Option Bool\n"
"readBool \"True\"    = Some True\n"
"readBool \"False\"   = Some False\n"
"readBool _         = None\n"
msgstr ""
"data Option a = Some a | None\n"
"\n"
"total\n"
"readBool : String -> Option Bool\n"
"readBool \"True\"    = Some True\n"
"readBool \"False\"   = Some False\n"
"readBool _         = None\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:839
msgid "It is important to go to the REPL and look at the types:"
msgstr "重要的是去 REPL 并查看类型："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:840
#, no-wrap
msgid ""
"Tutorial.DataTypes> :t Some\n"
"Tutorial.DataTypes.Some : a -> Option a\n"
"Tutorial.DataTypes> :t None\n"
"Tutorial.DataTypes.None : Option a\n"
"Tutorial.DataTypes> :t Option\n"
"Tutorial.DataTypes.Option : Type -> Type\n"
msgstr ""
"Tutorial.DataTypes> :t Some\n"
"Tutorial.DataTypes.Some : a -> Option a\n"
"Tutorial.DataTypes> :t None\n"
"Tutorial.DataTypes.None : Option a\n"
"Tutorial.DataTypes> :t Option\n"
"Tutorial.DataTypes.Option : Type -> Type\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:857
msgid ""
"We need to introduce some jargon here. `Option` is what we call a *type "
"constructor*. It is not yet a saturated type: It is a function from `Type` "
"to `Type`.  However, `Option Bool` is a type, as is `Option Weekday`.  Even "
"`Option (Option Bool)` is a valid type. `Option` is a type constructor "
"*parameterized* over a *parameter* of type `Type`.  `Some` and `None` are "
"`Option`s *data constructors*: The functions used to create values of type "
"`Option a` for a type `a`."
msgstr ""
"我们需要在这里介绍一些行话。 `Option`就是我们所说的 *类型构造函数*。它还不是"
"饱和类型：它是从 `Type` 到 `Type` 的函数。\n"
"但是，`Option Bool` 是一种类型，`Option Weekday` 也是一种类型。\n"
"甚至 `Option (Option Bool)` 也是有效类型。\n"
"`Option`是\n"
"`Type` 类型的*参数*上的*参数化*类型构造函数。\n"
"`Some` 和 `None` 是 `Option` 的 *数据构造函数*：用于为类型 `a` 创建 `Option "
"a` 类型值的函数。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:860
msgid ""
"Let's see some other use cases for `Option`. Below is a safe division "
"operation:"
msgstr "让我们看看 `Option` 的一些其他用例。下面是安全除法运算："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:861
#, no-wrap
msgid ""
"total\n"
"safeDiv : Integer -> Integer -> Option Integer\n"
"safeDiv n 0 = None\n"
"safeDiv n k = Some (n `div` k)\n"
msgstr ""
"total\n"
"safeDiv : Integer -> Integer -> Option Integer\n"
"safeDiv n 0 = None\n"
"safeDiv n k = Some (n `div` k)\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:872
msgid ""
"The possibility of returning some kind of *null* value in the face of "
"invalid input is so common, that there is a data type like `Option` already "
"in the *Prelude*: `Maybe`, with data constructors `Just` and `Nothing`."
msgstr ""
"面对无效输入返回某种 *null* 值的可能性是如此普遍，以至于有一种类似 `Option` "
"的数据类型已经在 *Prelude* 中了: `Maybe`，它的数据构造函数是 `Just` 和 "
"`Nothing`。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:884
msgid ""
"It is important to understand the difference between returning `Maybe "
"Integer` in a function, which might fail, and returning `null` in languages "
"like Java: In the former case, the possibility of failure is visible in the "
"types. The type checker will force us to treat `Maybe Integer` differently "
"than `Integer`: Idris will *not* allow us to forget to eventually handle the "
"failure case.  Not so, if `null` is silently returned without adjusting the "
"types. Programmers may (and often *will*) forget to handle the `null` case, "
"leading to unexpected and sometimes hard to debug runtime exceptions."
msgstr ""
"了解在一个函数中返回 `Maybe Integer` 之间的区别很重要，它可能会失败，并返回 "
"Java 等语言中的 `null`：在前一种情况下，\n"
"失败的可能性在类型中是可见的。类型检查器将迫使我们不同于 `Integer` 对待 "
"`Maybe Integer` ：Idris 将 *不会* 让我们忘记最终处理失败的情况。\n"
"如果不这样， `null` 被静默返回而不调整\n"
"类型。程序员可能（并且经常 *会*）忘记处理 `null` 的情况，导致意外，有时\n"
"难以调试运行时异常。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:885
#, no-wrap
msgid "Either"
msgstr "Either"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:896
msgid ""
"While `Maybe` is very useful to quickly provide a default value to signal "
"some kind of failure, this value (`Nothing`) is not very informative. It "
"will not tell us *what exactly* went wrong. For instance, in case of our "
"`Weekday` reading function, it might be interesting later on to know the "
"value of the invalid input string. And just like with `Maybe` and `Option` "
"above, this concept is general enough that we might encounter other types of "
"invalid values.  Here's a data type to encapsulate this:"
msgstr ""
"虽然 `Maybe` 对于快速提供默认值非常有用\n"
"表示某种故障的值，这个值 (`Nothing`) 是\n"
"不是很丰富。它不会告诉我们*到底是什么*出错。例如，如果我们的 `Weekday`\n"
"解析功能，无效输入字符串的值知道以后可能会很有趣。就像上面的`Maybe`和"
"`Option`，这个概念够笼统，我们可能会遇到其他类型的无效值。这是一个封装它的数"
"据类型："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:897
#, no-wrap
msgid "data Validated e a = Invalid e | Valid a\n"
msgstr "data Validated e a = Invalid e | Valid a\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:907
msgid ""
"`Validated` is a type constructor parameterized over two type parameters `e` "
"and `a`. It's data constructors are `Invalid` and `Valid`, the former "
"holding a value describing some error condition, the latter the result in "
"case of a successful computation.  Let's see this in action:"
msgstr ""
"`Validated` 是一个通过两个类型参数 `e` 和 `a` 进行参数化的类型构造函数。它的"
"数据构造函数是`Invalid`和`Valid`，\n"
"前者持有一个描述某些错误条件的值，\n"
"后者是计算成功的结果。让我们看看它的实际效果："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:908
#, no-wrap
msgid ""
"total\n"
"readWeekdayV : String -> Validated String Weekday\n"
"readWeekdayV \"Monday\"    = Valid Monday\n"
"readWeekdayV \"Tuesday\"   = Valid Tuesday\n"
"readWeekdayV \"Wednesday\" = Valid Wednesday\n"
"readWeekdayV \"Thursday\"  = Valid Thursday\n"
"readWeekdayV \"Friday\"    = Valid Friday\n"
"readWeekdayV \"Saturday\"  = Valid Saturday\n"
"readWeekdayV \"Sunday\"    = Valid Sunday\n"
"readWeekdayV s           = Invalid (\"Not a weekday: \" ++ s)\n"
msgstr ""
"total\n"
"readWeekdayV : String -> Validated String Weekday\n"
"readWeekdayV \"Monday\"    = Valid Monday\n"
"readWeekdayV \"Tuesday\"   = Valid Tuesday\n"
"readWeekdayV \"Wednesday\" = Valid Wednesday\n"
"readWeekdayV \"Thursday\"  = Valid Thursday\n"
"readWeekdayV \"Friday\"    = Valid Friday\n"
"readWeekdayV \"Saturday\"  = Valid Saturday\n"
"readWeekdayV \"Sunday\"    = Valid Sunday\n"
"readWeekdayV s           = Invalid (\"Not a weekday: \" ++ s)\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:929
msgid ""
"Again, this is such a general concept that a data type similar to "
"`Validated` is already available from the *Prelude*: `Either` with data "
"constructors `Left` and `Right`.  It is very common for functions to "
"encapsulate the possibility of failure by returning an `Either err val`, "
"where `err` is the error type and `val` is the desired return type. This is "
"the type safe (and total!) alternative to throwing a catchable exception in "
"an imperative language."
msgstr ""
"同样，这是一个通用的概念，类似于 `Validated` 的数据类型已经存在于\n"
"*Prelude*：`Either` 和数据构造函数 `Left` 和 `Right`。\n"
"对可能导致失败的函数封装是很常见的，\n"
"通过返回 `Either err val` 类型，其中 `err` 是错误类型，`val` 是所需的返回类"
"型。这个是命令式语言中抛出异常的替代品，（并且完全）类型安全。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:934
msgid ""
"Note, however, that the semantics of `Either` are not always \"`Left` is an "
"error and `Right` a success\". A function returning an `Either` just means "
"that it can have to different types of results, each of which are *tagged* "
"with the corresponding data constructor."
msgstr ""
"但是请注意，`Either` 的语义并不总是“`Left` 错误和 `Right` 成功”。返回 "
"`Either` 的函数只是意味着它可以有不同类型的结果，是 * 被标记* 相应的数据构造"
"函数之一。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:935
#, no-wrap
msgid "List"
msgstr "列表"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:941
msgid ""
"One of the most important data structures in pure functional programming is "
"the singly linked list. Here is its definition (called `Seq` in order for it "
"not to collide with `List`, which is of course already available from the "
"Prelude):"
msgstr ""
"纯函数编程中最重要的数据结构之一是单链表。这是它的定义\n"
"（称为 `Seq` 是为了不与 `List` 冲突，\n"
"这当然可以从 Prelude 中获得）："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:942
#, no-wrap
msgid "data Seq a = Nil | (::) a (Seq a)\n"
msgstr "data Seq a = Nil | (::) a (Seq a)\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:953
msgid ""
"This calls for some explanations. `Seq` consists of two *data constructors*: "
"`Nil` (representing an empty sequence of values) and `(::)` (also called the "
"*cons operator*), which prepends a new value of type `a` to an already "
"existing list of values of the same type. As you can see, we can also use "
"operators as data constructors, but please do not overuse this. Use clear "
"names for your functions and data constructors and only introduce new "
"operators when it truly helps readability!"
msgstr ""
"这需要一些解释。 `Seq` 由两个 *数据构造函数* 组成：\n"
"`Nil` （表示一个空的值序列）和 `(::)` （也称为 *cons 运算符*)，它将 `a` 类型"
"的新值添加到已经存在的相同类型的值列表。如你看到的，\n"
"我们也可以使用运算符作为数据构造函数，但请不要过度使用。为您的函数和数据构造"
"函数使用清晰的名称，并且仅当它真正有助于可读性时，再引入新的运算符！"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:956
msgid ""
"Here is an example of how to use the `List` constructors (I use `List` here, "
"as this is what you should use in your own code):"
msgstr ""
"下面是如何使用 `List` 构造函数的示例\n"
"（我在这里使用 `List`，因为这是您应该在自己的代码中使用的内容）："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:957
#, no-wrap
msgid ""
"total\n"
"ints : List Int64\n"
"ints = 1 :: 2 :: -3 :: Nil\n"
msgstr ""
"total\n"
"ints : List Int64\n"
"ints = 1 :: 2 :: -3 :: Nil\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:966
msgid ""
"However, there is a more concise way of writing the above. Idris accepts "
"special syntax for constructing data types consisting exactly of the two "
"constructors `Nil` and `(::)`:"
msgstr ""
"但是，有一种更简洁的方式来编写上述内容。Idris 接受用于两个构造函数恰好是 "
"`Nil` 和 `(::)`的数据类型的特殊语法，："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:967
#, no-wrap
msgid ""
"total\n"
"ints2 : List Int64\n"
"ints2 = [1, 2, -3]\n"
"\n"
"total\n"
"ints3 : List Int64\n"
"ints3 = []\n"
msgstr ""
"total\n"
"ints2 : List Int64\n"
"ints2 = [1, 2, -3]\n"
"\n"
"total\n"
"ints3 : List Int64\n"
"ints3 = []\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:980
msgid ""
"The two definitions `ints` and `ints2` are treated identically by the "
"compiler.  Note, that list syntax can also be used in pattern matches."
msgstr ""
"两个定义 `ints` 和 `ints2` 会被编译器同等对待。\n"
"请注意，该列表语法也可用于模式匹配。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:991
msgid ""
"There is another thing that's special about `Seq` and `List`: Each of them "
"is defined in terms of itself (the cons operator accepts a value and another "
"`Seq` as arguments). We call such data types *recursive* data types, and "
"their recursive nature means, that in order to decompose or consume them, we "
"typically require recursive functions. In an imperative language, we might "
"use a for loop or similar construct to iterate over the values of a `List` "
"or a `Seq`, but these things do not exist in a language without in-place "
"mutation. Here's how to sum a list of integers:"
msgstr ""
"`Seq`和`List` 之间还有一些特别的：分别用自身来定义（cons 运算符接受一个值\n"
"和另一个 `Seq` 作为参数）。我们称这样的数据类型为 *递归* 数据类型，它们的递归"
"性质意味着，为了分解或消耗它们，我们通常需要递归函数。在命令式语言中，我们可"
"能会使用 for 循环或类似的结构来迭代 `List` 或 `Seq` 的值，\n"
"但是这些东西不存在于不可变数据的语言中。以下是对整数列表求和的方法："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:992
#, no-wrap
msgid ""
"total\n"
"intSum : List Integer -> Integer\n"
"intSum Nil       = 0\n"
"intSum (n :: ns) = n + intSum ns\n"
msgstr ""
"total\n"
"intSum : List Integer -> Integer\n"
"intSum Nil       = 0\n"
"intSum (n :: ns) = n + intSum ns\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1004
msgid ""
"Recursive functions can be hard to grasp at first, so I'll break this down a "
"bit. If we invoke `intSum` with the empty list, the first pattern matches "
"and the function returns zero immediately.  If, however, we invoke `intSum` "
"with a non-empty list - `[7,5,9]` for instance - the following happens:"
msgstr ""
"递归函数一开始可能很难掌握，所以我会把他分解一下。如果我们用空列表调用 "
"`intSum`，\n"
"第一个模式被匹配并且函数立即返回零。\n"
"但是，如果我们使用非空列表调用 `intSum` - `[7,5,9]` - 会发生以下情况："

#. type: Bullet: '1. '
#: ../src/Tutorial/DataTypes.md:1008
msgid ""
"The second pattern matches and splits the list into two parts: Its head "
"(`7`) is bound to variable `n` and its tail (`[5,9]`) is bound to `ns`:"
msgstr ""
"第二个模式被匹配并将列表分成两部分：它的头部（`7`）绑定到变量 `n` 和它的尾部"
"（`[5,9]`）绑定到 `ns`："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:1009
#, no-wrap
msgid "   7 + intSum [5,9]\n"
msgstr "   7 + intSum [5,9]\n"

#. type: Bullet: '2. '
#: ../src/Tutorial/DataTypes.md:1015
msgid ""
"In a second invocation, `intSum` is called with a new list: `[5,9]`.  The "
"second pattern matches and `n` is bound to `5` and `ns` is bound to `[9]`:"
msgstr ""
"在第二次调用中，`intSum` 被一个新列表调用：`[5,9]`。第二个模式被匹配并且 `n` "
"绑定到 `5` 并且 `ns` 绑定到 `[9]`："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:1016
#, no-wrap
msgid "   7 + (5 + intSum [9])\n"
msgstr "   7 + (5 + intSum [9])\n"

#. type: Bullet: '3. '
#: ../src/Tutorial/DataTypes.md:1023
msgid ""
"In a third invocation `intSum` is called with list `[9]`.  The second "
"pattern matches and `n` is bound to `9` and `ns` is bound to `[]`:"
msgstr ""
"在第三次调用中，`intSum` 用列表 `[9]` 调用。第二个模式被匹配并且 `n` 绑定到 "
"`9` 并且 `ns` 绑定到 `[]`："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:1024
#, no-wrap
msgid "   7 + (5 + (9 + intSum [])\n"
msgstr "   7 + (5 + (9 + intSum [])\n"

#. type: Bullet: '4. '
#: ../src/Tutorial/DataTypes.md:1030
msgid ""
"In a fourth invocation, `intSum` is called with list `[]` and returns `0` "
"immediately:"
msgstr "在第四次调用中，使用列表 `[]` 调用 `intSum` 并立即返回 `0`："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:1031
#, no-wrap
msgid "   7 + (5 + (9 + 0)\n"
msgstr "   7 + (5 + (9 + 0)\n"

#. type: Bullet: '5. '
#: ../src/Tutorial/DataTypes.md:1037
msgid "In the third invocation, `9` and `0` are added and `9` is returned:"
msgstr "在第三次调用中，累加 `9` 和 `0` 并返回 `9`："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:1038
#, no-wrap
msgid "   7 + (5 + 9)\n"
msgstr "   7 + (5 + 9)\n"

#. type: Bullet: '6. '
#: ../src/Tutorial/DataTypes.md:1044
msgid "In the second invocation, `5` and `9` are added and `14` is returned:"
msgstr "在第二次调用中，累加 `5` 和 `9` 并返回 `14`："

#. type: Fenced code block (repl)
#: ../src/Tutorial/DataTypes.md:1045
#, no-wrap
msgid "   7 + 14\n"
msgstr "   7 + 14\n"

#. type: Bullet: '7. '
#: ../src/Tutorial/DataTypes.md:1051
msgid ""
"Finally, our initial invocation of `intSum` adds `7` and `14` and returns "
"`21`."
msgstr "最后，我们对 `intSum` 的初始调用累加 `7` 和 `14` 并返回 `21`。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1055
msgid ""
"Thus, the recursive implementation of `intSum` leads to a sequence of nested "
"calls to `intSum`, which terminates once the argument is the empty list."
msgstr ""
"因此，`intSum` 的递归实现导致了一个嵌套调用 `intSum` 的序列，一旦参数是\n"
"空列表也会终止嵌套。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:1056
#, no-wrap
msgid "Generic Functions"
msgstr "泛型函数"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1062
msgid ""
"In order to fully appreciate the versatility that comes with generic data "
"types, we also need to talk about generic functions.  Like generic types, "
"these are parameterized over one or more type parameters."
msgstr ""
"为了充分体会泛型数据类型所带来的多功能性，我们还需要谈谈泛型函数。\n"
"与泛型类型一样，它们通过一个或多个参数化类型参数来实现。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1068
msgid ""
"Consider for instance the case of breaking out of the `Option` data type. In "
"case of a `Some`, we'd like to return the stored value, while for the `None` "
"case we provide a default value. Here's how to do this, specialized to "
"`Integer`s:"
msgstr ""
"考虑展开`Option` 数据类型的情况。如果是 `Some`，我们希望返回存储的值，而对于 "
"`None` 的情况，我们提供默认值。这里展示如何做到这一点，专门用于\n"
"`Integer` 的函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1069
#, no-wrap
msgid ""
"total\n"
"integerFromOption : Integer -> Option Integer -> Integer\n"
"integerFromOption _ (Some y) = y\n"
"integerFromOption x None     = x\n"
msgstr ""
"total\n"
"integerFromOption : Integer -> Option Integer -> Integer\n"
"integerFromOption _ (Some y) = y\n"
"integerFromOption x None     = x\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1080
msgid ""
"It's pretty obvious that this, again, is not general enough.  Surely, we'd "
"also like to break out of `Option Bool` or `Option String` in a similar "
"fashion. That's exactly what the generic function `fromOption` does:"
msgstr ""
"很明显，这又不够普遍。\n"
"当然，我们也想展开 `Option Bool` 或\n"
"`Option String` 以类似的方式。这正是\n"
"泛型函数 `fromOption` 做的事情："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1081
#, no-wrap
msgid ""
"total\n"
"fromOption : a -> Option a -> a\n"
"fromOption _ (Some y) = y\n"
"fromOption x None     = x\n"
msgstr ""
"total\n"
"fromOption : a -> Option a -> a\n"
"fromOption _ (Some y) = y\n"
"fromOption x None     = x\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1095
msgid ""
"The lower-case `a` is again a *type parameter*. You can read the type "
"signature as follows: \"For any type `a`, given a *value* of type `a`, and "
"an `Option a`, we can return a value of type `a`.\" Note, that `fromOption` "
"knows nothing else about `a`, other than it being a type. It is therefore "
"not possible, to conjure a value of type `a` out of thin air. We *must* have "
"a value available to deal with the `None` case."
msgstr ""
"小写的 `a` 又是一个 * 类型化参数 *。你可以这样读他的类型签名：“对于任何类型 "
"`a`，给定一个 `a` 类型的 * 值 * 和 `Option a`，我们可以返回一个类型 `a` 的"
"值。”请注意，`fromOption` 对 `a` 一无所知，除了它是一个类型。因此不可能凭空变"
"出一个 `a` 类型的值。我们*必须*有可用于处理 `None` 情况的值。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1098
msgid ""
"The pendant to `fromOption` for `Maybe` is called `fromMaybe` and is "
"available from module `Data.Maybe` from the *base* library."
msgstr ""
"`Maybe` 的 `fromOption` 挂件称为 `fromMaybe`，并且可从 *base* 库中的模块 "
"`Data.Maybe` 获得。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1104
msgid ""
"Sometimes, `fromOption` is not general enough. Assume we'd like to print the "
"value of a freshly parsed `Bool`, giving some generic error message in case "
"of a `None`. We can't use `fromOption` for this, as we have an `Option Bool` "
"and we'd like to return a `String`. Here's how to do this:"
msgstr ""
"有时，`fromOption` 不够通用。假设我们想打印新解析的 `Bool` 的值，给出一些通用"
"的 `None` 的情况下的错误消息。我们不能使用 `fromOption`，为此，我们有一个 "
"`Option Bool` 并且我们想返回一个 `String`。以下是如何执行此操作："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1105
#, no-wrap
msgid ""
"total\n"
"option : b -> (a -> b) -> Option a -> b\n"
"option _ f (Some y) = f y\n"
"option x _ None     = x\n"
"\n"
"total\n"
"handleBool : Option Bool -> String\n"
"handleBool = option \"Not a boolean value.\" show\n"
msgstr ""
"total\n"
"option : b -> (a -> b) -> Option a -> b\n"
"option _ f (Some y) = f y\n"
"option x _ None     = x\n"
"\n"
"total\n"
"handleBool : Option Bool -> String\n"
"handleBool = option \"Not a boolean value.\" show\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1121
#, no-wrap
msgid ""
"Function `option` is parameterized over *two* type parameters:\n"
"`a` represents the type of values stored in the `Option`,\n"
"while `b` is the return type. In case of a `Just`, we need\n"
"a way to convert the stored `a` to a `b`, an that's done\n"
"using the function argument of type `a -> b`.\n"
msgstr ""
"函数 `option` 通过 * 两个* 类型参数进行参数化：\n"
"`a`表示`Option`中存储的值的类型，\n"
"而 `b` 是返回类型。如果是 `Just`，我们需要一种将存储的 `a` 转换为 `b` 的方法，使用 `a -> b` 类型的函数参数就可以咯。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1126
msgid ""
"In Idris, lower-case identifiers in function types are treated as *type "
"parameters*, while upper-case identifiers are treated as types or type "
"constructors that must be in scope."
msgstr ""
"在 Idris 中，函数类型中的小写标识符是\n"
"被视为*类型参数*，而大写标识符\n"
"被视为类型或类型构造函数，且必须\n"
"在作用域内。"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:1127 ../src/Tutorial/Eq.md:1056
#, no-wrap
msgid "Exercises part 4"
msgstr "练习第 4 部分"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1137
msgid ""
"If this is your first time programming in a purely functional language, the "
"exercises below are *very* important. Do not skip any of them! Take your "
"time and work through them all. In most cases, the types should be enough to "
"explain what's going on, even though they might appear cryptic in the "
"beginning. Otherwise, have a look at the comments (if any)  of each exercise."
msgstr ""
"如果这是你第一次使用纯编函数式语言进行编程，下面的练习是*非常*重要的。不要跳"
"过任何一个！\n"
"花点时间和通过他们所有的工作。在大多数情况下，类型应该足以解释发生了什么\n"
"开，即使它们在一开始看起来很神秘。否则，请查看每次练习的评论（如果有）。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1140
msgid ""
"Remember, that lower-case identifiers in a function signature are treated as "
"type parameters."
msgstr ""
"请记住，函数中的小写标识符\n"
"签名被视为类型参数。"

#. type: Bullet: '1. '
#: ../src/Tutorial/DataTypes.md:1142
msgid "Implement the following generic functions for `Maybe`:"
msgstr "为 `Maybe` 实现以下泛型函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1143
#, no-wrap
msgid ""
"   -- make sure to map a `Just` to a `Just`.\n"
"   total\n"
"   mapMaybe : (a -> b) -> Maybe a -> Maybe b\n"
"\n"
"   -- Example: `appMaybe (Just (+2)) (Just 20) = Just 22`\n"
"   total\n"
"   appMaybe : Maybe (a -> b) -> Maybe a -> Maybe b\n"
"\n"
"   -- Example: `bindMaybe (Just 12) Just = Just 12`\n"
"   total\n"
"   bindMaybe : Maybe a -> (a -> Maybe b) -> Maybe b\n"
"\n"
"   -- keep the value in a `Just` only if the given predicate holds\n"
"   total\n"
"   filterMaybe : (a -> Bool) -> Maybe a -> Maybe a\n"
"\n"
"   -- keep the first value that is not a `Nothing` (if any)\n"
"   total\n"
"   first : Maybe a -> Maybe a -> Maybe a\n"
"\n"
"   -- keep the last value that is not a `Nothing` (if any)\n"
"   total\n"
"   last : Maybe a -> Maybe a -> Maybe a\n"
"\n"
"   -- this is another general way to extract a value from a `Maybe`.\n"
"   -- Make sure the following holds:\n"
"   -- `foldMaybe (+) 5 Nothing = 5`\n"
"   -- `foldMaybe (+) 5 (Just 12) = 17`\n"
"   total\n"
"   foldMaybe : (acc -> el -> acc) -> acc -> Maybe el -> acc\n"
msgstr ""
"   -- make sure to map a `Just` to a `Just`.\n"
"   total\n"
"   mapMaybe : (a -> b) -> Maybe a -> Maybe b\n"
"\n"
"   -- Example: `appMaybe (Just (+2)) (Just 20) = Just 22`\n"
"   total\n"
"   appMaybe : Maybe (a -> b) -> Maybe a -> Maybe b\n"
"\n"
"   -- Example: `bindMaybe (Just 12) Just = Just 12`\n"
"   total\n"
"   bindMaybe : Maybe a -> (a -> Maybe b) -> Maybe b\n"
"\n"
"   -- keep the value in a `Just` only if the given predicate holds\n"
"   total\n"
"   filterMaybe : (a -> Bool) -> Maybe a -> Maybe a\n"
"\n"
"   -- keep the first value that is not a `Nothing` (if any)\n"
"   total\n"
"   first : Maybe a -> Maybe a -> Maybe a\n"
"\n"
"   -- keep the last value that is not a `Nothing` (if any)\n"
"   total\n"
"   last : Maybe a -> Maybe a -> Maybe a\n"
"\n"
"   -- this is another general way to extract a value from a `Maybe`.\n"
"   -- Make sure the following holds:\n"
"   -- `foldMaybe (+) 5 Nothing = 5`\n"
"   -- `foldMaybe (+) 5 (Just 12) = 17`\n"
"   total\n"
"   foldMaybe : (acc -> el -> acc) -> acc -> Maybe el -> acc\n"

#. type: Bullet: '2. '
#: ../src/Tutorial/DataTypes.md:1177
msgid "Implement the following generic functions for `Either`:"
msgstr "为 `Either` 实现以下泛型函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1178
#, no-wrap
msgid ""
"   total\n"
"   mapEither : (a -> b) -> Either e a -> Either e b\n"
"\n"
"   -- In case of both `Either`s being `Left`s, keep the\n"
"   -- value stored in the first `Left`.\n"
"   total\n"
"   appEither : Either e (a -> b) -> Either e a -> Either e b\n"
"\n"
"   total\n"
"   bindEither : Either e a -> (a -> Either e b) -> Either e b\n"
"\n"
"   -- Keep the first value that is not a `Left`\n"
"   -- If both `Either`s are `Left`s, use the given accumulator\n"
"   -- for the error values\n"
"   total\n"
"   firstEither : (e -> e -> e) -> Either e a -> Either e a -> Either e a\n"
"\n"
"   -- Keep the last value that is not a `Left`\n"
"   -- If both `Either`s are `Left`s, use the given accumulator\n"
"   -- for the error values\n"
"   total\n"
"   lastEither : (e -> e -> e) -> Either e a -> Either e a -> Either e a\n"
"\n"
"   total\n"
"   fromEither : (e -> c) -> (a -> c) -> Either e a -> c\n"
msgstr ""
"   total\n"
"   mapEither : (a -> b) -> Either e a -> Either e b\n"
"\n"
"   -- In case of both `Either`s being `Left`s, keep the\n"
"   -- value stored in the first `Left`.\n"
"   total\n"
"   appEither : Either e (a -> b) -> Either e a -> Either e b\n"
"\n"
"   total\n"
"   bindEither : Either e a -> (a -> Either e b) -> Either e b\n"
"\n"
"   -- Keep the first value that is not a `Left`\n"
"   -- If both `Either`s are `Left`s, use the given accumulator\n"
"   -- for the error values\n"
"   total\n"
"   firstEither : (e -> e -> e) -> Either e a -> Either e a -> Either e a\n"
"\n"
"   -- Keep the last value that is not a `Left`\n"
"   -- If both `Either`s are `Left`s, use the given accumulator\n"
"   -- for the error values\n"
"   total\n"
"   lastEither : (e -> e -> e) -> Either e a -> Either e a -> Either e a\n"
"\n"
"   total\n"
"   fromEither : (e -> c) -> (a -> c) -> Either e a -> c\n"

#. type: Bullet: '3. '
#: ../src/Tutorial/DataTypes.md:1207
msgid "Implement the following generic functions for `List`:"
msgstr "为 `List` 实现以下泛型函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1208
#, no-wrap
msgid ""
"   total\n"
"   mapList : (a -> b) -> List a -> List b\n"
"\n"
"   total\n"
"   filterList : (a -> Bool) -> List a -> List a\n"
"\n"
"   -- return the first value of a list, if it is non-empty\n"
"   total\n"
"   headMaybe : List a -> Maybe a\n"
"\n"
"   -- return everything but the first value of a list, if it is non-empty\n"
"   total\n"
"   tailMaybe : List a -> Maybe (List a)\n"
"\n"
"   -- return the last value of a list, if it is non-empty\n"
"   total\n"
"   lastMaybe : List a -> Maybe a\n"
"\n"
"   -- return everything but the last value of a list,\n"
"   -- if it is non-empty\n"
"   total\n"
"   initMaybe : List a -> Maybe (List a)\n"
"\n"
"   -- accumulate the values in a list using the given\n"
"   -- accumulator function and initial value\n"
"   --\n"
"   -- Examples:\n"
"   -- `foldList (+) 10 [1,2,7] = 20`\n"
"   -- `foldList String.(++) \"\" [\"Hello\",\"World\"] = \"HelloWorld\"`\n"
"   -- `foldList last Nothing (mapList Just [1,2,3]) = Just 3`\n"
"   total\n"
"   foldList : (acc -> el -> acc) -> acc -> List el -> acc\n"
msgstr ""
"   total\n"
"   mapList : (a -> b) -> List a -> List b\n"
"\n"
"   total\n"
"   filterList : (a -> Bool) -> List a -> List a\n"
"\n"
"   -- return the first value of a list, if it is non-empty\n"
"   total\n"
"   headMaybe : List a -> Maybe a\n"
"\n"
"   -- return everything but the first value of a list, if it is non-empty\n"
"   total\n"
"   tailMaybe : List a -> Maybe (List a)\n"
"\n"
"   -- return the last value of a list, if it is non-empty\n"
"   total\n"
"   lastMaybe : List a -> Maybe a\n"
"\n"
"   -- return everything but the last value of a list,\n"
"   -- if it is non-empty\n"
"   total\n"
"   initMaybe : List a -> Maybe (List a)\n"
"\n"
"   -- accumulate the values in a list using the given\n"
"   -- accumulator function and initial value\n"
"   --\n"
"   -- Examples:\n"
"   -- `foldList (+) 10 [1,2,7] = 20`\n"
"   -- `foldList String.(++) \"\" [\"Hello\",\"World\"] = \"HelloWorld\"`\n"
"   -- `foldList last Nothing (mapList Just [1,2,3]) = Just 3`\n"
"   total\n"
"   foldList : (acc -> el -> acc) -> acc -> List el -> acc\n"

#. type: Bullet: '4. '
#: ../src/Tutorial/DataTypes.md:1245
msgid ""
"Assume we store user data for our web application in the following record:"
msgstr "假设我们将 Web 应用程序的用户数据存储在以下记录中："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1246
#, no-wrap
msgid ""
"   record Client where\n"
"     constructor MkClient\n"
"     name          : String\n"
"     title         : Title\n"
"     age           : Bits8\n"
"     passwordOrKey : Either Bits64 String\n"
msgstr ""
"   record Client where\n"
"     constructor MkClient\n"
"     name          : String\n"
"     title         : Title\n"
"     age           : Bits8\n"
"     passwordOrKey : Either Bits64 String\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1260
#, no-wrap
msgid ""
"   Using `LoginError` from an earlier exercise,\n"
"   implement function `login`, which, given a list of `Client`s\n"
"   plus a value of type `Credentials` will return either a `LoginError`\n"
"   in case no valid credentials where provided, or the first `Client`\n"
"   for whom the credentials match.\n"
msgstr ""
"   使用前面练习中的 `LoginError` 实现函数 `login`，给定 `Client` 的列表加上 `Credentials` 类型的值。如果没有提供有效凭据将会返回 `LoginError`，\n"
"   ，或者第一个凭据匹配的 `Client` 对象。\n"

#. type: Bullet: '5. '
#: ../src/Tutorial/DataTypes.md:1264
msgid ""
"Using your data type for chemical elements from an earlier exercise, "
"implement a function for calculating the molar mass of a molecular formula."
msgstr "使用前面练习中化学元素的数据类型，实现一个计算分子式摩尔质量的函数。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1268
#, no-wrap
msgid ""
"   Use a list of elements each paired with its count\n"
"   (a natural number) for representing formulae. For\n"
"   instance:\n"
msgstr "   使用一个元素列表，每个元素都与其计数（自然数）对「pair」用于表示公式。例如：\n"

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1269
#, no-wrap
msgid ""
"   ethanol : List (Element,Nat)\n"
"   ethanol = [(C,2),(H,6),(O,1)]\n"
msgstr ""
"   ethanol : List (Element,Nat)\n"
"   ethanol = [(C,2),(H,6),(O,1)]\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1276
#, no-wrap
msgid ""
"   Hint: You can use function `cast` to convert a natural\n"
"   number to a `Double`.\n"
msgstr "   提示：您可以使用函数 `cast` 转换自然数为 `Double`。\n"

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:1277
#, no-wrap
msgid "Alternative Syntax for Data Definitions"
msgstr "数据定义的替代语法"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1285
msgid ""
"While the examples in the section about parameterized data types are short "
"and concise, there is a slightly more verbose but much more general form for "
"writing such definitions, which makes it much clearer what's going on.  In "
"my opinion, this more general form should be preferred in all but the most "
"simple data definitions."
msgstr ""
"虽然关于参数化的部分中的示例数据类型短小精悍，有一种写这样的更冗长但更一般的"
"形式定义，这使得正在发生的事情变得更加清晰。\n"
"在我看来，除了最简单的数据定义之外应该首选这种更一般的形式。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1290
msgid ""
"Here are the definitions of `Option`, `Validated`, and `Seq` again, using "
"this more general form (I put them in their own *namespace*, so Idris will "
"not complain about identical names in the same source file):"
msgstr ""
"下面是 `Option`、`Validated` 和 `Seq` 的定义，\n"
"使用这种更通用的形式（我将它们放在自己的 *命名空间* 中，\n"
"所以 Idris 不会抱怨同一个源文件中具有不同的名称）："

#. type: Fenced code block (idris)
#: ../src/Tutorial/DataTypes.md:1291
#, no-wrap
msgid ""
"-- GADT is an acronym for \"generalized algebraic data type\"\n"
"namespace GADT\n"
"  data Option : Type -> Type where\n"
"    Some : a -> Option a\n"
"    None : Option a\n"
"\n"
"  data Validated : Type -> Type -> Type where\n"
"    Invalid : e -> Validated e a\n"
"    Valid   : a -> Validated e a\n"
"\n"
"  data Seq : Type -> Type where\n"
"    Nil  : Seq a\n"
"    (::) : a -> GADT.Seq a -> Seq a\n"
msgstr ""
"-- GADT is an acronym for \"generalized algebraic data type\"\n"
"namespace GADT\n"
"  data Option : Type -> Type where\n"
"    Some : a -> Option a\n"
"    None : Option a\n"
"\n"
"  data Validated : Type -> Type -> Type where\n"
"    Invalid : e -> Validated e a\n"
"    Valid   : a -> Validated e a\n"
"\n"
"  data Seq : Type -> Type where\n"
"    Nil  : Seq a\n"
"    (::) : a -> GADT.Seq a -> Seq a\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1318
#, no-wrap
msgid ""
"Here, `Option` is clearly declared as a type constructor\n"
"(a function of type `Type -> Type`), while `Some`\n"
"is a generic function of type `a -> Option a` (where `a` is\n"
"a *type parameter*)\n"
"and `None` is a nullary generic function of type `Option a`\n"
"(`a` again being a type parameter).\n"
"Likewise for `Validated` and `Seq`. Note, that in case\n"
"of `Seq` we had to disambiguate between the different\n"
"`Seq` definitions in the recursive case. Since we will\n"
"usually not define several data types with the same name in\n"
"a source file, this is not necessary most of the time.\n"
msgstr ""
"这里， `Option` 明确声明为类型构造函数（类型 `Type -> Type` 的函数），而 `Some` 是 `a > Option a` 类型的泛型函数（其中 `a` 是 *类型参数*）， `None` 是 `Option a` 类型的空泛型函数\n"
"（`a` 又是一个类型参数）。\n"
"同样适用于 `Validated` 和 `Seq`。请注意，以防万一 `Seq` 我们必须区分不同的\n"
"递归情况下的 `Seq` 定义。既然我们\n"
"通常不会定义多个同名的数据类型在同一个源文件，大多数时候这不是必需的。\n"

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:1319 ../src/Tutorial/Dependent.md:872
#: ../src/Tutorial/DPair.md:1191 ../src/Tutorial/Eq.md:1085
#: ../src/Tutorial/Folds.md:1051 ../src/Tutorial/Functions1.md:524
#: ../src/Tutorial/Functions2.md:924 ../src/Tutorial/Functor.md:1398
#: ../src/Tutorial/Interfaces.md:792 ../src/Tutorial/IO.md:1095
#: ../src/Tutorial/Predicates.md:1358 ../src/Tutorial/Traverse.md:1109
#: ../src/Appendices/Install.md:102 ../src/Appendices/Neovim.md:364
#: ../src/Appendices/Projects.md:878 ../src/Appendices/QTT.md:442
#, no-wrap
msgid "Conclusion"
msgstr "结论"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1323
msgid ""
"We covered a lot of ground in this chapter, so I'll summarize the most "
"important points below:"
msgstr ""
"我们在本章中涵盖了很多内容，\n"
"所以我将总结以下最重要的几点："

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1326
#, no-wrap
msgid ""
"* Enumerations are data types consisting of a finite\n"
"number of possible *values*.\n"
msgstr "* 枚举是由有限个可能的 *值* 组成的数据类型。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1330
#, no-wrap
msgid ""
"* Sum types are data types with more than one data\n"
"constructor, where each constructor describes a\n"
"*choice* that can be made.\n"
msgstr "* 和类型是具有多个数据构造函数的数据类型，其中每个构造函数描述一个可以做出的*选择*。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1333
#, no-wrap
msgid ""
"* Product types are data types with a single constructor\n"
"used to group several values of possibly different types.\n"
msgstr "* 积类型是具有单个构造函数的数据类型，用于对可能不同类型的多个值进行分组。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1337
#, no-wrap
msgid ""
"* We use pattern matching to deconstruct immutable\n"
"values in Idris. The possible patterns correspond to\n"
"a data type's data constructors.\n"
msgstr "* 我们在 Idris 中使用模式匹配来解构不可变的值。可能的模式对应于数据类型的数据构造函数。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1341
#, no-wrap
msgid ""
"* We can *bind* variables to values in a pattern or\n"
"use an underscore as a placeholder for a value that's\n"
"not needed on the right hand side of an implementation.\n"
msgstr ""
"* 我们可以将变量*绑定*到模式中的值或\n"
"使用下划线作为值的占位符，在实现的右侧不需要。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1344
#, no-wrap
msgid ""
"* We can pattern match on an intermediary result by introducing\n"
"a *case block*.\n"
msgstr "* 我们可以通过引入 *Case 块* 对中间结果进行模式匹配。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1349
#, no-wrap
msgid ""
"* The preferred way to define new product types is\n"
"to define them as *records*, since these come with\n"
"additional syntactic conveniences for setting and\n"
"modifying individual *record fields*.\n"
msgstr "* 定义新的积类型的首选方法是将它们定义为 *记录*，因为它们带有额外的语法糖用来更新和设置单个 *记录字段*。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1354
#, no-wrap
msgid ""
"* Generic types and functions allow us generalize\n"
"certain concepts and make them available for many\n"
"types by using *type parameters* instead of\n"
"concrete types in function and type signatures.\n"
msgstr "* 泛型类型和函数允许我们泛化某些概念并使它们可供许多人使用，通过使用*类型参数*而不是函数和类型签名中的具体类型。\n"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1361
#, no-wrap
msgid ""
"* Common concepts like *nullary values* (`Maybe`),\n"
"computations that might fail with some error\n"
"condition (`Either`), and handling collections\n"
"of values of the same type at once (`List`) are\n"
"example use cases of generic types and functions\n"
"already provided by the *Prelude*.\n"
msgstr ""
"* 常见概念，如 * 空值 * (`Maybe`)，\n"
"可能因某些错误条件而失败的计算（`Either`），和处理包含相同类型的值的集合（`List`）是泛型类型和函数的示例用例，他们已由 *Prelude* 提供。\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:1362 ../src/Tutorial/Dependent.md:904
#: ../src/Tutorial/Functions1.md:575 ../src/Tutorial/Functions2.md:954
#: ../src/Tutorial/Interfaces.md:813 ../src/Tutorial/IO.md:1118
#, no-wrap
msgid "What's next"
msgstr "下一步是什么"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1366
msgid ""
"In the [next section](Interfaces.md), we will introduce *interfaces*, "
"another approach to *function overloading*."
msgstr ""
"在 [下一节](Interfaces.md) 中，我们将介绍*接口*，这是*函数重载*的另一种方法。"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1368 ../src/Tutorial/Dependent.md:910
#: ../src/Tutorial/DPair.md:1206 ../src/Tutorial/Eq.md:1100
#: ../src/Tutorial/Folds.md:1064 ../src/Tutorial/Functions1.md:583
#: ../src/Tutorial/Functions2.md:964 ../src/Tutorial/Functor.md:1430
#: ../src/Tutorial/Interfaces.md:821 ../src/Tutorial/Intro.md:453
#: ../src/Tutorial/IO.md:1125 ../src/Tutorial/Predicates.md:1371
#: ../src/Tutorial/Prim.md:1410 ../src/Tutorial/Traverse.md:1148
#: ../src/Appendices/Neovim.md:374 ../src/Appendices/Projects.md:890
#, no-wrap
msgid ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"
msgstr ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"
