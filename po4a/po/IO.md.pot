# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-05-15 03:33+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:261 ../src/Tutorial/Dependent.md:444
#: ../src/Tutorial/DPair.md:348 ../src/Tutorial/Eq.md:279
#: ../src/Tutorial/Folds.md:373 ../src/Tutorial/Functor.md:381
#: ../src/Tutorial/Interfaces.md:189 ../src/Tutorial/IO.md:317
#: ../src/Tutorial/Predicates.md:305 ../src/Tutorial/Prim.md:448
#: ../src/Tutorial/Traverse.md:247
#, no-wrap
msgid "Exercises part 1"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:436 ../src/Tutorial/Dependent.md:623
#: ../src/Tutorial/DPair.md:653 ../src/Tutorial/Eq.md:555
#: ../src/Tutorial/Folds.md:668 ../src/Tutorial/Functor.md:965
#: ../src/Tutorial/Interfaces.md:352 ../src/Tutorial/IO.md:728
#: ../src/Tutorial/Predicates.md:672 ../src/Tutorial/Prim.md:711
#: ../src/Tutorial/Traverse.md:574
#, no-wrap
msgid "Exercises part 2"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:742 ../src/Tutorial/Dependent.md:843
#: ../src/Tutorial/DPair.md:1128 ../src/Tutorial/Eq.md:826
#: ../src/Tutorial/Folds.md:988 ../src/Tutorial/Functor.md:1235
#: ../src/Tutorial/Interfaces.md:624 ../src/Tutorial/IO.md:949
#: ../src/Tutorial/Predicates.md:1020 ../src/Tutorial/Prim.md:935
#: ../src/Tutorial/Traverse.md:1016
#, no-wrap
msgid "Exercises part 3"
msgstr ""

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:1319 ../src/Tutorial/Dependent.md:872
#: ../src/Tutorial/DPair.md:1191 ../src/Tutorial/Eq.md:1085
#: ../src/Tutorial/Folds.md:1051 ../src/Tutorial/Functions1.md:524
#: ../src/Tutorial/Functions2.md:924 ../src/Tutorial/Functor.md:1398
#: ../src/Tutorial/Interfaces.md:792 ../src/Tutorial/IO.md:1095
#: ../src/Tutorial/Predicates.md:1358 ../src/Tutorial/Traverse.md:1109
#: ../src/Appendices/Neovim.md:364
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:1362 ../src/Tutorial/Dependent.md:904
#: ../src/Tutorial/Functions1.md:575 ../src/Tutorial/Functions2.md:954
#: ../src/Tutorial/Interfaces.md:813 ../src/Tutorial/IO.md:1118
#, no-wrap
msgid "What's next"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1368 ../src/Tutorial/Dependent.md:910
#: ../src/Tutorial/DPair.md:1206 ../src/Tutorial/Eq.md:1100
#: ../src/Tutorial/Folds.md:1064 ../src/Tutorial/Functions1.md:583
#: ../src/Tutorial/Functions2.md:964 ../src/Tutorial/Functor.md:1430
#: ../src/Tutorial/Interfaces.md:821 ../src/Tutorial/Intro.md:453
#: ../src/Tutorial/IO.md:1125 ../src/Tutorial/Predicates.md:1371
#: ../src/Tutorial/Prim.md:1410 ../src/Tutorial/Traverse.md:1148
#: ../src/Appendices/Neovim.md:374
#, no-wrap
msgid ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:1019 ../src/Tutorial/IO.md:753
#: ../src/Tutorial/Traverse.md:267
#, no-wrap
msgid ""
"   data List01 : (nonEmpty : Bool) -> Type -> Type where\n"
"     Nil  : List01 False a\n"
"     (::) : a -> List01 False a -> List01 ne a\n"
msgstr ""

#. type: Title #
#: ../src/Tutorial/IO.md:1
#, no-wrap
msgid "IO: Programming with Side Effects"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:7
#, no-wrap
msgid ""
"So far, all our examples and exercises dealt with pure, total functions.\n"
"We didn't read or write content from or to files, nor did\n"
"we write any messages to the standard output. It is time to change\n"
"that and learn, how we can write effectful programs in Idris.\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:8
#, no-wrap
msgid ""
"module Tutorial.IO\n"
"\n"
"import Data.List1\n"
"import Data.String\n"
"import Data.Vect\n"
"\n"
"import System.File\n"
"\n"
"%default total\n"
msgstr ""

#. type: Title ##
#: ../src/Tutorial/IO.md:20
#, no-wrap
msgid "Pure Side Effects?"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:24
#, no-wrap
msgid ""
"If we once again look at the *hello world* example from the\n"
"[introduction](Intro.md), it had the following type and implementation:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:25
#, no-wrap
msgid ""
"hello : IO ()\n"
"hello = putStrLn \"Hello World!\"\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:32
#, no-wrap
msgid ""
"If you load this module in a REPL session and evaluate `hello`,\n"
"you'll get the following:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:33
#, no-wrap
msgid ""
"Tutorial.IO> hello\n"
"MkIO (prim__putStr \"Hello World!\")\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:41
#, no-wrap
msgid ""
"This might not be what you expected, given that we'd actually wanted the\n"
"program to just print \"Hello World!\". In order to explain what's going\n"
"on here, we need to quickly look at how evaluation at the REPL works.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:51
#, no-wrap
msgid ""
"When we evaluate some expression at the REPL, Idris tries to\n"
"reduce it to a value until it gets stuck somewhere. In the above case,\n"
"Idris gets stuck at function `prim__putStr`. This is\n"
"a *foreign function* defined in the *Prelude*, which has to be implemented\n"
"by each backend in order to be available there. At compile time (and at the REPL),\n"
"Idris knows nothing about the implementations of foreign functions\n"
"and therefore can't reduce foreign function calls, unless they are\n"
"built into the compiler itself. But even then, values of type `IO a`\n"
"(`a` being a type parameter) are typically not reduced.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:61
#, no-wrap
msgid ""
"It is important to understand that values of type `IO a` *describe*\n"
"a program, which, when being *executed*, will return a value of type `a`,\n"
"after performing arbitrary side effects along the way. For instance,\n"
"`putStrLn` has type `String -> IO ()`. Read this as: \"`putStrLn` is a function,\n"
"which, when given a `String` argument, will return a description of\n"
"an effectful program with an output type of `()`\".\n"
"(`()` is syntactic sugar for type `Unit`, the\n"
"empty tuple defined at the *Prelude*, which has only one value called `MkUnit`,\n"
"for which we can also use `()` in our code.)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:72
#, no-wrap
msgid ""
"Since values of type `IO a` are mere descriptions of effectful computations,\n"
"functions returning such values or taking such values as\n"
"arguments are still *pure* and thus referentially transparent.\n"
"It is, however, not possible to extract a value of type `a` from\n"
"a value of type `IO a`, that is, there is no generic function `IO a -> a`,\n"
"as such a function would inadvertently execute the side\n"
"effects when extracting the result from its argument,\n"
"thus breaking referential transparency.\n"
"(Actually, there *is* such a function called `unsafePerformIO`.\n"
"Do not ever use it in your code unless you know what you are doing.)\n"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/IO.md:73
#, no-wrap
msgid "Do Blocks"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:83
#, no-wrap
msgid ""
"If you are new to pure functional programming, you might now - rightfully -\n"
"mumble something about how useless it is to\n"
"have descriptions of effectful programs without being able to run them.\n"
"So please, hear me out. While we are not able to run values of type\n"
"`IO a` when writing programs, that is, there is no function of\n"
"type `IO a -> a`, we are able to chain such computations and describe more\n"
"complex programs. Idris provides special syntax for this: *Do blocks*.\n"
"Here's an example:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:84
#, no-wrap
msgid ""
"readHello : IO ()\n"
"readHello = do\n"
"  name <- getLine\n"
"  putStrLn $ \"Hello \" ++ name ++ \"!\"\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:93
#, no-wrap
msgid ""
"Before we talk about what's going on here, let's give this a go at\n"
"the REPL:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:94
#, no-wrap
msgid ""
"Tutorial.IO> :exec readHello\n"
"Stefan\n"
"Hello Stefan!\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:104
#, no-wrap
msgid ""
"This is an interactive program, which will read a line from standard\n"
"input (`getLine`), assign the result to variable `name`, and then\n"
"use `name` to create a friendly greeting and write it to\n"
"standard output.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:114
#, no-wrap
msgid ""
"Note the `do` keyword at the beginning of the implementation of `readHello`:\n"
"It starts a *do block*, where we can chain `IO` computations and bind\n"
"intermediary results to variables using arrows pointing\n"
"to the left (`<-`), which can then be used in later\n"
"`IO` actions. This concept is powerful enough to let us encapsulate arbitrary\n"
"programs with side effects in a single value of type `IO`. Such a\n"
"description can then be returned by function `main`, the main entry point\n"
"to an Idris program, which is being executed when we run a compiled\n"
"Idris binary.\n"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/IO.md:115
#, no-wrap
msgid "The Difference between Program Description and Execution"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:120
#, no-wrap
msgid ""
"In order to better understand the difference between *describing*\n"
"an effectful computation and *executing* or *running* it, here is a small\n"
"program:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:121
#, no-wrap
msgid ""
"launchMissiles : IO ()\n"
"launchMissiles = putStrLn \"Boom! You're dead.\"\n"
"\n"
"friendlyReadHello : IO ()\n"
"friendlyReadHello = do\n"
"  _ <- putStrLn \"Please enter your name.\"\n"
"  readHello\n"
"\n"
"actions : Vect 3 (IO ())\n"
"actions = [launchMissiles, friendlyReadHello, friendlyReadHello]\n"
"\n"
"runActions : Vect (S n) (IO ()) -> IO ()\n"
"runActions (_ :: xs) = go xs\n"
"  where go : Vect k (IO ()) -> IO ()\n"
"        go []        = pure ()\n"
"        go (y :: ys) = do\n"
"          _ <- y\n"
"          go ys\n"
"\n"
"readHellos : IO ()\n"
"readHellos = runActions actions\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:153
#, no-wrap
msgid ""
"Before I explain what the code above does, please note function\n"
"`pure` used in the implementation of `runActions`. It is\n"
"a constrained function, about which we will learn in the next\n"
"chapter. Specialized to `IO`, it has generic type `a -> IO a`:\n"
"It allows us to wrap a value in an `IO` action. The resulting\n"
"`IO` program will just return the wrapped value without performing\n"
"any side effects. We can now look at the big picture of what's\n"
"going on in `readHellos`.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:160
#, no-wrap
msgid ""
"First, we define a friendlier version of `readHello`: When executed, this will\n"
"ask about our name explicitly. Since we will not use the result\n"
"of `putStrLn` any further, we can use an underscore as a catch-all\n"
"pattern here. Afterwards, `readHello` is invoked. We also define\n"
"`launchMissiles`, which, when being executed, will lead to the\n"
"destruction of planet earth.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:169
#, no-wrap
msgid ""
"Now, `runActions` is the function we use to\n"
"demonstrate that *describing* an `IO` action is not the\n"
"same as *running* it. It will drop the first action from\n"
"the non-empty vector it takes as its\n"
"argument and return a new `IO` action, which describes the\n"
"execution of the remaining `IO` actions in sequence. If this behaves\n"
"as expected, the first `IO` action passed to `runActions` should be\n"
"silently dropped together with all its potential side effects.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:174
#, no-wrap
msgid ""
"When we execute `readHellos` at the REPL, we will be asked for our\n"
"name twice, although `actions` also contains `launchMissiles` at the\n"
"beginning. Luckily, although we described how to destroy the planet,\n"
"the action was not executed, and we are (probably) still here.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:176
#, no-wrap
msgid "From this example we learn several things:\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:180
#, no-wrap
msgid ""
"Values of type `IO a` are *pure descriptions* of programs, which,\n"
"when being *executed*, perform arbitrary side effects before\n"
"returning a value of type `a`.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:184
#, no-wrap
msgid ""
"Values of type `IO a` can be safely returned from functions and\n"
"passed around as arguments or in data structures, without\n"
"the risk of them being executed.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:187
#, no-wrap
msgid ""
"Values of type `IO a` can be safely combined in *do blocks* to\n"
"*describe* new `IO` actions.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:191
#, no-wrap
msgid ""
"An `IO` action will only ever get executed when it's passed to\n"
"`:exec` at the REPL, or when it is the `main` function of\n"
"a compiled Idris program that is being executed.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:196
#, no-wrap
msgid ""
"It is not possible to ever break out of the `IO` context: There\n"
"is no function of type `IO a -> a`, as such a function would\n"
"need to execute its argument in order to extract the final\n"
"result, and this would break referential transparency.\n"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/IO.md:197
#, no-wrap
msgid "Combining Pure Code with `IO` Actions"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:202
#, no-wrap
msgid ""
"The title of this subsection is somewhat misleading. `IO` actions\n"
"*are* pure values, but what is typically meant here, is that we\n"
"combine non-`IO` functions with effectful computations.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:208
#, no-wrap
msgid ""
"As a demonstration, in this section we are going to write a small\n"
"program for evaluating arithmetic expressions. We are going to\n"
"keep things simple and allow only expressions with a single\n"
"operator and two arguments, both of which must be integers,\n"
"for instance `12 + 13`.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:216
#, no-wrap
msgid ""
"We are going to use function `split` from `Data.String` in\n"
"*base* to tokenize arithmetic expressions. We are then trying\n"
"to parse the two integer values and the operator. These operations\n"
"might fail, since user input can be invalid, so we also need an\n"
"error type. We could actually just use `String`, but I\n"
"consider it to be good practice to use custom sum types\n"
"for erroneous conditions.\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:217
#, no-wrap
msgid ""
"data Error : Type where\n"
"  NotAnInteger    : (value : String) -> Error\n"
"  UnknownOperator : (value : String) -> Error\n"
"  ParseError      : (input : String) -> Error\n"
"\n"
"dispError : Error -> String\n"
"dispError (NotAnInteger v)    = \"Not an integer: \" ++ v ++ \".\"\n"
"dispError (UnknownOperator v) = \"Unknown operator: \" ++ v ++ \".\"\n"
"dispError (ParseError v)      = \"Invalid expression: \" ++ v ++ \".\"\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:231
#, no-wrap
msgid ""
"In order to parse integer literals, we use function `parseInteger`\n"
"from `Data.String`:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:232
#, no-wrap
msgid ""
"readInteger : String -> Either Error Integer\n"
"readInteger s = maybe (Left $ NotAnInteger s) Right $ parseInteger s\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:239
#, no-wrap
msgid ""
"Likewise, we declare and implement a function for parsing\n"
"arithmetic operators:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:240
#, no-wrap
msgid ""
"readOperator : String -> Either Error (Integer -> Integer -> Integer)\n"
"readOperator \"+\" = Right (+)\n"
"readOperator \"*\" = Right (*)\n"
"readOperator s   = Left (UnknownOperator s)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:254
#, no-wrap
msgid ""
"We are now ready to parse and evaluate simple arithmetic\n"
"expressions. This consists of several steps (splitting the\n"
"input string, parsing each literal), each of which can fail.\n"
"Later, when we learn about monads, we will see that do\n"
"blocks can be used in such occasions just as well. However,\n"
"in this case we can use an alternative syntactic convenience:\n"
"Pattern matching in let bindings. Here is the code:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:255
#, no-wrap
msgid ""
"eval : String -> Either Error Integer\n"
"eval s =\n"
"  let [x,y,z]  := forget $ split isSpace s | _ => Left (ParseError s)\n"
"      Right v1 := readInteger x  | Left e => Left e\n"
"      Right op := readOperator y | Left e => Left e\n"
"      Right v2 := readInteger z  | Left e => Left e\n"
"   in Right $ op v1 v2\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:280
#, no-wrap
msgid ""
"Let's break this down a bit. On the first line, we split\n"
"the input string at all whitespace occurrences. Since\n"
"`split` returns a `List1` (a type for non-empty lists\n"
"exported from `Data.List1` in *base*) but pattern matching\n"
"on `List` is more convenient, we convert the result using\n"
"`Data.List1.forget`. Note, how we use a pattern match\n"
"on the left hand side of the assignment operator `:=`.\n"
"This is a partial pattern match (*partial* meaning,\n"
"that it doesn't cover all possible cases), therefore we have\n"
"to deal with the other possibilities as well, which is\n"
"done after the vertical line. This can be read as follows:\n"
"\"If the pattern match on the left hand side is successful,\n"
"and we get a list of exactly three tokens, continue with\n"
"the `let` expression, otherwise return a `ParseError` in\n"
"a `Left` immediately\".\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:286
#, no-wrap
msgid ""
"The other three lines behave exactly the same: Each has\n"
"a partial pattern match on the left hand side with\n"
"instructions what to return in case of invalid input after\n"
"the vertical bar. We will later see, that this syntax is also\n"
"available in *do blocks*.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:294
#, no-wrap
msgid ""
"Note, how all of the functionality implemented so far is\n"
"*pure*, that is, it does not describe computations with\n"
"side effects. (One could argue that already the possibility\n"
"of failure is an observable *effect*, but even then, the code above\n"
"is still referentially transparent,\n"
"can be easily tested at the REPL, and evaluated at\n"
"compile time, which is the important thing here.)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:298
#, no-wrap
msgid ""
"Finally, we can wrap this functionality in an `IO`\n"
"action, which reads a string from standard input\n"
"and tries to evaluate the arithmetic expression:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:299
#, no-wrap
msgid ""
"exprProg : IO ()\n"
"exprProg = do\n"
"  s <- getLine\n"
"  case eval s of\n"
"    Left err  => do\n"
"      putStrLn \"An error occured:\"\n"
"      putStrLn (dispError err)\n"
"    Right res => putStrLn (s ++ \" = \" ++ show res)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:316
#, no-wrap
msgid ""
"Note, how in `exprProg` we were forced to deal with the\n"
"possibility of failure and handle both constructors\n"
"of `Either` differently in order to print a result.\n"
"Note also, that *do blocks* are ordinary expressions,\n"
"and we can, for instance, start a new *do block* on\n"
"the right hand side of a case expression.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:329
#, no-wrap
msgid ""
"In these exercises, you are going to implement some\n"
"small command-line applications. Some of these will potentially\n"
"run forever, as they will only stop when the user enters\n"
"a keyword for quitting the application. Such programs\n"
"are no longer provably total. If you added the\n"
"`%default total` pragma at the top of your source file,\n"
"you'll need to annotate these functions with `covering`,\n"
"meaning that you covered all cases in all pattern matches\n"
"but your program might still loop due to unrestricted\n"
"recursion.\n"
msgstr ""

#. type: Bullet: '1. '
#: ../src/Tutorial/IO.md:333
#, no-wrap
msgid ""
"Implement function `rep`, which will read a line\n"
"of input from the terminal, evaluate it using the\n"
"given function, and print the result to standard output:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:334
#, no-wrap
msgid "   rep : (String -> String) -> IO ()\n"
msgstr ""

#. type: Bullet: '2. '
#: ../src/Tutorial/IO.md:341
#, no-wrap
msgid ""
"Implement function `repl`, which behaves just like `rep`\n"
"but will repeat itself forever (or until being forcefully\n"
"terminated):\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:342
#, no-wrap
msgid ""
"   covering\n"
"   repl : (String -> String) -> IO ()\n"
msgstr ""

#. type: Bullet: '3. '
#: ../src/Tutorial/IO.md:351
#, no-wrap
msgid ""
"Implement function `replTill`, which behaves just like `repl`\n"
"but will only continue looping if the given function returns\n"
"a `Right`. If it returns a `Left`, `replTill` should print\n"
"the final message wrapped in the `Left` and then stop.\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:352
#, no-wrap
msgid ""
"   covering\n"
"   replTill : (String -> Either String String) -> IO ()\n"
msgstr ""

#. type: Bullet: '4. '
#: ../src/Tutorial/IO.md:364
#, no-wrap
msgid ""
"Write a program, which reads arithmetic\n"
"expressions from standard input, evaluates them\n"
"using `eval`, and prints the result to standard\n"
"output. The program should loop until\n"
"users stops it by entering \"done\", in which case\n"
"the program should terminate with a friendly greeting.\n"
"Use `replTill` in your implementation.\n"
msgstr ""

#. type: Bullet: '5. '
#: ../src/Tutorial/IO.md:373
#, no-wrap
msgid ""
"Implement function `replWith`, which behaves just like `repl`\n"
"but uses some internal state to accumulate values.\n"
"At each iteration (including the very first one!),\n"
"the current state should be printed\n"
"to standard output using function `dispState`, and\n"
"the next state should be computed using function `next`.\n"
"The loop should terminate in case of a `Left` and\n"
"print a final message using `dispResult`:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:374
#, no-wrap
msgid ""
"   covering\n"
"   replWith :  (state      : s)\n"
"            -> (next       : s -> String -> Either res s)\n"
"            -> (dispState  : s -> String)\n"
"            -> (dispResult : res -> s -> String)\n"
"            -> IO ()\n"
msgstr ""

#. type: Bullet: '6. '
#: ../src/Tutorial/IO.md:388
#, no-wrap
msgid ""
"Use `replWith` from Exercise 5 to write a program\n"
"for reading natural numbers from standard input and\n"
"printing the accumulated sum of these numbers.\n"
"The program should terminate in case of invalid input\n"
"and if a user enters \"done\".\n"
msgstr ""

#. type: Title ##
#: ../src/Tutorial/IO.md:389
#, no-wrap
msgid "Do Blocks, Desugared"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:402
#, no-wrap
msgid ""
"Here's an important piece of information: There is nothing\n"
"special about *do blocks*. They are just syntactic sugar,\n"
"which is converted to a sequence of operator applications.\n"
"With [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar),\n"
"we mean syntax in a programming language that makes it\n"
"easier to express certain things in that language without\n"
"making the language itself any more powerful or expressive.\n"
"Here, it means you could write all the `IO` programs\n"
"without using `do` notation, but the code you'll write\n"
"will sometimes be harder to read, so *do blocks* provide\n"
"nicer syntax for these occasions.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:404
#, no-wrap
msgid "Consider the following example program:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:405
#, no-wrap
msgid ""
"sugared1 : IO ()\n"
"sugared1 = do\n"
"  str1 <- getLine\n"
"  str2 <- getLine\n"
"  str3 <- getLine\n"
"  putStrLn (str1 ++ str2 ++ str3)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:416
#, no-wrap
msgid ""
"The compiler will convert this to the following program\n"
"*before disambiguating function names and type checking*:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:417
#, no-wrap
msgid ""
"desugared1 : IO ()\n"
"desugared1 =\n"
"  getLine >>= (\\str1 =>\n"
"    getLine >>= (\\str2 =>\n"
"      getLine >>= (\\str3 =>\n"
"        putStrLn (str1 ++ str2 ++ str3)\n"
"      )\n"
"    )\n"
"  )\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:432
#, no-wrap
msgid ""
"There is a new operator (`(>>=)`) called *bind* in the\n"
"implementation of `desugared1`. If you look at its type\n"
"at the REPL, you'll see the following:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:433
#, no-wrap
msgid ""
"Main> :t (>>=)\n"
"Prelude.>>= : Monad m => m a -> (a -> m b) -> m b\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:441
#, no-wrap
msgid ""
"This is a constrained function requiring an interface called `Monad`.\n"
"We will talk about `Monad` and some of its friends in the next\n"
"chapter. Specialized to `IO`, *bind* has the following type:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:442
#, no-wrap
msgid ""
"Main> :t (>>=) {m = IO}\n"
">>= : IO a -> (a -> IO b) -> IO b\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:451
#, no-wrap
msgid ""
"This describes a sequencing of `IO` actions. Upon execution,\n"
"the first `IO` action is being run and its result is\n"
"being passed as an argument to the function generating\n"
"the second `IO` action, which is then also being executed.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:466
#, no-wrap
msgid ""
"You might remember, that you already implemented something\n"
"similar in an earlier exercise: In [Algebraic Data Types](DataTypes.md),\n"
"you implemented *bind* for `Maybe` and `Either e`. We will\n"
"learn in the next chapter, that `Maybe` and `Either e` too come\n"
"with an implementation of `Monad`. For now, suffice to say\n"
"that `Monad` allows us to run computations with some kind\n"
"of effect in sequence by passing the *result* of the\n"
"first computation to the function returning the\n"
"second computation. In `desugared1` you can see, how\n"
"we first perform an `IO` action and use its result\n"
"to compute the next `IO` action and so on. The code is somewhat\n"
"hard to read, since we use several layers of nested\n"
"anonymous function, that's why in such cases, *do blocks*\n"
"are a nice alternative to express the same functionality.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:471
#, no-wrap
msgid ""
"Since *do block* are always desugared to sequences of\n"
"applied *bind* operators, we can use them to chain\n"
"any monadic computation. For instance, we can rewrite\n"
"function `eval` by using a *do block* like so:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:472
#, no-wrap
msgid ""
"evalDo : String -> Either Error Integer\n"
"evalDo s = case forget $ split isSpace s of\n"
"  [x,y,z] => do\n"
"    v1 <- readInteger x\n"
"    op <- readOperator y\n"
"    v2 <- readInteger z\n"
"    Right $ op v1 v2\n"
"  _       => Left (ParseError s)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:488
#, no-wrap
msgid ""
"Don't worry, if this doesn't make too much sense yet. We will\n"
"see many more examples, and you'll get the hang of this\n"
"soon enough. The important thing to remember is how *do\n"
"blocks* are always converted to sequences of *bind*\n"
"operators as shown in `desugared1`.\n"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/IO.md:489
#, no-wrap
msgid "Binding Unit"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:492
#, no-wrap
msgid "Remember our implementation of `friendlyReadHello`? Here it is again:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:493
#, no-wrap
msgid ""
"friendlyReadHello' : IO ()\n"
"friendlyReadHello' = do\n"
"  _ <- putStrLn \"Please enter your name.\"\n"
"  readHello\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:505
#, no-wrap
msgid ""
"The underscore in there is a bit ugly and unnecessary. In fact,\n"
"a common use case is to just chain effectful computations with\n"
"result type `Unit` (`()`), merely for the side\n"
"effects they perform. For instance, we could repeat `friendlyReadHello`\n"
"three times, like so:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:506
#, no-wrap
msgid ""
"friendly3 : IO ()\n"
"friendly3 = do\n"
"  _ <- friendlyReadHello\n"
"  _ <- friendlyReadHello\n"
"  friendlyReadHello\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:516
#, no-wrap
msgid ""
"This is such a common thing to do, that Idris allows us to\n"
"drop the bound underscores altogether:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:517
#, no-wrap
msgid ""
"friendly4 : IO ()\n"
"friendly4 = do\n"
"  friendlyReadHello\n"
"  friendlyReadHello\n"
"  friendlyReadHello\n"
"  friendlyReadHello\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:527
#, no-wrap
msgid "Note, however, that the above gets desugared slightly differently:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:528
#, no-wrap
msgid ""
"friendly4Desugared : IO ()\n"
"friendly4Desugared =\n"
"  friendlyReadHello >>\n"
"  friendlyReadHello >>\n"
"  friendlyReadHello >>\n"
"  friendlyReadHello\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:538
#, no-wrap
msgid "Operator `(>>)` has the following type:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:539
#, no-wrap
msgid ""
"Main> :t (>>)\n"
"Prelude.>> : Monad m => m () -> Lazy (m b) -> m b\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:550
#, no-wrap
msgid ""
"Note the `Lazy` keyword in the type signature. This means,\n"
"that the wrapped argument will be *lazily evaluated*. This\n"
"makes sense in many occasions. For instance, if the `Monad`\n"
"in question is `Maybe` the result will be `Nothing` if\n"
"the first argument is `Nothing`, in which case there is no\n"
"need to even evaluate the second argument.\n"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/IO.md:551
#, no-wrap
msgid "Do, Overloaded"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:562
#, no-wrap
msgid ""
"Because Idris supports function and operator overloading, we\n"
"can write custom *bind* operators, which allows us to\n"
"use *do notation* for types without an implementation\n"
"of `Monad`. For instance, here is a custom implementation of\n"
"`(>>=)` for sequencing computations returning vectors.\n"
"Every value in the first vector (of length `m`)\n"
"will be converted to a vector of length `n`, and\n"
"the results will be concatenated leading to\n"
"a vector of length `m * n`:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:563
#, no-wrap
msgid ""
"flatten : Vect m (Vect n a) -> Vect (m * n) a\n"
"flatten []        = []\n"
"flatten (x :: xs) = x ++ flatten xs\n"
"\n"
"(>>=) : Vect m a -> (a -> Vect n b) -> Vect (m * n) b\n"
"as >>= f = flatten (map f as)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:580
#, no-wrap
msgid ""
"It is not possible to write an implementation of `Monad`,\n"
"which encapsulates this behavior, as the types wouldn't\n"
"match: Monadic *bind* specialized to `Vect` has\n"
"type `Vect k a -> (a -> Vect k b) -> Vect k b`. As you\n"
"see, the sizes of all three occurrences of `Vect`\n"
"have to be the same, which is not what we expressed\n"
"in our custom version of *bind*. Here is an example to\n"
"see this in action:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:581
#, no-wrap
msgid ""
"modString : String -> Vect 4 String\n"
"modString s = [s, reverse s, toUpper s, toLower s]\n"
"\n"
"testDo : Vect 24 String\n"
"testDo = IO.do\n"
"  s1 <- [\"Hello\", \"World\"]\n"
"  s2 <- [1, 2, 3]\n"
"  modString (s1 ++ show s2)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:601
#, no-wrap
msgid ""
"Try to figure out how `testDo` works by desugaring it\n"
"manually and then comparing its result with what you\n"
"expected at the REPL. Note, how we helped Idris disambiguate,\n"
"which version of the *bind* operator to use by prefixing\n"
"the `do` keyword with part of the operator's namespace.\n"
"In this case, this wasn't strictly necessary, although\n"
"`Vect k` does have an implementation of `Monad`, but it is\n"
"still good to know that it is possible to help\n"
"the compiler with disambiguating do blocks.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:605
#, no-wrap
msgid ""
"Of course, we can (and should!) overload `(>>)` in the\n"
"same manner as `(>>=)`, if we want to overload the\n"
"behavior of *do blocks*.\n"
msgstr ""

#. type: Title ####
#: ../src/Tutorial/IO.md:606
#, no-wrap
msgid "Modules and Namespaces"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:614
#, no-wrap
msgid ""
"Every data type, function, or operator can be unambiguously\n"
"identified by prefixing it with its *namespace*. A function's\n"
"namespace typically is the same as the module where it was defined.\n"
"For instance, the fully qualified name of function `eval`\n"
"would be `Tutorial.IO.eval`. Function and operator names must\n"
"be unique in their namespace.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:620
#, no-wrap
msgid ""
"As we already learned, Idris can often disambiguate between\n"
"functions with the same name but defined in different namespaces\n"
"based on the types involved. If this is not possible, we can help\n"
"the compiler by *prefixing* the function or operator name with\n"
"a *suffix* of the full namespace. Let's demonstrate this at the REPL:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:621
#, no-wrap
msgid ""
"Tutorial.IO> :t (>>=)\n"
"Prelude.>>= : Monad m => m a -> (a -> m b) -> m b\n"
"Tutorial.IO.>>= : Vect m a -> (a -> Vect n b) -> Vect (m * n) b\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:633
#, no-wrap
msgid ""
"As you can see, if we load this module in a REPL session and\n"
"inspect the type of `(>>=)`, we get two results as two\n"
"operators with this name are in scope. If we only want\n"
"the REPL to print the type of our custom *bind* operator,\n"
"is is sufficient to prefix it with `IO`, although we could\n"
"also prefix it with its full namespace:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:634
#, no-wrap
msgid ""
"Tutorial.IO> :t IO.(>>=)\n"
"Tutorial.IO.>>= : Vect m a -> (a -> Vect n b) -> Vect (m * n) b\n"
"Tutorial.IO> :t Tutorial.IO.(>>=)\n"
"Tutorial.IO.>>= : Vect m a -> (a -> Vect n b) -> Vect (m * n) b\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:649
#, no-wrap
msgid ""
"Since function names must be unique in their namespace and\n"
"we still may want to define two overloaded versions of a function\n"
"in an Idris module, Idris makes it possible to add\n"
"additional namespaces to modules. For instance, in order\n"
"to define another function called `eval`, we need to add\n"
"it to its own namespace (note, that all definitions in a\n"
"namespace must be indented by the same amount of\n"
"whitespace):\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:650
#, no-wrap
msgid ""
"namespace Foo\n"
"  export\n"
"  eval : Nat -> Nat -> Nat\n"
"  eval = (*)\n"
"\n"
"-- prefixing `eval` with its namespace is not strictly necessary here\n"
"testFooEval : Nat\n"
"testFooEval = Foo.eval 12 100\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:665
#, no-wrap
msgid ""
"Now, here is an important thing: For functions and data types to\n"
"be accessible from outside their namespace or module, they need to\n"
"be *exported* by annotating them with the `export` or `public export`\n"
"keywords.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:674
#, no-wrap
msgid ""
"The difference between `export` and `public export` is the following:\n"
"A function annotated with `export` exports its type and can be\n"
"called from other namespaces. A data type annotated with `export`\n"
"exports its type constructor but not its data constructors.\n"
"A function annotated with `public export` also exports its\n"
"implementation. This is necessary to use the function in compile-time\n"
"computations. A data type annotated with `public export`\n"
"exports its data constructors as well.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:680
#, no-wrap
msgid ""
"In general, consider annotating data types with `public export`,\n"
"since otherwise you will not be able to create values of these\n"
"types or deconstruct them in pattern matches. Likewise, unless you\n"
"plan to use your functions in compile-time computations, annotate\n"
"them with `export`.\n"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/IO.md:681
#, no-wrap
msgid "Bind, with a Bang"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:688
#, no-wrap
msgid ""
"Sometimes, even *do blocks* are too noisy to express a\n"
"combination of effectful computations. In this case, we\n"
"can prefix the effectful parts with an exclamation mark\n"
"(wrapping them in parentheses if they contain additional\n"
"whitespace), while leaving pure expressions unmodified:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:689
#, no-wrap
msgid ""
"getHello : IO ()\n"
"getHello = putStrLn $ \"Hello \" ++ !getLine ++ \"!\"\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:695
#, no-wrap
msgid "The above gets desugared to the following *do block*:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:696
#, no-wrap
msgid ""
"getHello' : IO ()\n"
"getHello' = do\n"
"  s <- getLine\n"
"  putStrLn $ \"Hello \" ++ s ++ \"!\"\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:704
#, no-wrap
msgid "Here is another example:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:705
#, no-wrap
msgid ""
"bangExpr : String -> String -> String -> Maybe Integer\n"
"bangExpr s1 s2 s3 =\n"
"  Just $ !(parseInteger s1) + !(parseInteger s2) * !(parseInteger s3)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:712
#, no-wrap
msgid "And here is the desugared *do block*:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:713
#, no-wrap
msgid ""
"bangExpr' : String -> String -> String -> Maybe Integer\n"
"bangExpr' s1 s2 s3 = do\n"
"  x1 <- parseInteger s1\n"
"  x2 <- parseInteger s2\n"
"  x3 <- parseInteger s3\n"
"  Just $ x1 + x2 * x3\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:727
#, no-wrap
msgid ""
"Please remember the following: Syntactic sugar has been introduced\n"
"to make code more readable or more convenient to write. If\n"
"it is abused just to show how clever you are, you make things\n"
"harder for other people (including your future self!)\n"
"reading and trying to understand your code.\n"
msgstr ""

#. type: Bullet: '1. '
#: ../src/Tutorial/IO.md:733
#, no-wrap
msgid ""
"Reimplement the following *do blocks*, once by using\n"
"*bang notation*, and once by writing them in their\n"
"desugared form with nested *bind*s:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:734
#, no-wrap
msgid ""
"   ex1a : IO String\n"
"   ex1a = do\n"
"     s1 <- getLine\n"
"     s2 <- getLine\n"
"     s3 <- getLine\n"
"     pure $ s1 ++ reverse s2 ++ s3\n"
"\n"
"   ex1b : Maybe Integer\n"
"   ex1b = do\n"
"     n1 <- parseInteger \"12\"\n"
"     n2 <- parseInteger \"300\"\n"
"     Just $ n1 + n2 * 100\n"
msgstr ""

#. type: Bullet: '2. '
#: ../src/Tutorial/IO.md:752
#, no-wrap
msgid ""
"Below is the definition of an indexed family of types,\n"
"the index of which keeps track of whether the value in\n"
"question is possibly empty or provably non-empty:\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:766
#, no-wrap
msgid ""
"   Please note, that the `Nil` case *must* have the `nonEmpty`\n"
"   tag set to `False`, while with the *cons* case, this is\n"
"   optional. So, a `List01 False a` can be empty or non-empty,\n"
"   and we'll only find out, which is the case, by pattern\n"
"   matching on it. A `List01 True a` on the other hand *must*\n"
"   be a *cons*, as for the `Nil` case the `nonEmpty` tag is\n"
"   always set to `False`.\n"
msgstr ""

#. type: Bullet: '   1. '
#: ../src/Tutorial/IO.md:768
#, no-wrap
msgid "Declare and implement function `head` for non-empty lists:\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:772
#, no-wrap
msgid ""
"      ```idris\n"
"      head : List01 True a -> a\n"
"      ```\n"
msgstr ""

#. type: Bullet: '   2. '
#: ../src/Tutorial/IO.md:776
#, no-wrap
msgid ""
"Declare and implement function `weaken` for converting any `List01 ne a`\n"
"to a `List01 False a` of the same length and order\n"
"of values.\n"
msgstr ""

#. type: Bullet: '   3. '
#: ../src/Tutorial/IO.md:779
#, no-wrap
msgid ""
"Declare and implement function `tail` for extracting the possibly\n"
"empty tail from a non-empty list.\n"
msgstr ""

#. type: Bullet: '   4. '
#: ../src/Tutorial/IO.md:784
#, no-wrap
msgid ""
"Implement function `(++)` for concatenating two\n"
"values of type `List01`. Note, how we use a type-level computation\n"
"to make sure the result is non-empty if and only if\n"
"at least one of the two arguments is non-empty:\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:788
#, no-wrap
msgid ""
"      ```idris\n"
"      (++) : List01 b1 a -> List01 b2 a -> List01 (b1 || b2) a\n"
"      ```\n"
msgstr ""

#. type: Bullet: '   5. '
#: ../src/Tutorial/IO.md:794
#, no-wrap
msgid ""
"Implement utility function `concat'` and use it in\n"
"the implementation of `concat`. Note, that in `concat` the\n"
"two boolean tags are passed as unrestricted implicits,\n"
"since you will need to pattern match on these to determine\n"
"whether the result is provably non-empty or not:\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:797
#, no-wrap
msgid ""
"      ```idris\n"
"      concat' : List01 ne1 (List01 ne2 a) -> List01 False a\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:802
#, no-wrap
msgid ""
"      concat :  {ne1, ne2 : _}\n"
"             -> List01 ne1 (List01 ne2 a)\n"
"             -> List01 (ne1 && ne2) a\n"
"      ```\n"
msgstr ""

#. type: Bullet: '   6. '
#: ../src/Tutorial/IO.md:804
#, no-wrap
msgid "Implement `map01`:\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:808
#, no-wrap
msgid ""
"      ```idris\n"
"      map01 : (a -> b) -> List01 ne a -> List01 ne b\n"
"      ```\n"
msgstr ""

#. type: Bullet: '   7. '
#: ../src/Tutorial/IO.md:811
#, no-wrap
msgid ""
"Implement a custom *bind* operator in namespace `List01`\n"
"for sequencing computations returning `List01`s.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:814
#, no-wrap
msgid ""
"      Hint: Use `map01` and `concat` in your implementation and\n"
"      make sure to use unrestricted implicits where necessary.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:817
#, no-wrap
msgid ""
"      You can use the following examples to test your\n"
"      custom *bind* operator:\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:823
#, no-wrap
msgid ""
"      ```idris\n"
"      -- this and lf are necessary to make sure, which tag to use\n"
"      -- when using list literals\n"
"      lt : List01 True a -> List01 True a\n"
"      lt = id\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:826
#, no-wrap
msgid ""
"      lf : List01 False a -> List01 False a\n"
"      lf = id\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:833
#, no-wrap
msgid ""
"      test : List01 True Integer\n"
"      test = List01.do\n"
"        x  <- lt [1,2,3]\n"
"        y  <- lt [4,5,6,7]\n"
"        op <- lt [(*), (+), (-)]\n"
"        [op x y]\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:841
#, no-wrap
msgid ""
"      test2 : List01 False Integer\n"
"      test2 = List01.do\n"
"        x  <- lt [1,2,3]\n"
"        y  <- Nil {a = Integer}\n"
"        op <- lt [(*), (+), (-)]\n"
"        lt [op x y]\n"
"      ```\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:857
#, no-wrap
msgid ""
"Some notes on Exercise 2: Here, we combined the capabilities\n"
"of `List` and `Data.List1` in a single indexed type family.\n"
"This allowed us to treat list concatenation correctly: If\n"
"at least one of the arguments is provably non-empty, the\n"
"result is also non-empty. To tackle this correctly with\n"
"`List` and `List1`, a total of four concatenation functions\n"
"would have to be written. So, while it is often possible to\n"
"define distinct data types instead of indexed families,\n"
"the latter allow us to perform type-level computations to\n"
"be more precise about the pre- and postconditions of the functions\n"
"we write, at the cost of more-complex type signatures.\n"
"In addition, sometimes it's not possible to derive the\n"
"values of the indices from pattern matching on the data\n"
"values alone, so they have to be passed as unerased\n"
"(possibly implicit) arguments.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:864
#, no-wrap
msgid ""
"Please remember, that *do blocks* are first desugared, before\n"
"type-checking, disambiguating which *bind* operator to use,\n"
"and filling in implicit arguments. It is therefore perfectly fine\n"
"to define *bind* operators with arbitrary constraints or\n"
"implicit arguments as was shown above. Idris will handle\n"
"all the details, *after* desugaring the *do blocks*.\n"
msgstr ""

#. type: Title ##
#: ../src/Tutorial/IO.md:865
#, no-wrap
msgid "Working with Files"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:872
#, no-wrap
msgid ""
"Module `System.File` from the *base* library exports utilities necessary\n"
"to work with file handles and read and write from and to files. When\n"
"you have a file path (for instance \"/home/hock/idris/tutorial/tutorial.ipkg\"),\n"
"the first thing we will typically do is to try and create a file handle\n"
"(of type `System.File.File` by calling `fileOpen`).\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:874
#, no-wrap
msgid "Here is a program for counting all empty lines in a Unix/Linux-file:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:875
#, no-wrap
msgid ""
"covering\n"
"countEmpty : (path : String) -> IO (Either FileError Nat)\n"
"countEmpty path = openFile path Read >>= either (pure . Left) (go 0)\n"
"  where covering go : Nat -> File -> IO (Either FileError Nat)\n"
"        go k file = do\n"
"          False <- fEOF file | True => closeFile file $> Right k\n"
"          Right \"\\n\" <- fGetLine file\n"
"            | Right _  => go k file\n"
"            | Left err => closeFile file $> Left err\n"
"          go (k + 1) file\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:894
#, no-wrap
msgid ""
"In the example above, I invoked `(>>=)` without starting a *do block*.\n"
"Make sure you understand what's going on here. Reading concise functional\n"
"code is important in order to understand other people's code.\n"
"Have a look at function `either` at the REPL, try figuring out what\n"
"`(pure . Left)` does, and note how we use a curried version of `go`\n"
"as the second argument to `either`.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:905
#, no-wrap
msgid ""
"Function `go` calls for some additional explanations. First, note how\n"
"we used the same syntax for pattern matching intermediary results\n"
"as we also saw for `let` bindings. As you can see, we can use several\n"
"vertical bars to handle more than one additional pattern. In order to\n"
"read a single line from a file, we use function `fGetLine`. As with\n"
"most operations working with the file system, this function might fail\n"
"with a `FileError`, which we have to handle correctly. Note also, that\n"
"`fGetLine` will return the line including its trailing newline character\n"
"`'\\n'`, so in order to check for empty lines, we have to match against\n"
"`\"\\n\"` instead of the empty string `\"\"`.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:910
#, no-wrap
msgid ""
"Finally, `go` is not provably total and rightfully so.\n"
"Files like `/dev/urandom` or `/dev/zero` provide infinite\n"
"streams of data, so `countEmpty` will never\n"
"terminate when invoked with such a file path.\n"
msgstr ""

#. type: Title ###
#: ../src/Tutorial/IO.md:911
#, no-wrap
msgid "Safe Resource Handling"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:919
#, no-wrap
msgid ""
"Note, how we had to manually open and close the file handle in\n"
"`countEmpty`. This is error-prone and tedious. Resource handling\n"
"is a big topic, and we definitely won't be going into the\n"
"details here, but there is a convenient function exported\n"
"from `System.File`: `withFile`, which handles the opening,\n"
"closing and handling of file errors for us.\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:920
#, no-wrap
msgid ""
"covering\n"
"countEmpty' : (path : String) -> IO (Either FileError Nat)\n"
"countEmpty' path = withFile path Read pure (go 0)\n"
"  where covering go : Nat -> File -> IO (Either FileError Nat)\n"
"        go k file = do\n"
"          False <- fEOF file | True => pure (Right k)\n"
"          Right \"\\n\" <- fGetLine file\n"
"            | Right _  => go k file\n"
"            | Left err => pure (Left err)\n"
"          go (k + 1) file\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:937
#, no-wrap
msgid ""
"Go ahead, and have a look at the type of `withFile`, then\n"
"have a look how we use it to simplify the implementation of\n"
"`countEmpty'`. Reading and understanding slightly more complex\n"
"function types is important when learning to program in Idris.\n"
msgstr ""

#. type: Title ####
#: ../src/Tutorial/IO.md:938
#, no-wrap
msgid "Interface `HasIO`"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:948
#, no-wrap
msgid ""
"When you look at the `IO` functions we used so far, you'll\n"
"notice that most if not all of them actually don't work\n"
"with `IO` itself but with a type parameter `io` with a\n"
"constraint of `HasIO`. This interface allows us to *lift*\n"
"a value of type `IO a` into another context. We will see\n"
"use cases for this in later chapters, especially when we\n"
"talk about monad transformers. For now, you can treat these\n"
"`io` parameters as being specialized to `IO`.\n"
msgstr ""

#. type: Bullet: '1. '
#: ../src/Tutorial/IO.md:959
#, no-wrap
msgid ""
"As we have seen in the examples above, `IO` actions\n"
"working with file handles often come with the risk\n"
"of failure. We can therefore simplify things by\n"
"writing some utility functions and a custom *bind*\n"
"operator to work with these nested effects. In\n"
"a new namespace `IOErr`, implement the following\n"
"utility functions and use these to further cleanup\n"
"the implementation of `countEmpty'`:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:960
#, no-wrap
msgid ""
"   pure : a -> IO (Either e a)\n"
"\n"
"   fail : e -> IO (Either e a)\n"
"\n"
"   lift : IO a -> IO (Either e a)\n"
"\n"
"   catch : IO (Either e1 a) -> (e1 -> IO (Either e2 a)) -> IO (Either e2 a)\n"
"\n"
"   (>>=) : IO (Either e a) -> (a -> IO (Either e b)) -> IO (Either e b)\n"
"\n"
"   (>>) : IO (Either e ()) -> Lazy (IO (Either e a)) -> IO (Either e a)\n"
msgstr ""

#. type: Bullet: '2. '
#: ../src/Tutorial/IO.md:977
#, no-wrap
msgid ""
"Write a function `countWords` for counting the words in a file.\n"
"Consider using `Data.String.words` and the utilities from\n"
"exercise 1 in your implementation.\n"
msgstr ""

#. type: Bullet: '3. '
#: ../src/Tutorial/IO.md:983
#, no-wrap
msgid ""
"We can generalize the functionality used in `countEmpty`\n"
"and `countWords`, by implementing a helper function for\n"
"iterating over the lines in a file and accumulating some\n"
"state along the way. Implement `withLines` and use it to\n"
"reimplement `countEmpty` and `countWords`:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:984
#, no-wrap
msgid ""
"   covering\n"
"   withLines :  (path : String)\n"
"             -> (accum : s -> String -> s)\n"
"             -> (initialState : s)\n"
"             -> IO (Either FileError s)\n"
msgstr ""

#. type: Bullet: '4. '
#: ../src/Tutorial/IO.md:996
#, no-wrap
msgid ""
"We often use a `Monoid` for accumulating values.\n"
"It is therefore convenient to specialize `withLines`\n"
"for this case. Use `withLines` to implement\n"
"`foldLines` according to the type given below:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Tutorial/IO.md:997
#, no-wrap
msgid ""
"   covering\n"
"   foldLines :  Monoid s\n"
"             => (path : String)\n"
"             -> (f    : String -> s)\n"
"             -> IO (Either FileError s)\n"
msgstr ""

#. type: Bullet: '5. '
#: ../src/Tutorial/IO.md:1012
#, no-wrap
msgid ""
"Implement function `wordCount` for counting\n"
"the number of lines, words, and characters in\n"
"a text document. Define a custom record type\n"
"together with an implementation of `Monoid`\n"
"for storing and accumulating these values\n"
"and use `foldLines` in your implementation of\n"
"`wordCount`.\n"
msgstr ""

#. type: Title ##
#: ../src/Tutorial/IO.md:1013
#, no-wrap
msgid "How `IO` is Implemented"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1019
#, no-wrap
msgid ""
"In this final section of an already lengthy chapter, we will risk\n"
"a glance at how `IO` is implemented in Idris. It is interesting\n"
"to note, that `IO` is not a built-in type but a regular data type\n"
"with only one minor speciality. Let's learn about it at the REPL:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:1020
#, no-wrap
msgid ""
"Tutorial.IO> :doc IO\n"
"data PrimIO.IO : Type -> Type\n"
"  Totality: total\n"
"  Constructor: MkIO : (1 _ : PrimIO a) -> IO a\n"
"  Hints:\n"
"    Applicative IO\n"
"    Functor IO\n"
"    HasLinearIO IO\n"
"    Monad IO\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1037
#, no-wrap
msgid ""
"Here, we learn that `IO` has a single data constructor\n"
"called `MkIO`, which takes a single argument of type\n"
"`PrimIO a` with quantity *1*. We are not going to\n"
"talk about the quantities here, as in fact they are not\n"
"important to understand how `IO` works.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1039
#, no-wrap
msgid "Now, `PrimIO a` is a type alias for the following function:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:1040
#, no-wrap
msgid ""
"Tutorial.IO> :printdef PrimIO\n"
"PrimIO.PrimIO : Type -> Type\n"
"PrimIO a = (1 _ : %World) -> IORes a\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1049
#, no-wrap
msgid ""
"Again, don't mind the quantities. There is only\n"
"one piece of the puzzle missing: `IORes a`, which is\n"
"a publicly exported record type:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:1050
#, no-wrap
msgid ""
"Solutions.IO> :doc IORes\n"
"data PrimIO.IORes : Type -> Type\n"
"  Totality: total\n"
"  Constructor: MkIORes : a -> (1 _ : %World) -> IORes a\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1059
#, no-wrap
msgid ""
"So, to put this all together, `IO` is a wrapper around\n"
"something similar to the following function type:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/IO.md:1060
#, no-wrap
msgid "%World -> (a, %World)\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1072
#, no-wrap
msgid ""
"You can think of type `%World` as a placeholder for the\n"
"state of the outside world of a program (file system,\n"
"memory, network connections, and so on). Conceptually,\n"
"to execute an `IO a` action, we pass it the current state\n"
"of the world, and in return get an updated world state\n"
"plus a result of type `a`. The world state being updated\n"
"represents all the side effects describable in a computer\n"
"program.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1088
#, no-wrap
msgid ""
"Now, it is important to understand that there is no such\n"
"thing as the *state of the world*. The `%World` type is\n"
"just a placeholder, which is converted to some kind of\n"
"constant that's passed around and never inspected at\n"
"runtime. So, if we had a value of type `%World`, we could\n"
"pass it to an `IO a` action and execute it, and this is\n"
"exactly what happens at runtime: A single value of\n"
"type `%World` (an uninteresting placeholder like `null`,\n"
"`0`, or - in case of the JavaScript backends - `undefined`)\n"
"is passed to the `main` function, thus\n"
"setting the whole program in motion. However, it\n"
"is impossible to programmatically create a value of\n"
"type `%World` (it is an abstract, primitive type), and\n"
"therefore we cannot ever extract a value of type `a`\n"
"from an `IO a` action (modulo `unsafePerformIO`).\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1094
#, no-wrap
msgid ""
"Once we will talk about monad transformers and the state\n"
"monad, you will see that `IO` is nothing else but\n"
"a state monad in disguise but with an abstract state\n"
"type, which makes it impossible for us to run the\n"
"stateful computation.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:1099
#, no-wrap
msgid ""
"Values of type `IO a` describe programs with side effects,\n"
"which will eventually result in a value of type `a`.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:1104
#, no-wrap
msgid ""
"While we cannot safely extract a value of type `a`\n"
"from an `IO a`, we can use several combinators and\n"
"syntactic constructs to combine `IO` actions and\n"
"build more-complex programs.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:1107
#, no-wrap
msgid ""
"*Do blocks* offer a convenient way to run and combine\n"
"`IO` actions sequentially.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:1110
#, no-wrap
msgid ""
"*Do blocks* are desugared to nested applications of\n"
"*bind* operators (`(>>=)`).\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:1114
#, no-wrap
msgid ""
"*Bind* operators, and thus *do blocks*, can be overloaded\n"
"to achieve custom behavior instead of the default\n"
"(monadic) *bind*.\n"
msgstr ""

#. type: Bullet: '* '
#: ../src/Tutorial/IO.md:1117
#, no-wrap
msgid ""
"Under the hood, `IO` actions are stateful computations\n"
"operating on a symbolic `%World` state.\n"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/IO.md:1123
#, no-wrap
msgid ""
"Now, that we had a glimpse at *monads* and the *bind* operator,\n"
"it is time to in the [next chapter](Functor.md) introduce `Monad` and some\n"
"related interfaces for real.\n"
msgstr ""
