# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2025-05-15 04:14+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ####
#: ../src/Tutorial/DataTypes.md:53 ../src/Appendices/QTT.md:318
#, no-wrap
msgid "Pattern Matching"
msgstr ""

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:1319 ../src/Tutorial/Dependent.md:872
#: ../src/Tutorial/DPair.md:1191 ../src/Tutorial/Eq.md:1085
#: ../src/Tutorial/Folds.md:1051 ../src/Tutorial/Functions1.md:524
#: ../src/Tutorial/Functions2.md:924 ../src/Tutorial/Functor.md:1398
#: ../src/Tutorial/Interfaces.md:792 ../src/Tutorial/IO.md:1095
#: ../src/Tutorial/Predicates.md:1358 ../src/Tutorial/Traverse.md:1109
#: ../src/Appendices/Install.md:102 ../src/Appendices/Neovim.md:364
#: ../src/Appendices/Projects.md:878 ../src/Appendices/QTT.md:442
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Tutorial/Eq.md:404 ../src/Appendices/QTT.md:76
#, no-wrap
msgid ""
" 0 b : Type\n"
" 0 a : Type\n"
"   xs : List a\n"
"   f : a -> b\n"
"   x : a\n"
"   prf : length xs = length (map f xs)\n"
"------------------------------\n"
"mll1 : S (length xs) = S (length (map f xs))\n"
msgstr ""

#. type: Title #
#: ../src/Appendices/QTT.md:1
#, no-wrap
msgid "A Deep Dive into Quantitative Type Theory"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:4
#, no-wrap
msgid "*This section was guest-written by [Kiana Sheibani](https://github.com/kiana-S).*\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:9
#, no-wrap
msgid ""
"In the tutorial proper, when discussing functions, Idris 2's quantity\n"
"system was introduced. The description was intentionally a bit\n"
"simplified - the inner workings of quantities are complicated, and\n"
"that complication would have only confused any newcomers to Idris 2.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:18
#, no-wrap
msgid ""
"Here, I'll provide a more proper and thorough treatment of\n"
"Quantitative Type Theory (QTT), including how quantity checking is\n"
"performed and the theory behind it. Most of the information here will\n"
"be unnecessary for understanding and writing Idris programs, and you\n"
"are free to keep thinking about quantities like they were explained\n"
"before. When working with quantities in their full complexity,\n"
"however, a better understanding of how they work can be helpful to\n"
"avoid misconceptions.\n"
msgstr ""

#. type: Title ##
#: ../src/Appendices/QTT.md:19
#, no-wrap
msgid "The Quantity Semiring"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:26
#, no-wrap
msgid ""
"Quantitative Type Theory, as you probably already know, uses a set of\n"
"quantities. The core theory allows for any quantities to be used, but\n"
"Idris 2 in particular has three: erased, linear, and unrestricted.\n"
"These are usually written as `0`, `1`, and `ω` (the Greek lowercase\n"
"omega) respectively.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:34
#, no-wrap
msgid ""
"As QTT requires, these three quantities are equipped with the\n"
"structure of an *ordered semiring*. The exact mathematical details of\n"
"what that means aren't important; what it means for us is that\n"
"quantities can be added and multiplied together, and that there is an\n"
"ordering relation on them. Here are the tables for each of these\n"
"operations, where the first argument is on the left and the second is\n"
"on the top:\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:36
#, no-wrap
msgid "**Addition**\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:42
#, no-wrap
msgid ""
"| `+`     | `0` | `1` | `ω` |\n"
"|:-------:|:---:|:---:|:---:|\n"
"| **`0`** | `0` | `1` | `ω` |\n"
"| **`1`** | `1` | `ω` | `ω` |\n"
"| **`ω`** | `ω` | `ω` | `ω` |\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:44
#, no-wrap
msgid "**Multiplication**\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:50
#, no-wrap
msgid ""
"| `*`     | `0` | `1` | `ω` |\n"
"|:-------:|:---:|:---:|:---:|\n"
"| **`0`** | `0` | `0` | `0` |\n"
"| **`1`** | `0` | `1` | `ω` |\n"
"| **`ω`** | `0` | `ω` | `ω` |\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:52
#, no-wrap
msgid "**Order**\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:58
#, no-wrap
msgid ""
"| `≤`     | `0`   | `1`   | `ω`  |\n"
"|:-------:|:-----:|:-----:|:----:|\n"
"| **`0`** | true  | false | true |\n"
"| **`1`** | false | true  | true |\n"
"| **`ω`** | false | false | true |\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:63
#, no-wrap
msgid ""
"These operations behave mostly how you might expect, with `0` and `1`\n"
"being the usual numbers and `ω` being a sort of \"infinity\" value. (We\n"
"have `1 + 1 = ω` instead of `2` because there isn't a `2` quantity in\n"
"our system.)\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:69
#, no-wrap
msgid ""
"There is one big difference in our ordering, though: `0 ≤ 1` is false!\n"
"We have that `0 ≤ ω` and `1 ≤ ω`, but not `0 ≤ 1`, or `1 ≤ 0` for that\n"
"matter. In the language of mathematics, we say that `0` and `1` are\n"
"*incomparable*. We'll get into why this is the case later, when we\n"
"talk about what these operations mean and how they're used.\n"
msgstr ""

#. type: Title ##
#: ../src/Appendices/QTT.md:70
#, no-wrap
msgid "Variables and Contexts"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:75
#, no-wrap
msgid ""
"In QTT, each variable in each context has an associated quantity.\n"
"These quantities can be plainly seen when inspecting holes in the\n"
"REPL. Here's an example from the tutorial:\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:89
#, no-wrap
msgid ""
"In this hole's context, The type variables `a` and `b` have `0`\n"
"quantity, while the others have `ω` quantity.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:92
#, no-wrap
msgid ""
"Since the context is what stores quantities, only names that appear in\n"
"the context can have a quantity, including:\n"
msgstr ""

#. type: Bullet: '- '
#: ../src/Appendices/QTT.md:96
#, no-wrap
msgid "Function/lambda parameters\n"
msgstr ""

#. type: Bullet: '- '
#: ../src/Appendices/QTT.md:96
#, no-wrap
msgid "Pattern matching bindings\n"
msgstr ""

#. type: Bullet: '- '
#: ../src/Appendices/QTT.md:96
#, no-wrap
msgid "`let` bindings\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:98
#, no-wrap
msgid "These do not appear in the context, and thus do NOT have quantities:\n"
msgstr ""

#. type: Bullet: '- '
#: ../src/Appendices/QTT.md:102
#, no-wrap
msgid "Top-level definitions\n"
msgstr ""

#. type: Bullet: '- '
#: ../src/Appendices/QTT.md:102
#, no-wrap
msgid "`where` definitions\n"
msgstr ""

#. type: Bullet: '- '
#: ../src/Appendices/QTT.md:102
#, no-wrap
msgid "All non-variable expressions\n"
msgstr ""

#. type: Title ###
#: ../src/Appendices/QTT.md:103
#, no-wrap
msgid "A Change in Perspective"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:111
#, no-wrap
msgid ""
"When writing Idris programs using holes, we tend to use a\n"
"top-to-bottom approach: we start with looking at the context for the\n"
"whole function, and then we look at smaller and smaller\n"
"sub-expressions as we fill in the code. This means that quantities in\n"
"the context tend to decrease over time - if the variable `x` has\n"
"quantity `1` and you use it once, the quantity will decrease to `0`.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:117
#, no-wrap
msgid ""
"When looking at how typechecking works, however, it's more natural to\n"
"look at contexts in the other direction, from smaller sub-expressions\n"
"to larger ones. This means that the quantities we're looking at will\n"
"tend to increase instead. As an example, let's look at this simple\n"
"function:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:118
#, no-wrap
msgid ""
"square : Num a => a -> a\n"
"square x = x * x\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:125
#, no-wrap
msgid ""
"Let's first look at the context for the smallest sub-expression of\n"
"this function, just the variable `x`:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:126
#, no-wrap
msgid ""
" 0 a : Type\n"
" 1 x : a\n"
"------------------------------\n"
"x : a\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:134
#, no-wrap
msgid "Now let's look at the context for the larger expression `x * x`:\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:135
#, no-wrap
msgid ""
" 0 a : Type\n"
"   x : a\n"
"------------------------------\n"
"(x * x) : a\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:146
#, no-wrap
msgid ""
"The quantity of the parameter `x` increased from `1` to `ω`, since we\n"
"went from using it once to using it multiple times. When looking at\n"
"expressions like this, we can think of the quantity `q` as saying that\n"
"the variable is \"used `q` times\" in the expression.\n"
msgstr ""

#. type: Title ##
#: ../src/Appendices/QTT.md:147
#, no-wrap
msgid "Quantity Checking"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:153
#, no-wrap
msgid ""
"With all of that background information established, we can finally\n"
"see how quantity checking actually works. Let's follow what happens to\n"
"a single variable `x` in our context as we perform different\n"
"operations.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:158
#, no-wrap
msgid ""
"To illustrate how quantities evolve, I will provide Idris-style\n"
"context diagrams showing the various cases. In these, capital-letter\n"
"names `T`, `E`, etc. stand for any expression, and `q`, `r`, etc.\n"
"stand for any quantity.\n"
msgstr ""

#. type: Title ###
#: ../src/Appendices/QTT.md:159
#, no-wrap
msgid "Variables and Literals"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:161
#, no-wrap
msgid ""
" 1 x : T\n"
"------------------------------\n"
"x : T\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:171
#, no-wrap
msgid ""
"In the simplest case, an expression is just a single variable. That\n"
"variable will have quantity `1` in the context, while all others have\n"
"quantity `0`. (Other variables may also be missing entirely, which for\n"
"quantity checking is equivalent to them having `0` quantity.)\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:172
#, no-wrap
msgid ""
" 0 x : T\n"
"------------------------------\n"
"True : Bool\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:181
#, no-wrap
msgid ""
"For literals such as `1`, or constructors such as `True`, all\n"
"variables in the context have quantity 0, since all variables are used\n"
"0 times in a constructor.\n"
msgstr ""

#. type: Title ###
#: ../src/Appendices/QTT.md:182
#, no-wrap
msgid "Function Application"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:184
#, no-wrap
msgid ""
" qf x : T\n"
"------------------------------\n"
"F : (r _ : A) -> B\n"
"\n"
" qe x : T\n"
"------------------------------\n"
"E : A\n"
"\n"
" (qf + r*qe) x : T\n"
"------------------------------\n"
"(F E) : B\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:202
#, no-wrap
msgid ""
"This is the most complicated of QTT's rules. We have a function `F`\n"
"whose parameter has `r` quantity, and we're applying it to `E`. If our\n"
"variable `x` is used `qf` times in `F` and `qe` times in `E`, then it\n"
"is used `qf + r*qe` times in the full expression.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:207
#, no-wrap
msgid ""
"To better understand this rule, let's look at some simpler cases.\n"
"First, let's assume that `x` is not used in the function `F`, so that\n"
"`qf = 0`. Then, `x`'s full quantity is `r * qe`. For example, let's\n"
"look at these two functions:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:208
#, no-wrap
msgid ""
"f x = id x\n"
"\n"
"g x = id 1\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:221
#, no-wrap
msgid ""
"Here, `id` has type `a -> a`, where its input is unrestricted (`ω`).\n"
"In the first function, we can see that `x` is used once in the input\n"
"of `id`, so the quantity of `x` in the whole expression is `ω * 1 = ω`.\n"
"In the second function, `x` is used zero times in the input of\n"
"`id`, so its quantity in the whole expression is `ω * 0 = 0`. The\n"
"function `g` will typecheck if you mark its input as erased, but not\n"
"`f`.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:226
#, no-wrap
msgid ""
"As another simplified case, let's assume that `F` is a linear\n"
"function, meaning that `r = 1`. Then `x`'s full quantity is `qf + qe`,\n"
"the simple sum of the quantities of each part. Here's a function that\n"
"demonstrates this:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:227
#, no-wrap
msgid "ldup x = (#) x x\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:239
#, no-wrap
msgid ""
"The linear pair constructor `(#)` is linear in both arguments, so to\n"
"find the quantity of `x` in the full expression we can just add up the\n"
"quantities in each part. `x` is used zero times in `(#)` and one time\n"
"in `x`, so the total quantity is `0 + 1 + 1 = ω`. If the second `x`\n"
"were replaced by something else, like a literal, the quantity would\n"
"only be `0 + 1 + 0 = 1`. Intuitively, you can think of these as\n"
"\"parallel expressions\", and the addition operation tells you how\n"
"quantities combine in parallel.\n"
msgstr ""

#. type: Title ###
#: ../src/Appendices/QTT.md:240
#, no-wrap
msgid "Subusaging"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:242
#, no-wrap
msgid ""
" q x : T\n"
"------------------------------\n"
"E : T'\n"
"\n"
"(q ≤ r)\n"
"\n"
" r x : T\n"
"------------------------------\n"
"E : T'\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:259
#, no-wrap
msgid ""
"This rule is where the order relation on quantities comes in. It\n"
"allows us to convert a quantity in our context to another one, given\n"
"that the new context is greater than or equal to the old one. Type\n"
"theorists call this *subusaging*, as it lets us use variables less\n"
"often than we claim in our types.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:261
#, no-wrap
msgid "Subusaging is why this function definition is allowed:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:262
#, no-wrap
msgid ""
"ignore : a -> Int\n"
"ignore x = 42\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:270
#, no-wrap
msgid ""
"The input `x` is used zero times, which would normally mean its\n"
"quantity would have to be `0`; however, since `0 ≤ ω`, we can use\n"
"subusaging to increase the quantity to `ω`.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:274
#, no-wrap
msgid ""
"This also explains the mysterious fact we pointed out earlier, that\n"
"`0 ≰ 1` in our quantity ordering. If it were true that `0 ≤ 1`, then we\n"
"could also increase the quantity of `x` from `0` to `1`:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:275
#, no-wrap
msgid ""
"ignoreLinear : (1 x : a) -> Int\n"
"ignoreLinear x = 42\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:283
#, no-wrap
msgid ""
"This would mean that the quantity `1` would be for variables used *at\n"
"most* once, rather than *exactly* once. Idris's designers decided that\n"
"they wanted linearity to have the second meaning, not the first.\n"
msgstr ""

#. type: Title ###
#: ../src/Appendices/QTT.md:284
#, no-wrap
msgid "Lambdas and Other Bindings"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:286
#, no-wrap
msgid ""
" q x : A\n"
"------------------------------\n"
"E : B\n"
"\n"
"(\\q x => E) : (q x : A) -> B\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:301
#, no-wrap
msgid ""
"This rule is the most important, as it is the only one in which\n"
"quantities actually impact typechecking. It is also one of the most\n"
"straightforward: a lambda expression `\\q x => E` is only valid if `x`\n"
"is used `q` times inside `E`. This rule doesn't only apply to lambdas,\n"
"actually - it applies to any syntax where a variable that has a\n"
"quantity is bound, such as function parameters, `let`, `case`, `with`,\n"
"and so on.\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:302
#, no-wrap
msgid "let x = 1 in x + x\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:308
#, no-wrap
msgid ""
"To see how quantity checking would work with this let-expression, we\n"
"can simply desugar it into its equivalent lambda form:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:309
#, no-wrap
msgid "(\\x => x + x) 1\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:317
#, no-wrap
msgid ""
"An explicit quantity `q` isn't given for the lambda in this\n"
"expression, so Idris will try to infer the quantity, then check to see\n"
"if it's valid. In this case, Idris will infer that `x` is\n"
"unrestricted.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:324
#, no-wrap
msgid ""
"All of the binding constructs that this rule applies to support\n"
"pattern matching, so we need to determine how quantities interact with\n"
"patterns. To be more specific, if we have a function that\n"
"pattern-matches like this:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:325
#, no-wrap
msgid ""
"func : (1 _ : LPair a b) -> c\n"
"func (x # y) = ?impl\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:332
#, no-wrap
msgid ""
"How does the linear quantity of this function's input \"descend\" into\n"
"the bindings `x` and `y`?\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:337
#, no-wrap
msgid ""
"A simple rule is to apply the same function-application rule we looked\n"
"at earlier, but to the left side of the equation. For example, here's\n"
"how we compute the quantity required for `x` in this function\n"
"definition:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:338
#, no-wrap
msgid ""
"func      (((#)      x)       y)\n"
"  0 + 1 * (( 0 + 1 * 1) + 1 * 0)  = 1\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:349
#, no-wrap
msgid ""
"We start from the outside and work our way inwards, applying the\n"
"`qf + r*qe` rule as we go. `x` is used zero times in the constant\n"
"`func`, and its argument is linear. We know that `x` is used once\n"
"inside of the linear pair `(x # y)` (aside from being obvious, we can\n"
"compute this fact ourselves), so the number of times `x` must be used\n"
"in `func`'s definition is `0 + 1 * 1 = 1`.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:354
#, no-wrap
msgid ""
"The same argument applies to `y`, meaning that `y` should also be used\n"
"once inside of `func` for this definition to pass quantity checking.\n"
"And in fact, if we look at the context of the hole `?impl`, that's\n"
"exactly what we see!\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:355
#, no-wrap
msgid ""
" 0 a : Type\n"
" 0 b : Type\n"
" 0 c : Type\n"
" 1 x : a\n"
" 1 y : b\n"
"------------------------------\n"
"impl : c\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:370
#, no-wrap
msgid ""
"As a final note, pattern matching in Idris 2 is only allowed when the\n"
"value in question exists at runtime, meaning that it isn't erased.\n"
"This is because in QTT, a value must be constructed before it can be\n"
"pattern-matched: if you match on a variable `x`, the resources\n"
"required to make that variable's value are added to the total count.\n"
msgstr ""

#. type: Fenced code block (repl)
#: ../src/Appendices/QTT.md:371
#, no-wrap
msgid ""
" 1 x : T\n"
"------------------------------\n"
"x : T\n"
"\n"
" q x : T\n"
"------------------------------\n"
"E : T'\n"
"\n"
" (1 + q) x : T\n"
"------------------------------\n"
"(case x of ... => E) : T'\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:389
#, no-wrap
msgid ""
"For this reason, the total uses of the variable `x` when\n"
"pattern-matching on it must be `1 + q`, where `q` is the uses of `x`\n"
"after the pattern-match (`x` is still possible to use with an\n"
"as-pattern `x@...`). This prevents the quantity from being `0`.\n"
msgstr ""

#. type: Title ##
#: ../src/Appendices/QTT.md:390
#, no-wrap
msgid "The Erased Fragment"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:396
#, no-wrap
msgid ""
"Earlier I stated that only variables in the context can have\n"
"quantities, which in particular means top-level definitions cannot\n"
"have them. This is *mostly* true, but there is one slight exception: a\n"
"function can be marked as erased by placing a `0` before its name.\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:397
#, no-wrap
msgid ""
"0 erasedId : (0 x : a) -> a\n"
"erasedId x = x\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:408
#, no-wrap
msgid ""
"This tells the type system to define this function within the *erased\n"
"fragment*, which is a fragment of the type system wherein all quantity\n"
"checks are ignored. In the `erasedId` function above, we use the\n"
"function's input `x` once despite labeling it as erased. This would\n"
"normally result in a quantity error, but this function is allowed due\n"
"to being defined in the erased fragment.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:413
#, no-wrap
msgid ""
"This quantity freedom the erased fragment gives us comes with a big\n"
"drawback, though - erased functions are banned from being used at\n"
"runtime. In terms of the type theory, what this means is that an\n"
"erased function can only ever be used in these two places:\n"
msgstr ""

#. type: Bullet: '1. '
#: ../src/Appendices/QTT.md:416
#, no-wrap
msgid "Inside of another erased-fragment function or expression;\n"
msgstr ""

#. type: Bullet: '2. '
#: ../src/Appendices/QTT.md:416
#, no-wrap
msgid "Inside of a function argument that's erased:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:417
#, no-wrap
msgid ""
"constInt : (0 _ : a) -> Int\n"
"constInt _ = 2\n"
"\n"
"erased2 : Int\n"
"erased2 = constInt (erasedId 1)\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:427
#, no-wrap
msgid ""
"This makes sure that quantities are always handled correctly at\n"
"runtime, which is where it matters!\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:432
#, no-wrap
msgid ""
"There is another important place where the erased fragment comes into\n"
"play, and that's in type signatures. The type signatures of\n"
"definitions are always erased, so erased functions can be used inside\n"
"of them.\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/QTT.md:433
#, no-wrap
msgid ""
"erasedPrf : erasedId 0 = 0\n"
"erasedPrf = Refl\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:441
#, no-wrap
msgid ""
"For this reason, erased functions are sometimes thought of as\n"
"\"exclusively type-level functions\", though as we've seen, that's not\n"
"entirely accurate.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:453
#, no-wrap
msgid ""
"This concludes our thorough discussion of Quantitative Type Theory. In\n"
"this section, we learned about the various operations on quantities:\n"
"their addition, multiplication, and ordering. We saw how quantities\n"
"were linked to the context, and how to properly think about the\n"
"context when analyzing type systems (bottom-to-top instead of\n"
"top-to-bottom). We then moved on to studying QTT proper, and we saw\n"
"how the quantities in our context change as the expressions we write\n"
"grow more complex. Finally, we looked at the erased fragment, and how\n"
"we can define erased functions.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:462
#, no-wrap
msgid ""
"In Idris 2's current state, most of this information is still entirely\n"
"unnecessary for learning the language. That may not always be the\n"
"case, though: there have been some discussions to change the quantity\n"
"semiring that Idris 2 uses, or even to allow the programmer to choose\n"
"which set of quantities to use. Whether those discussions lead to\n"
"anything or not, it can still useful to better understand how\n"
"Quantitative Type Theory functions in order to write better Idris 2\n"
"code.\n"
msgstr ""

#. type: Title ###
#: ../src/Appendices/QTT.md:463
#, no-wrap
msgid "A Note on Mathematical Accuracy"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:471
#, no-wrap
msgid ""
"The information in this appendix is partially based on Robert Atkey's\n"
"2018 paper [Syntax and Semantics of Quantitative Type\n"
"Theory](https://bentnib.org/quantitative-type-theory.pdf), which\n"
"outlines QTT in the standard language of type theory. The QTT\n"
"presented in Atkey's paper is roughly similar to Idris 2's type system\n"
"except for these differences:\n"
msgstr ""

#. type: Bullet: '1. '
#: ../src/Appendices/QTT.md:478
#, no-wrap
msgid ""
"Atkey's theory does not have subusaging, and so the quantity\n"
"semiring in Atkey's paper is not ordered.\n"
msgstr ""

#. type: Bullet: '2. '
#: ../src/Appendices/QTT.md:478
#, no-wrap
msgid ""
"In Atkey's theory, types can only be constructed in the erased\n"
"fragment, which means it is impossible to construct a type at\n"
"runtime. Idris 2 allows constructing types at runtime, but still\n"
"uses the erased fragment when inside of type signatures.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:482
#, no-wrap
msgid ""
"To resolve these differences, I directly observed how Idris 2's type\n"
"system behaved in practice in order to determine where to deviate from\n"
"Atkey's paper.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:494
#, no-wrap
msgid ""
"While I tried to be as mathematically accurate as possible in this\n"
"section, some accuracy had to be sacrificed for the sake of\n"
"simplicity. In particular, the description of pattern matching given\n"
"here is substantially oversimplified. A proper formal treatment of\n"
"pattern matching would require introducing an eliminator function for\n"
"each datatype; this eliminator would serve to determine how that\n"
"datatype's constructors interacted with quantity checking. The details\n"
"of how this would work for a few simple types (such as the boolean\n"
"type `Bool`) are in Atkey's paper above. I did not include these\n"
"details because I decided that what I was describing was complicated\n"
"enough already.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/QTT.md:495
#, no-wrap
msgid "<!-- vi: filetype=idris2:syntax=markdown -->\n"
msgstr ""
