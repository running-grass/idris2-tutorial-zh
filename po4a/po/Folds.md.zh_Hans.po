# Chinese translations for po package
# Copyright (C) 2025 Free Software Foundation, Inc.
# This file is distributed under the same license as the po package.
# Automatically generated, 2025.
#
msgid ""
msgstr ""
"Project-Id-Version: po 4a\n"
"POT-Creation-Date: 2025-05-15 07:57+0000\n"
"PO-Revision-Date: 2025-05-15 03:06+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:261 ../src/Tutorial/Dependent.md:444
#: ../src/Tutorial/DPair.md:348 ../src/Tutorial/Eq.md:279
#: ../src/Tutorial/Folds.md:373 ../src/Tutorial/Functor.md:381
#: ../src/Tutorial/Interfaces.md:189 ../src/Tutorial/IO.md:317
#: ../src/Tutorial/Predicates.md:305 ../src/Tutorial/Prim.md:448
#: ../src/Tutorial/Traverse.md:247
#, no-wrap
msgid "Exercises part 1"
msgstr "练习第 1 部分"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:436 ../src/Tutorial/Dependent.md:623
#: ../src/Tutorial/DPair.md:653 ../src/Tutorial/Eq.md:555
#: ../src/Tutorial/Folds.md:668 ../src/Tutorial/Functor.md:965
#: ../src/Tutorial/Interfaces.md:352 ../src/Tutorial/IO.md:728
#: ../src/Tutorial/Predicates.md:672 ../src/Tutorial/Prim.md:711
#: ../src/Tutorial/Traverse.md:574
#, no-wrap
msgid "Exercises part 2"
msgstr "练习第 2 部分"

#. type: Title ###
#: ../src/Tutorial/DataTypes.md:742 ../src/Tutorial/Dependent.md:843
#: ../src/Tutorial/DPair.md:1128 ../src/Tutorial/Eq.md:826
#: ../src/Tutorial/Folds.md:988 ../src/Tutorial/Functor.md:1235
#: ../src/Tutorial/Interfaces.md:624 ../src/Tutorial/IO.md:949
#: ../src/Tutorial/Predicates.md:1020 ../src/Tutorial/Prim.md:935
#: ../src/Tutorial/Traverse.md:1016
#, no-wrap
msgid "Exercises part 3"
msgstr "练习第 3 部分"

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:1319 ../src/Tutorial/Dependent.md:872
#: ../src/Tutorial/DPair.md:1191 ../src/Tutorial/Eq.md:1085
#: ../src/Tutorial/Folds.md:1051 ../src/Tutorial/Functions1.md:524
#: ../src/Tutorial/Functions2.md:924 ../src/Tutorial/Functor.md:1398
#: ../src/Tutorial/Interfaces.md:792 ../src/Tutorial/IO.md:1095
#: ../src/Tutorial/Predicates.md:1358 ../src/Tutorial/Traverse.md:1109
#: ../src/Appendices/Install.md:102 ../src/Appendices/Neovim.md:364
#: ../src/Appendices/Projects.md:878 ../src/Appendices/QTT.md:442
#, no-wrap
msgid "Conclusion"
msgstr "结论"

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1368 ../src/Tutorial/Dependent.md:910
#: ../src/Tutorial/DPair.md:1206 ../src/Tutorial/Eq.md:1100
#: ../src/Tutorial/Folds.md:1064 ../src/Tutorial/Functions1.md:583
#: ../src/Tutorial/Functions2.md:964 ../src/Tutorial/Functor.md:1430
#: ../src/Tutorial/Interfaces.md:821 ../src/Tutorial/Intro.md:453
#: ../src/Tutorial/IO.md:1125 ../src/Tutorial/Predicates.md:1371
#: ../src/Tutorial/Prim.md:1410 ../src/Tutorial/Traverse.md:1148
#: ../src/Appendices/Neovim.md:374 ../src/Appendices/Projects.md:890
#, no-wrap
msgid ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"
msgstr ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Eq.md:842 ../src/Tutorial/Folds.md:996
#: ../src/Tutorial/Functor.md:417 ../src/Tutorial/Traverse.md:285
#, no-wrap
msgid ""
"   data Crud : (i : Type) -> (a : Type) -> Type where\n"
"     Create : (value : a) -> Crud i a\n"
"     Update : (id : i) -> (value : a) -> Crud i a\n"
"     Read   : (id : i) -> Crud i a\n"
"     Delete : (id : i) -> Crud i a\n"
msgstr ""
"   data Crud : (i : Type) -> (a : Type) -> Type where\n"
"     Create : (value : a) -> Crud i a\n"
"     Update : (id : i) -> (value : a) -> Crud i a\n"
"     Read   : (id : i) -> Crud i a\n"
"     Delete : (id : i) -> Crud i a\n"

#. type: Title #
#: ../src/Tutorial/Folds.md:1
#, no-wrap
msgid "Recursion and Folds"
msgstr "递归和折叠"

#. type: Plain text
#: ../src/Tutorial/Folds.md:12
msgid ""
"In this chapter, we are going to have a closer look at the computations we "
"typically perform with *container types*: Parameterized data types like "
"`List`, `Maybe`, or `Identity`, holding zero or more values of the "
"parameter's type. Many of these functions are recursive in nature, so we "
"start with a discourse about recursion in general, and tail recursion as an "
"important optimization technique in particular. Most recursive functions in "
"this part will describe pure iterations over lists."
msgstr ""
"在本章中，我们将仔细研究我们通常使用 *容器类型* 执行的计算：参数化数据类型，"
"如 `List`、`Maybe` 或 `Identity`，保存参数类型的零个或多个值。其中许多函数本"
"质上是递归的，因此我们首先讨论一般的递归，特别是尾递归作为一种重要的优化技"
"术。这部分中的大多数递归函数将描述列表上的纯迭代。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:17
msgid ""
"It is recursive functions, for which totality is hard to determine, so we "
"will next have a quick look at the totality checker and learn, when it will "
"refuse to accept a function as being total and what to do about this."
msgstr ""
"它是递归函数，其完全性很难确定，因此我们接下来将快速查看完全性检查器并了解它"
"何时会拒绝接受一个函数作为全函数以及如何处理。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:22
msgid ""
"Finally, we will start looking for common patterns in the recursive "
"functions from the first part and will eventually introduce a new interface "
"for consuming container types: Interface `Foldable`."
msgstr ""
"最后，我们将从第一部分开始寻找递归函数中的常见模式，并最终引入一个用于消费容"
"器类型的新接口：接口 `Foldable`。"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:23
#, no-wrap
msgid ""
"module Tutorial.Folds\n"
"\n"
"import Data.List1\n"
"import Data.Maybe\n"
"import Data.Vect\n"
"import Debug.Trace\n"
"\n"
"%default total\n"
msgstr ""
"module Tutorial.Folds\n"
"\n"
"import Data.List1\n"
"import Data.Maybe\n"
"import Data.Vect\n"
"import Debug.Trace\n"
"\n"
"%default total\n"

#. type: Title ##
#: ../src/Tutorial/Folds.md:34
#, no-wrap
msgid "Recursion"
msgstr "递归"

#. type: Plain text
#: ../src/Tutorial/Folds.md:38
msgid ""
"In this section, we are going to have a closer look at recursion in general "
"and at tail recursion in particular."
msgstr "在本节中，我们将仔细研究一般的递归，特别是尾递归。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:47
msgid ""
"Recursive functions are functions, which call themselves to repeat a task or "
"calculation until a certain aborting condition (called the *base case*) "
"holds.  Please note, that it is recursive functions, which make it hard to "
"verify totality: Non-recursive functions, which are *covering* (they cover "
"all possible cases in their pattern matches) are automatically total if they "
"only invoke other total functions."
msgstr ""
"递归函数是函数，它们调用自己来重复任务或计算，直到某个中止条件（称为 *基本情"
"况*）成立。请注意，它是递归函数，因此很难验证完全性：非递归函数，即 *全覆盖*"
"（它们涵盖了模式匹配中的所有可能情况）如果它们只调用其他函数，它们就会自动为"
"完全的。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:50
msgid ""
"Here is an example of a recursive function: It generates a list of the given "
"length filling it with identical values:"
msgstr "这是一个递归函数的例子：它生成一个给定长度的列表，用相同的值填充它："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:51
#, no-wrap
msgid ""
"replicateList : Nat -> a -> List a\n"
"replicateList 0     _ = []\n"
"replicateList (S k) x = x :: replicateList k x\n"
msgstr ""
"replicateList : Nat -> a -> List a\n"
"replicateList 0     _ = []\n"
"replicateList (S k) x = x :: replicateList k x\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:63
msgid ""
"As you can see (this module has the `%default total` pragma at the top), "
"this function is provably total. Idris verifies, that the `Nat` argument "
"gets *strictly smaller* in each recursive call, and that therefore, the "
"function *must* eventually come to an end. Of course, we can do the same "
"thing for `Vect`, where we can even show that the length of the resulting "
"vector matches the given natural number:"
msgstr ""
"正如你所看到的（这个模块在顶部有 `%default total` pragma），这个函数可以证明"
"是完全的。 Idris 验证 `Nat` 参数在每次递归调用中 *严格缩小*，因此，函数 *肯定"
"会* 最终结束。当然，我们可以对 `Vect` 做同样的事情，我们甚至可以证明结果向量"
"的长度与给定的自然数匹配："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:64
#, no-wrap
msgid ""
"replicateVect : (n : Nat) -> a -> Vect n a\n"
"replicateVect 0     _ = []\n"
"replicateVect (S k) x = x :: replicateVect k x\n"
msgstr ""
"replicateVect : (n : Nat) -> a -> Vect n a\n"
"replicateVect 0     _ = []\n"
"replicateVect (S k) x = x :: replicateVect k x\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:73
msgid ""
"While we often use recursion to *create* values of data types like `List` or "
"`Vect`, we also use recursion, when we *consume* such values.  For instance, "
"here is a function for calculating the length of a list:"
msgstr ""
"虽然我们经常使用递归来 *创建* 数据类型的值，例如 `List` 或 `Vect`，当我们 *使"
"用* 此类值时，我们也会使用递归，例如，这是一个计算列表长度的函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:74
#, no-wrap
msgid ""
"len : List a -> Nat\n"
"len []        = 0\n"
"len (_ :: xs) = 1 + len xs\n"
msgstr ""
"len : List a -> Nat\n"
"len []        = 0\n"
"len (_ :: xs) = 1 + len xs\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:82
msgid ""
"Again, Idris can verify that `len` is total, as the list we pass in the "
"recursive case is strictly smaller than the original list argument."
msgstr ""
"同样，Idris 可以验证 `len` 是完全的，因为我们在递归情况下传递的列表严格小于原"
"始列表参数。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:88
msgid ""
"But when is a recursive function non-total? Here is an example: The "
"following function creates a sequence of values until the given generation "
"function (`gen`) returns a `Nothing`. Note, how we use a *state* value (of "
"generic type `s`) and use `gen` to calculate a value together with the next "
"state:"
msgstr ""
"但是什么时候递归函数是非全部的？这是一个示例：以下函数创建一系列值，直到给定"
"的生成函数 (`gen`) 返回 `Nothing`。请注意，我们如何使用 *状态* 值（通用类型 "
"`s`）并使用 `gen` 来计算一个值以及下一个状态："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:89
#, no-wrap
msgid ""
"covering\n"
"unfold : (gen : s -> Maybe (s,a)) -> s -> List a\n"
"unfold gen vs = case gen vs of\n"
"  Just (vs',va) => va :: unfold gen vs'\n"
"  Nothing       => []\n"
msgstr ""
"covering\n"
"unfold : (gen : s -> Maybe (s,a)) -> s -> List a\n"
"unfold gen vs = case gen vs of\n"
"  Just (vs',va) => va :: unfold gen vs'\n"
"  Nothing       => []\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:103
msgid ""
"With `unfold`, Idris can't verify that any of its arguments is converging "
"towards the base case. It therefore rightfully refuses to accept that "
"`unfold` is total. And indeed, the following function produces an infinite "
"list (so please, don't try to inspect this at the REPL, as doing so will "
"consume all your computer's memory):"
msgstr ""
"使用 `unfold`，Idris 无法验证其任何论点是否收敛于基本情况。因此，它理所当然地"
"拒绝接受 `unfold` 是完全的。事实上，下面的函数会生成一个无限列表（所以请不要"
"尝试在 REPL 中检查它，因为这样做会消耗您计算机的所有内存）："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:104
#, no-wrap
msgid ""
"fiboHelper : (Nat,Nat) -> ((Nat,Nat),Nat)\n"
"fiboHelper (f0,f1) = ((f1, f0 + f1), f0)\n"
"\n"
"covering\n"
"fibonacci : List Nat\n"
"fibonacci = unfold (Just . fiboHelper) (1,1)\n"
msgstr ""
"fiboHelper : (Nat,Nat) -> ((Nat,Nat),Nat)\n"
"fiboHelper (f0,f1) = ((f1, f0 + f1), f0)\n"
"\n"
"covering\n"
"fibonacci : List Nat\n"
"fibonacci = unfold (Just . fiboHelper) (1,1)\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:117
msgid ""
"In order to safely create a (finite) sequence of Fibonacci numbers, we need "
"to make sure the function generating the sequence will stop after a finite "
"number of steps, for instance by limiting the length of the list:"
msgstr ""
"为了安全地创建一个（有限）斐波那契数列，我们需要确保生成该序列的函数将在有限"
"步数后停止，例如通过限制列表的长度："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:118
#, no-wrap
msgid ""
"unfoldTot : Nat -> (gen : s -> Maybe (s,a)) -> s -> List a\n"
"unfoldTot 0     _   _  = []\n"
"unfoldTot (S k) gen vs = case gen vs of\n"
"  Just (vs',va) => va :: unfoldTot k gen vs'\n"
"  Nothing       => []\n"
"\n"
"fibonacciN : Nat -> List Nat\n"
"fibonacciN n = unfoldTot n (Just . fiboHelper) (1,1)\n"
msgstr ""
"unfoldTot : Nat -> (gen : s -> Maybe (s,a)) -> s -> List a\n"
"unfoldTot 0     _   _  = []\n"
"unfoldTot (S k) gen vs = case gen vs of\n"
"  Just (vs',va) => va :: unfoldTot k gen vs'\n"
"  Nothing       => []\n"
"\n"
"fibonacciN : Nat -> List Nat\n"
"fibonacciN n = unfoldTot n (Just . fiboHelper) (1,1)\n"

#. type: Title ###
#: ../src/Tutorial/Folds.md:129
#, no-wrap
msgid "The Call Stack"
msgstr "调用栈"

#. type: Plain text
#: ../src/Tutorial/Folds.md:133
msgid ""
"In order to demonstrate what tail recursion is about, we require the "
"following `main` function:"
msgstr "为了演示尾递归是什么，我们需要以下 `main` 函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:134
#, no-wrap
msgid ""
"main : IO ()\n"
"main = printLn . len $ replicateList 10000 10\n"
msgstr ""
"main : IO ()\n"
"main = printLn . len $ replicateList 10000 10\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:144
msgid ""
"If you have [Node.js](https://nodejs.org/en/) installed on your system, you "
"might try the following experiment. Compile and run this module using the "
"*Node.js* backend of Idris instead of the default *Chez Scheme* backend and "
"run the resulting JavaScript source file with the Node.js binary:"
msgstr ""
"如果您的系统上安装了 [Node.js](https://nodejs.org/en/)，您可以尝试以下实验。"
"使用 Idris 的 *Node.js* 后端而不是默认的 *Chez Scheme* 后端编译并运行此模块，"
"并使用 Node.js 二进制文件运行生成的 JavaScript 源文件："

#. type: Fenced code block (sh)
#: ../src/Tutorial/Folds.md:145
#, no-wrap
msgid ""
"idris2 --cg node -o test.js --find-ipkg src/Tutorial/Folds.md\n"
"node build/exec/test.js\n"
msgstr ""
"idris2 --cg node -o test.js --find-ipkg -src/Tutorial/Folds.md\n"
"node build/exec/test.js\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:154
msgid ""
"Node.js will fail with the following error message and a lengthy stack "
"trace: `RangeError: Maximum call stack size exceeded`.  What's going on "
"here? How can it be that `main` fails with an exception although it is "
"provably total?"
msgstr ""
"Node.js 将失败并显示以下错误消息和冗长的堆栈跟踪：`RangeError: Maximum call "
"stack size exceeded`。这里发生了什么？ `main` 怎么会失败并出现异常，尽管它可"
"以证明是完全的？"

#. type: Plain text
#: ../src/Tutorial/Folds.md:169
msgid ""
"First, remember that a function being total means that it will eventually "
"produce a value of the given type in a finite amount of time, *given enough "
"resources like computer memory*. Here, `main` hasn't been given enough "
"resources as Node.js has a very small size limit on its call stack. The "
"*call stack* can be thought of as a stack data structure (first in, last "
"out), where nested function calls are put. In case of recursive functions, "
"the stack size increases by one with every recursive function call. In case "
"of our `main` function, we create and consume a list of length 10'000, so "
"the call stack will hold at least 10'000 function calls before they are "
"being invoked and the stack's size is reduced again. This exceeds Node.js's "
"stack size limit by far, hence the overflow error."
msgstr ""
"首先，记住一个函数是完全的意味着它最终会在有限的时间内产生一个给定类型的值，*"
"给定足够的资源，比如计算机内存*。在这里，`main` 没有获得足够的资源，因为 "
"Node.js 在其调用堆栈上的大小限制非常小。 *调用堆栈* 可以被认为是一个堆栈数据"
"结构（先进后出），其中放置了嵌套的函数调用。在递归函数的情况下，堆栈大小随着"
"每个递归函数调用而增加一。对于我们的 `main` 函数，我们创建并使用长度为 "
"10'000 的列表，因此调用堆栈将在调用之前至少保存 10'000 个函数调用，并且堆栈的"
"大小再次减小.这远远超出了 Node.js 的堆栈大小限制，因此出现了溢出错误。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:180
msgid ""
"Now, before we look at a solution how to circumvent this issue, please note "
"that this is a very serious and limiting source of bugs when using the "
"JavaScript backends of Idris. In Idris, having no access to control "
"structures like `for` or `while` loops, we *always* have to resort to "
"recursion in order to describe iterative computations. Luckily (or should I "
"say \"unfortunately\", since otherwise this issue would already have been "
"addressed with all seriousness), the Scheme backends don't have this issue, "
"as their stack size limit is much larger and they perform all kinds of "
"optimizations internally to prevent the call stack from overflowing."
msgstr ""
"现在，在我们研究如何规避此问题的解决方案之前，请注意，在使用 Idris 的 "
"JavaScript 后端时，这是一个非常严重且限制性的错误来源。在 Idris 中，由于无法"
"访问 `for` 或 `while` 循环等控制结构，我们 *总是* 必须求助于递归来描述迭代计"
"算。幸运的是（或者我应该说“不幸”，否则这个问题已经得到了严肃的解决），Scheme "
"后端没有这个问题，因为它们的堆栈大小限制要大得多，并且它们在内部执行各种优化"
"以防止调用堆栈溢出。"

#. type: Title ###
#: ../src/Tutorial/Folds.md:181
#, no-wrap
msgid "Tail Recursion"
msgstr "尾递归"

#. type: Plain text
#: ../src/Tutorial/Folds.md:187
msgid ""
"A recursive function is said to be *tail recursive*, if all recursive calls "
"occur at *tail position*: The last function call in a (sub)expression. For "
"instance, the following version of `len` is tail recursive:"
msgstr ""
"如果所有递归调用都发生在 *尾部位置* 处，则称递归函数为 *尾递归*：（子）表达式"
"中的最后一个函数调用。例如，以下版本的 `len` 是尾递归的："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:188
#, no-wrap
msgid ""
"lenOnto : Nat -> List a -> Nat\n"
"lenOnto k []        = k\n"
"lenOnto k (_ :: xs) = lenOnto (k + 1) xs\n"
msgstr ""
"lenOnto : Nat -> List a -> Nat\n"
"lenOnto k []        = k\n"
"lenOnto k (_ :: xs) = lenOnto (k + 1) xs\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:197
msgid ""
"Compare this to `len` as defined above: There, the last function call is an "
"invocation of operator `(+)`, and the recursive call happens in one of its "
"arguments:"
msgstr ""
"将此与上面定义的 `len` 进行比较：最后一个函数调用是对运算符 `(+)` 的调用，递"
"归调用发生在它的一个参数中："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Folds.md:198
#, no-wrap
msgid "len (_ :: xs) = 1 + len xs\n"
msgstr "len (_ :: xs) = 1 + len xs\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:204
msgid ""
"We can use `lenOnto` as a utility to implement a tail recursive version of "
"`len` without the additional `Nat` argument:"
msgstr ""
"我们可以使用 `lenOnto` 作为实用程序来实现 `len` 的尾递归版本，而无需额外的 "
"`Nat` 参数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:205
#, no-wrap
msgid ""
"lenTR : List a -> Nat\n"
"lenTR = lenOnto 0\n"
msgstr ""
"lenTR : List a -> Nat\n"
"lenTR = lenOnto 0\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:215
msgid ""
"This is a common pattern when writing tail recursive functions: We typically "
"add an additional function argument for accumulating intermediary results, "
"which is then passed on explicitly at each recursive call. For instance, "
"here is a tail recursive version of `replicateList`:"
msgstr ""
"这是编写尾递归函数时的常见模式：我们通常添加一个额外的函数参数来累积中间结"
"果，然后在每次递归调用时显式传递。例如，这里是 `replicateList` 的尾递归版本："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:216
#, no-wrap
msgid ""
"replicateListTR : Nat -> a -> List a\n"
"replicateListTR n v = go Nil n\n"
"  where go : List a -> Nat -> List a\n"
"        go xs 0     = xs\n"
"        go xs (S k) = go (v :: xs) k\n"
msgstr ""
"replicateListTR : Nat -> a -> List a\n"
"replicateListTR n v = go Nil n\n"
"  where go : List a -> Nat -> List a\n"
"        go xs 0     = xs\n"
"        go xs (S k) = go (v :: xs) k\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:229
msgid ""
"The big advantage of tail recursive functions is, that they can be easily "
"converted to efficient, imperative loops by the Idris compiler, and are thus "
"*stack safe*: Recursive function calls are *not* added to the call stack, "
"thus avoiding the dreaded stack overflow errors."
msgstr ""
"尾递归函数的一大优点是，它们可以通过 Idris 编译器轻松转换为高效的命令式循环，"
"因此是 *堆栈安全* 的：递归函数调用 *不会* 添加到调用堆栈，从而避免了可怕的堆"
"栈溢出错误。"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:230
#, no-wrap
msgid ""
"main1 : IO ()\n"
"main1 = printLn . lenTR $ replicateListTR 10000 10\n"
msgstr ""
"main1 : IO ()\n"
"main1 = printLn . lenTR $ replicateListTR 10000 10\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:240
msgid ""
"We can again run `main1` using the *Node.js* backend. This time, we use "
"slightly different syntax to execute a function other than `main` (Remember: "
"The dollar prefix is only there to distinghish a terminal command from its "
"output. It is not part of the command you enter in a terminal sesssion.):"
msgstr ""
"我们可以使用 *Node.js* 后端再次运行 `main1`。这一次，我们使用稍有不同的语法来"
"执行除 `main` 以外的函数（请记住：美元前缀仅用于将终端命令与其输出区分开来。"
"它不是您在终端会话输入的命令的一部分。）："

#. type: Fenced code block (sh)
#: ../src/Tutorial/Folds.md:241
#, no-wrap
msgid ""
"$ idris2 --cg node --exec main1 --find-ipkg src/Tutorial/Folds.md\n"
"10000\n"
msgstr ""
"$ idris2 --cg node --exec main1 --find-ipkg src/Tutorial/Folds.md\n"
"10000\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:248
msgid ""
"As you can see, this time the computation finished without overflowing the "
"call stack."
msgstr "如您所见，这次计算完成并没有溢出调用堆栈。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:253
msgid ""
"Tail recursive functions are allowed to consist of (possibly nested) pattern "
"matches, with recursive calls at tail position in several of the branches.  "
"Here is an example:"
msgstr ""
"尾递归函数允许由（可能是嵌套的）模式匹配组成，在几个分支的尾位置进行递归调"
"用。这是一个例子："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:254
#, no-wrap
msgid ""
"countTR : (a -> Bool) -> List a -> Nat\n"
"countTR p = go 0\n"
"  where go : Nat -> List a -> Nat\n"
"        go k []        = k\n"
"        go k (x :: xs) = case p x of\n"
"          True  => go (S k) xs\n"
"          False => go k xs\n"
msgstr ""
"countTR : (a -> Bool) -> List a -> Nat\n"
"countTR p = go 0\n"
"  where go : Nat -> List a -> Nat\n"
"        go k []        = k\n"
"        go k (x :: xs) = case p x of\n"
"          True  => go (S k) xs\n"
"          False => go k xs\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:266
msgid ""
"Note, how each invocation of `go` is in tail position in its branch of the "
"case expression."
msgstr "请注意，`go` 的每次调用如何在其 case 表达式的分支中处于尾部位置。"

#. type: Title ###
#: ../src/Tutorial/Folds.md:267
#, no-wrap
msgid "Mutual Recursion"
msgstr "相互递归"

#. type: Plain text
#: ../src/Tutorial/Folds.md:281
msgid ""
"It is sometimes convenient to implement several related functions, which "
"call each other recursively. In Idris, unlike in many other programming "
"languages, a function must be declared in a source file *before* it can be "
"called by other functions, as in general a function's implementation must be "
"available during type checking (because Idris has dependent types). There "
"are two ways around this, which actually result in the same internal "
"representation in the compiler. Our first option is to write down the "
"functions' declarations first with the implementations following after. "
"Here's a silly example:"
msgstr ""
"有时可以方便地实现几个相关的函数，它们以递归方式相互调用。在 Idris 中，与许多"
"其他编程语言不同，函数必须在源文件中声明 *之后* 才能被其他函数调用，因为通常"
"函数的实现必须在类型检查期间可用（因为 Idris 有依赖类型）。有两种方法可以解决"
"这个问题，它们实际上会在编译器中产生相同的内部表示。我们的第一个选择是先写下"
"函数的声明，然后是实现。这是一个愚蠢的例子："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:282
#, no-wrap
msgid ""
"even : Nat -> Bool\n"
"\n"
"odd : Nat -> Bool\n"
"\n"
"even 0     = True\n"
"even (S k) = odd k\n"
"\n"
"odd 0     = False\n"
"odd (S k) = even k\n"
msgstr ""
"even : Nat -> Bool\n"
"\n"
"odd : Nat -> Bool\n"
"\n"
"even 0     = True\n"
"even (S k) = odd k\n"
"\n"
"odd 0     = False\n"
"odd (S k) = even k\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:297
msgid ""
"As you can see, function `even` is allowed to call function `odd` in its "
"implementation, since `odd` has already been declared (but not yet "
"implemented)."
msgstr ""
"如您所见，函数 `even` 被允许在其实现中调用函数 `odd`，因为 `odd` 已经被声明"
"（但尚未实现）。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:302
msgid ""
"If you're like me and want to keep declarations and implementations next to "
"each other, you can introduce a `mutual` block, which has the same effect. "
"Like with other code blocks, functions in a `mutual` block must all be "
"indented by the same amount of whitespace:"
msgstr ""
"如果你和我一样，想保持声明和实现彼此相邻，你可以引入一个 `mutual` 块，它具有"
"相同的效果。与其他代码块一样，`mutual` 块中的函数必须全部缩进相同数量的空格："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:303
#, no-wrap
msgid ""
"mutual\n"
"  even' : Nat -> Bool\n"
"  even' 0     = True\n"
"  even' (S k) = odd' k\n"
"\n"
"  odd' : Nat -> Bool\n"
"  odd' 0     = False\n"
"  odd' (S k) = even' k\n"
msgstr ""
"mutual\n"
"  even' : Nat -> Bool\n"
"  even' 0     = True\n"
"  even' (S k) = odd' k\n"
"\n"
"  odd' : Nat -> Bool\n"
"  odd' 0     = False\n"
"  odd' (S k) = even' k\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:319
msgid ""
"Just like with single recursive functions, mutually recursive functions can "
"be optimized to imperative loops if all recursive calls occur at tail "
"position. This is the case with functions `even` and `odd`, as can again be "
"verified at the *Node.js* backend:"
msgstr ""
"就像单个递归函数一样，如果所有递归调用都发生在尾部位置，则可以将相互递归函数"
"优化为命令式循环。函数 `even` 和 `odd` 就是这种情况，可以在 *Node.js* 后端再"
"次验证："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:320
#, no-wrap
msgid ""
"main2 : IO ()\n"
"main2 =  printLn (even 100000)\n"
"      >> printLn (odd 100000)\n"
msgstr ""
"main2 : IO ()\n"
"main2 =  printLn (even 100000)\n"
"      >> printLn (odd 100000)\n"

#. type: Fenced code block (sh)
#: ../src/Tutorial/Folds.md:326
#, no-wrap
msgid ""
"$ idris2 --cg node --exec main2 --find-ipkg src/Tutorial/Folds.md\n"
"True\n"
"False\n"
msgstr ""
"$ idris2 --cg node --exec main2 --find-ipkg src/Tutorial/Folds.md\n"
"True\n"
"False\n"

#. type: Title ###
#: ../src/Tutorial/Folds.md:332
#, no-wrap
msgid "Final Remarks"
msgstr "最后的言论"

#. type: Plain text
#: ../src/Tutorial/Folds.md:336
msgid ""
"In this section, we learned about several important aspects of recursion and "
"totality checking, which are summarized here:"
msgstr "在本节中，我们了解了递归和完全性检查的几个重要方面，总结如下："

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:339
msgid ""
"In pure functional programming, recursion is the way to implement iterative "
"procedures."
msgstr "在纯函数式编程中，递归是实现迭代过程的方式。"

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:343
msgid ""
"Recursive functions pass the totality checker, if it can verify that one of "
"the arguments is getting strictly smaller in every recursive function call."
msgstr ""
"递归函数通过完全性检查器的条件为，如果它可以验证每个递归函数调用中的参数之一"
"严格收敛。"

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:346
msgid ""
"Arbitrary recursion can lead to stack overflow exceptions on backends with "
"small stack size limits."
msgstr "任意递归可能会导致堆栈大小限制较小的后端出现堆栈溢出异常。"

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:350
msgid ""
"The JavaScript backends of Idris perform mutual tail call optimization: Tail "
"recursive functions are converted to stack safe, imperative loops."
msgstr ""
"Idris 的 JavaScript 后端执行相互尾调用优化：尾递归函数被转换为堆栈安全的命令"
"式循环。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:354
msgid ""
"Note, that not all Idris backends you will come across in the wild will "
"perform tail call optimization. Please check the corresponding documentation."
msgstr ""
"请注意，并非您在野外遇到的所有 Idris 后端都会执行尾调用优化。请检查相应的文"
"档。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:372
msgid ""
"Note also, that most recursive functions in the core libraries (*prelude* "
"and *base*) do not yet make use of tail recursion. There is an important "
"reason for this: In many cases, non-tail recursive functions are easier to "
"use in compile-time proofs, as they unify more naturally than their tail "
"recursive counterparts.  Compile-time proofs are an important aspect of "
"programming in Idris (as we will see in later chapters), so there is a "
"compromise to be made between what performs well at runtime and what works "
"well at compile time. Eventually, the way to go might be to provide two "
"implementations for most recursive functions with a *transform rule* telling "
"the compiler to use the optimized version at runtime whenever programmers "
"use the non-optimized version in their code.  Such transform rules have - "
"for instance - already been written for functions `pack` and `unpack` (which "
"use `fastPack` and `fastUnpack` at runtime; see the corresponding rules in "
"[the following source file](https://github.com/idris-lang/Idris2/blob/main/"
"libs/prelude/Prelude/Types.idr))."
msgstr ""
"还要注意，核心库中的大多数递归函数（*prelude* 和 *base*）还没有使用尾递归。这"
"有一个重要原因：在许多情况下，非尾递归函数更容易在编译时证明中使用，因为它们"
"比尾递归对应物更自然地统一。编译时证明是 Idris 编程的一个重要方面（我们将在后"
"面的章节中看到），因此在运行时表现良好和编译时表现良好之间需要做出折衷。最"
"终，要走的路可能是为大多数递归函数提供两种实现，使用 *转换规则* 告诉编译器在"
"运行时使用优化版本，只要程序员在其代码中使用非优化版本。例如，已经为函数 "
"`pack` 和 `unpack` 编写了这样的转换规则（它们在运行时使用 `fastPack` 和 "
"`fastUnpack`；参见[以下源文件](https://github.com/idris-lang/Idris2/blob/"
"main/libs/prelude/Prelude/Types.idr)中的相应规则。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:379
msgid ""
"In these exercises you are going to implement several recursive functions. "
"Make sure to use tail recursion whenever possible and quickly verify the "
"correct behavior of all functions at the REPL."
msgstr ""
"在这些练习中，您将实现几个递归函数。确保尽可能使用尾递归，并快速验证 REPL 中"
"所有函数的正确行为。"

#. type: Bullet: '1. '
#: ../src/Tutorial/Folds.md:383
msgid ""
"Implement functions `anyList` and `allList`, which return `True` if any "
"element (or all elements in case of `allList`) in a list fulfills the given "
"predicate:"
msgstr ""
"实现函数 `anyList` 和 `allList`，如果列表中的任何元素（或 `allList` 的所有元"
"素）满足给定谓词："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:384
#, no-wrap
msgid ""
"   anyList : (a -> Bool) -> List a -> Bool\n"
"\n"
"   allList : (a -> Bool) -> List a -> Bool\n"
msgstr ""
"   anyList : (a -> Bool) -> List a -> Bool\n"
"\n"
"   allList : (a -> Bool) -> List a -> Bool\n"

#. type: Bullet: '2. '
#: ../src/Tutorial/Folds.md:392
msgid ""
"Implement function `findList`, which returns the first value (if any) "
"fulfilling the given predicate:"
msgstr "实现函数 `findList`，它返回满足给定谓词的第一个值（如果有）："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:393
#, no-wrap
msgid "   findList : (a -> Bool) -> List a -> Maybe a\n"
msgstr "   findList : (a -> Bool) -> List a -> Maybe a\n"

#. type: Bullet: '3. '
#: ../src/Tutorial/Folds.md:399
msgid ""
"Implement function `collectList`, which returns the first value (if any), "
"for which the given function returns a `Just`:"
msgstr ""
"实现函数 `collectList`，它返回第一个值（如果有），给定函数为此返回一个 "
"`Just`："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:400
#, no-wrap
msgid "   collectList : (a -> Maybe b) -> List a -> Maybe b\n"
msgstr "   collectList : (a -> Maybe b) -> List a -> Maybe b\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:405
#, no-wrap
msgid "   Implement `lookupList` in terms of `collectList`:\n"
msgstr "   根据 `collectList` 实现 `lookupList`：\n"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:406
#, no-wrap
msgid "   lookupList : Eq a => a -> List (a,b) -> Maybe b\n"
msgstr "   lookupList : Eq a => a -> List (a,b) -> Maybe b\n"

#. type: Bullet: '4. '
#: ../src/Tutorial/Folds.md:423
msgid ""
"For functions like `map` or `filter`, which must loop over a list without "
"affecting the order of elements, it is harder to write a tail recursive "
"implementation.  The safest way to do so is by using a `SnocList` (a "
"*reverse* kind of list that's built from head to tail instead of from tail "
"to head) to accumulate intermediate results. Its two constructors are `Lin` "
"and `(:<)` (called the *snoc* operator).  Module `Data.SnocList` exports two "
"tail recursive operators called *fish* and *chips* (`(<><)` and `(<>>)`) for "
"going from `SnocList` to `List` and vice versa. Have a look at the types of "
"all new data constructors and operators before continuing with the exercise."
msgstr ""
"对于像 `map` 或 `filter` 这样的函数，它们必须在不影响元素顺序的情况下循环遍历"
"列表，因此很难编写尾递归实现。最安全的方法是使用 `SnocList`（一种*反转*类别的"
"列表，从头到尾而不是从尾到头构建）来累积中间结果。它的两个构造函数是 `Lin` "
"和 `(:<)` （称为 *snoc* 运算符）。模块 `Data.SnocList` 导出两个尾递归运算符，"
"称为 *鱼* 和 *船* (`(<><)` 和 `(<>>)`) 用于从 `SnocList` 到 `List` ，反之亦"
"然。在继续练习之前，请查看所有新数据构造函数和运算符的类型。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:428
#, no-wrap
msgid ""
"   Implement a tail recursive version of `map` for `List`\n"
"   by using a `SnocList` to reassemble the mapped list. Use then\n"
"   the *chips* operator with a `Nil` argument to\n"
"   in the end convert the `SnocList` back to a `List`.\n"
msgstr ""
"   为 `List` 实现 `map` 的尾递归版本\n"
"   通过使用 `SnocList` 重新组装映射列表。然后使用\n"
"   带有 `Nil` 参数的 *chips* 运算符\n"
"   最后将 `SnocList` 转换回 `List`。\n"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:429
#, no-wrap
msgid "   mapTR : (a -> b) -> List a -> List b\n"
msgstr "   mapTR : (a -> b) -> List a -> List b\n"

#. type: Bullet: '5. '
#: ../src/Tutorial/Folds.md:437
msgid ""
"Implement a tail recursive version of `filter`, which only keeps those "
"values in a list, which fulfill the given predicate. Use the same technique "
"as described in exercise 4."
msgstr ""
"实现 `filter` 的尾递归版本，它只将那些值保存在列表中，满足给定的谓词。使用练"
"习 4 中描述的相同技术。"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:438
#, no-wrap
msgid "   filterTR : (a -> Bool) -> List a -> List a\n"
msgstr "   filterTR : (a -> Bool) -> List a -> List a\n"

#. type: Bullet: '6. '
#: ../src/Tutorial/Folds.md:445
msgid ""
"Implement a tail recursive version of `mapMaybe`, which only keeps those "
"values in a list, for which the given function argument returns a `Just`:"
msgstr ""
"实现 `mapMaybe` 的尾递归版本，它只将这些值保存在列表中，给定函数参数返回 "
"`Just`："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:446
#, no-wrap
msgid "   mapMaybeTR : (a -> Maybe b) -> List a -> List b\n"
msgstr "   mapMaybeTR : (a -> Maybe b) -> List a -> List b\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:451
#, no-wrap
msgid "   Implement `catMaybesTR` in terms of `mapMaybeTR`:\n"
msgstr "   根据 `mapMaybeTR` 实现 `catMaybesTR`：\n"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:452
#, no-wrap
msgid "   catMaybesTR : List (Maybe a) -> List a\n"
msgstr "   catMaybesTR : List (Maybe a) -> List a\n"

#. type: Bullet: '7. '
#: ../src/Tutorial/Folds.md:457
msgid "Implement a tail recursive version of list concatenation:"
msgstr "实现列表连接的尾递归版本："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:458
#, no-wrap
msgid "   concatTR : List a -> List a -> List a\n"
msgstr "   concatTR : List a -> List a -> List a\n"

#. type: Bullet: '8. '
#: ../src/Tutorial/Folds.md:464
msgid "Implement tail recursive versions of *bind* and `join` for `List`:"
msgstr "为 `List` 实现 *绑定* 和 `join` 的尾递归版本："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:465
#, no-wrap
msgid ""
"   bindTR : List a -> (a -> List b) -> List b\n"
"\n"
"   joinTR : List (List a) -> List a\n"
msgstr ""
"   bindTR : List a -> (a -> List b) -> List b\n"
"\n"
"   joinTR : List (List a) -> List a\n"

#. type: Title ##
#: ../src/Tutorial/Folds.md:471
#, no-wrap
msgid "A few Notes on Totality Checking"
msgstr "关于完全性检查的一些注意事项"

#. type: Plain text
#: ../src/Tutorial/Folds.md:482
msgid ""
"The totality checker in Idris verifies, that at least one (possibly erased!) "
"argument in a recursive call converges towards a base case. For instance, "
"with natural numbers, if the base case is zero (corresponding to data "
"constructor `Z`), and we continue with `k` after pattern matching on `S k`, "
"Idris can derive from `Nat`'s constructors, that `k` is strictly smaller "
"than `S k` and therefore the recursive call must converge towards a base "
"case.  Exactly the same reasoning is used when pattern matching on a list "
"and continuing only with its tail in the recursive call."
msgstr ""
"Idris 中的完全性检查器验证递归调用中的至少一个（可能已删除！）参数收敛于基本"
"情况。例如，对于自然数，如果基本情况为零（对应于数据构造函数 `Z`），我们在 "
"`S k` 上进行模式匹配后继续 `k` , Idris 可以从 `Nat` 的构造函数派生，即 `k` 严"
"格小于 `S k`，因此递归调用必须收敛于基本情况。当对列表进行模式匹配并仅在递归"
"调用中继续其尾部时，使用完全相同的推理。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:487
msgid ""
"While this works in many cases, it doesn't always go as expected.  Below, "
"I'll show you a couple of examples where totality checking fails, although "
"*we* know, that the functions in question are definitely total."
msgstr ""
"虽然这在许多情况下都有效，但并不总是按预期进行。下面，我将向您展示几个完全性"
"检查失败的示例，尽管 *我们* 知道，所讨论的函数肯定是完全的。"

#. type: Title ###
#: ../src/Tutorial/Folds.md:488
#, no-wrap
msgid "Case 1: Recursion over a Primitive"
msgstr "案例 1：在原语上递归"

#. type: Plain text
#: ../src/Tutorial/Folds.md:494
msgid ""
"Idris doesn't know anything about the internal structure of primitive data "
"types. So the following function, although being obviously total, will not "
"be accepted by the totality checker:"
msgstr ""
"Idris 对原语数据类型的内部结构一无所知。因此，以下函数虽然显然是完全的，但不"
"会被完全性检查器接受："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:495
#, no-wrap
msgid ""
"covering\n"
"replicatePrim : Bits32 -> a -> List a\n"
"replicatePrim 0 v = []\n"
"replicatePrim x v = v :: replicatePrim (x - 1) v\n"
msgstr ""
"covering\n"
"replicatePrim : Bits32 -> a -> List a\n"
"replicatePrim 0 v = []\n"
"replicatePrim x v = v :: replicatePrim (x - 1) v\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:514
msgid ""
"Unlike with natural numbers (`Nat`), which are defined as an inductive data "
"type and are only converted to integer primitives during compilation, Idris "
"can't tell that `x - 1` is strictly smaller than `x`, and so it fails to "
"verify that this must converge towards the base case.  (The reason is, that "
"`x - 1` is implemented in terms of primitive function `prim__sub_Bits32`, "
"which is built into the compiler and must be implemented by each backend "
"individually. The totality checker knows about data types, constructors, and "
"functions defined in Idris, but not about (primitive) functions and foreign "
"functions implemented at the backends. While it is theoretically possible to "
"also define and use laws for primitive and foreign functions, this hasn't "
"yet been done for most of them.)"
msgstr ""
"与自然数 (`Nat`) 不同，自然数被定义为归纳数据类型并且仅在编译期间转换为整数原"
"语，Idris 无法判断 `x - 1` 严格小于比 `x`，因此它无法验证这必须收敛到基本情"
"况。 （原因是 `x - 1` 是根据原始函数 `prim__sub_Bits32` 实现的，它内置在编译"
"器中，必须由每个后端单独实现。完全性检查器知道Idris 中定义的数据类型、构造函"
"数和函数，但与后端实现的（原语）函数和外部函数无关。虽然理论上也可以为原语函"
"数和外部函数定义和使用定律，但这还没有完成对于他们中的大多数情况。）"

#. type: Plain text
#: ../src/Tutorial/Folds.md:520
msgid ""
"Since non-totality is highly contagious (all functions invoking a partial "
"function are themselves considered to be partial by the totality checker), "
"there is utility function `assert_smaller`, which we can use to convince the "
"totality checker and still annotate our functions with the `total` keyword:"
msgstr ""
"由于非完全性具有高度传染性（所有调用偏函数的函数本身都被完全性检查器认为是不"
"完全的），所以有实用函数 `assert_smaller`，我们可以使用它来说服完全性检查器并"
"我们仍然使用 `total` 关键字注释函数："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:521
#, no-wrap
msgid ""
"replicatePrim' : Bits32 -> a -> List a\n"
"replicatePrim' 0 v = []\n"
"replicatePrim' x v = v :: replicatePrim' (assert_smaller x $ x - 1) v\n"
msgstr ""
"replicatePrim' : Bits32 -> a -> List a\n"
"replicatePrim' 0 v = []\n"
"replicatePrim' x v = v :: replicatePrim' (assert_smaller x $ x - 1) v\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:532
msgid ""
"Please note, though, that whenever you use `assert_smaller` to silence the "
"totality checker, the burden of proving totality rests on your shoulders. "
"Failing to do so can lead to arbitrary and unpredictable program behavior "
"(which is the default with most other programming languages)."
msgstr ""
"但是请注意，每当您使用 `assert_smaller` 来使完全性检查器静音时，证明完全性的"
"重任就落在了您的肩上。不这样做可能会导致任意和不可预测的程序行为（这是大多数"
"其他编程语言的默认设置）。"

#. type: Title ####
#: ../src/Tutorial/Folds.md:533
#, no-wrap
msgid "Ex Falso Quodlibet"
msgstr "Ex Falso Quodlibet"

#. type: Plain text
#: ../src/Tutorial/Folds.md:543
msgid ""
"Below - as a demonstration - is a simple proof of `Void`.  `Void` is an "
"*uninhabited type*: a type with no values.  *Proofing `Void`* means, that we "
"implement a function accepted by the totality checker, which returns a value "
"of type `Void`, although this is supposed to be impossible as there is no "
"such value. Doing so allows us to completely disable the type system "
"together with all the guarantees it provides.  Here's the code and its dire "
"consequences:"
msgstr ""
"下面 - 作为演示 - 是 `Void` 的简单证明。 `Void`是*无人居住的类型*：没有值的类"
"型。 *证明 `Void`* 意味着，我们实现了一个被完全性检查器接受的函数，它返回一个"
"类型为 `Void` 的值，尽管这应该是不可能的，因为没有这样的值.这样做可以让我们完"
"全禁用类型系统以及它提供的所有保证。这是代码及其可怕的后果："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:544
#, no-wrap
msgid ""
"-- In order to proof `Void`, we just loop forever, using\n"
"-- `assert_smaller` to silence the totality checker.\n"
"proofOfVoid : Bits8 -> Void\n"
"proofOfVoid n = proofOfVoid (assert_smaller n n)\n"
"\n"
"-- From a value of type `Void`, anything follows!\n"
"-- This function is safe and total, as there is no\n"
"-- value of type `Void`!\n"
"exFalsoQuodlibet : Void -> a\n"
"exFalsoQuodlibet _ impossible\n"
"\n"
"-- By passing our proof of void to `exFalsoQuodlibet`\n"
"-- (exported by the *Prelude* by the name of `void`), we\n"
"-- can coerce any value to a value of any other type.\n"
"-- This renders type checking completely useless, as\n"
"-- we can freely convert between values of different\n"
"-- types.\n"
"coerce : a -> b\n"
"coerce _ = exFalsoQuodlibet (proofOfVoid 0)\n"
"\n"
"-- Finally, we invoke `putStrLn` with a number instead\n"
"-- of a string. `coerce` allows us to do just that.\n"
"pain : IO ()\n"
"pain = putStrLn $ coerce 0\n"
msgstr ""
"-- 为了证明 `Void`，我们只是永远循环，使用\n"
"-- `assert_smaller` 使完全性检查器静音。\n"
"proofOfVoid : Bits8 -> Void\n"
"proofOfVoid n = proofOfVoid (assert_smaller n n)\n"
"\n"
"-- 从 `Void` 类型的值开始，任何东西都会出现！\n"
"-- 这个函数是安全和完全的，因为没有\n"
"-- `Void` 类型的值！\n"
"exFalsoQuodlibet : Void -> a\n"
"exFalsoQuodlibet _ impossible\n"
"\n"
"-- 通过将我们的无效证明传递给 `exFalsoQuodlibet`\n"
"--（由*Prelude*以`void`的名义导出），我们\n"
"-- 可以将任何值强制转换为任何其他类型的值。\n"
"-- 这使得类型检查完全没用，因为\n"
"-- 我们可以在不同的值之间自由转换\n"
"-- 类型。\n"
"coerce : a -> b\n"
"coerce _ = exFalsoQuodlibet (proofOfVoid 0)\n"
"\n"
"-- 最后，我们用一个数字调用 `putStrLn`\n"
"-- 而不是一个字符串。 `coerce` 允许我们这样做。\n"
"pain : IO ()\n"
"pain = putStrLn $ coerce 0\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:576
msgid ""
"Please take a moment to marvel at provably total function `coerce`: It "
"claims to convert *any* value to a value of *any* other type.  And it is "
"completely safe, as it only uses total functions in its implementation. The "
"problem is - of course - that `proofOfVoid` should never ever have been a "
"total function."
msgstr ""
"请花点时间惊叹于可证明的全函数 `coerce`：它声称将 *any* 值转换为 *any* 其他类"
"型的值。而且它是完全安全的，因为它在实现中只使用了全函数。问题是 - 当然 - "
"`proofOfVoid` 永远不应该是一个完全的函数。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:581
msgid ""
"In `pain` we use `coerce` to conjure a string from an integer.  In the end, "
"we get what we deserve: The program crashes with an error.  While things "
"could have been much worse, it can still be quite time consuming and "
"annoying to localize the source of such an error."
msgstr ""
"在 `pain` 中，我们使用 `coerce` 从整数变出一个字符串。最后，我们得到了我们应"
"得的：程序因错误而崩溃。尽管情况可能会更糟，但定位此类错误的来源仍然非常耗时"
"且令人讨厌。"

#. type: Fenced code block (sh)
#: ../src/Tutorial/Folds.md:582
#, no-wrap
msgid ""
"$ idris2 --cg node --exec pain --find-ipkg src/Tutorial/Folds.md\n"
"ERROR: No clauses\n"
msgstr ""
"$ idris2 --cg node --exec pain --find-ipkg src/Tutorial/Folds.md\n"
"ERROR: No clauses\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:590
msgid ""
"So, with a single thoughtless placement of `assert_smaller` we wrought havoc "
"within our pure and total codebase sacrificing totality and type safety in "
"one fell swoop. Therefore: Use at your own risk!"
msgstr ""
"因此，通过 `assert_smaller` 的一次轻率放置，我们在我们的纯代码库中造成了严重"
"破坏，一举牺牲了完全性和类型安全性。因此：使用风险自负！"

#. type: Plain text
#: ../src/Tutorial/Folds.md:594
msgid ""
"Note: I do not expect you to understand all the dark magic at work in the "
"code above. I'll explain the details in due time in another chapter."
msgstr ""
"注意：我不希望你理解上面代码中所有的黑魔法。我将在适当的时候在另一章中解释细"
"节。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:602
msgid ""
"Second note: *Ex falso quodlibet*, also called [the principle of explosion]"
"(https://en.wikipedia.org/wiki/Principle_of_explosion)  is a law in logic: "
"From a contradiction, any statement can be proven.  In our case, the "
"contradiction was our proof of `Void`: The claim that we wrote a total "
"function producing such a value, although `Void` is an uninhabited type.  "
"You can verify this by inspecting `Void` at the REPL with `:doc Void`: It "
"has no data constructors."
msgstr ""
"第二注：*Ex falso quodlibet*，也称为[爆炸原理](https://en.wikipedia.org/wiki/"
"Principle_of_explosion) 是经典逻辑中的一条定律：从矛盾中，任何陈述都可以被证"
"明。在我们的例子中，矛盾在于我们对 `Void` 的证明：声称我们编写了一个产生这样"
"一个值的全函数，尽管 `Void` 是一种无人居住的类型。您可以通过在 REPL 中使用 "
"`:doc Void` 检查 `Void` 来验证这一点：它没有数据构造函数。"

#. type: Title ###
#: ../src/Tutorial/Folds.md:603
#, no-wrap
msgid "Case 2: Recursion via Function Calls"
msgstr "案例 2：通过函数调用进行递归"

#. type: Plain text
#: ../src/Tutorial/Folds.md:608
msgid ""
"Below is an implementation of a [*rose tree*](https://en.wikipedia.org/wiki/"
"Rose_tree).  Rose trees can represent search paths in computer algorithms, "
"for instance in graph theory."
msgstr ""
"下面是 [*玫瑰树*](https://en.wikipedia.org/wiki/Rose_tree) 的实现。玫瑰树可以"
"表示计算机算法中的搜索路径，例如在图论中。"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:609
#, no-wrap
msgid ""
"record Tree a where\n"
"  constructor Node\n"
"  value  : a\n"
"  forest : List (Tree a)\n"
"\n"
"Forest : Type -> Type\n"
"Forest = List . Tree\n"
msgstr ""
"record Tree a where\n"
"  constructor Node\n"
"  value  : a\n"
"  forest : List (Tree a)\n"
"\n"
"Forest : Type -> Type\n"
"Forest = List . Tree\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:620
msgid "We could try and compute the size of such a tree as follows:"
msgstr "我们可以尝试计算这样一棵树的大小，如下所示："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:621
#, no-wrap
msgid ""
"covering\n"
"size : Tree a -> Nat\n"
"size (Node _ forest) = S . sum $ map size forest\n"
msgstr ""
"covering\n"
"size : Tree a -> Nat\n"
"size (Node _ forest) = S . sum $ map size forest\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:632
msgid ""
"In the code above, the recursive call happens within `map`. *We* know that "
"we are using only subtrees in the recursive calls (since we know how `map` "
"is implemented for `List`), but Idris can't know this (teaching a totality "
"checker how to figure this out on its own seems to be an open research "
"question). So it will refuse to accept the function as being total."
msgstr ""
"在上面的代码中，递归调用发生在 `map` 中。 *我们* 知道我们在递归调用中只使用子"
"树（因为我们知道 `map` 是如何为 `List` 实现的），但 Idris 不知道这一点（教一"
"个完全性检查器如何自己解决这个问题似乎是一个开放的研究问题）。所以它会拒绝接"
"受这个函数是完全的。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:637
msgid ""
"There are two ways to handle the case above. If we don't mind writing a bit "
"of otherwise unneeded boilerplate code, we can use explicit recursion.  In "
"fact, since we often also work with search *forests*, this is the preferable "
"way here."
msgstr ""
"有两种方法可以处理上述情况。如果我们不介意编写一些其他不需要的样板代码，我们"
"可以使用显式递归。事实上，由于我们也经常使用搜索 *森林*，因此这是这里的首选方"
"式。"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:638
#, no-wrap
msgid ""
"mutual\n"
"  treeSize : Tree a -> Nat\n"
"  treeSize (Node _ forest) = S $ forestSize forest\n"
"\n"
"  forestSize : Forest a -> Nat\n"
"  forestSize []        = 0\n"
"  forestSize (x :: xs) = treeSize x + forestSize xs\n"
msgstr ""
"mutual\n"
"  treeSize : Tree a -> Nat\n"
"  treeSize (Node _ forest) = S $ forestSize forest\n"
"\n"
"  forestSize : Forest a -> Nat\n"
"  forestSize []        = 0\n"
"  forestSize (x :: xs) = treeSize x + forestSize xs\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:652
msgid ""
"In the case above, Idris can verify that we don't blow up our trees behind "
"its back as we are explicit about what happens in each recursive step.  This "
"is the safe, preferable way of going about this, especially if you are new "
"to the language and totality checking in general."
msgstr ""
"在上面的例子中，Idris 可以验证我们不会在它背后炸毁我们的树，因为我们清楚地知"
"道每个递归步骤中发生的事情。这是解决此问题的安全、可取的方法，特别是如果您不"
"熟悉语言和完全性检查。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:655
msgid ""
"However, sometimes the solution presented above is just too cumbersome to "
"write. For instance, here is an implementation of `Show` for rose trees:"
msgstr ""
"但是，有时上面提出的解决方案写起来太麻烦了。例如，这里是玫瑰树的 `Show` 的实"
"现："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:656
#, no-wrap
msgid ""
"Show a => Show (Tree a) where\n"
"  showPrec p (Node v ts) =\n"
"    assert_total $ showCon p \"Node\" (showArg v ++ showArg ts)\n"
msgstr ""
"Show a => Show (Tree a) where\n"
"  showPrec p (Node v ts) =\n"
"    assert_total $ showCon p \"Node\" (showArg v ++ showArg ts)\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:667
msgid ""
"In this case, we'd have to manually reimplement `Show` for lists of trees: A "
"tedious task - and error-prone on its own. Instead, we resort to using the "
"mighty sledgehammer of totality checking: `assert_total`. Needless to say "
"that this comes with the same risks as `assert_smaller`, so be very careful."
msgstr ""
"在这种情况下，我们必须为树列表手动重新实现 `Show`：这是一项乏味的任务——而且它"
"本身很容易出错。相反，我们求助于使用强大的完全性检查大锤：`assert_total`。不"
"用说，这会带来与 `assert_smaller` 相同的风险，所以要非常小心。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:673
msgid ""
"Implement the following functions in a provably total way without "
"\"cheating\". Note: It is not necessary to implement these in a tail "
"recursive way."
msgstr ""
"以可证明的完整方式实现以下功能，而不会“作弊”。注意：没有必要以尾递归的方式实"
"现这些。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:682
#, no-wrap
msgid ""
"<!-- textlint-disable terminology -->\n"
"1. Implement function `depth` for rose trees. This\n"
"   should return the maximal number of `Node` constructors\n"
"   from the current node to the farthest child node.\n"
"   For instance, the current node should be at depth one,\n"
"   all its direct child nodes are at depth two, their\n"
"   immediate child nodes at depth three and so on.\n"
"<!-- textlint-enable -->\n"
msgstr ""
"<!-- textlint-disable terminology -->\n"
"1. 实现玫瑰树上的函数 `depth`。这个\n"
"   应该从当前节点到最远的子节点返回最大数量的 `Node` 构造函数。\n"
"   例如，当前节点在深度一，\n"
"   它的所有深度为二直接子节点，它们的\n"
"   深度三的直接子节点，依此类推。\n"
"<!-- textlint-enable -->\n"

#. type: Bullet: '2. '
#: ../src/Tutorial/Folds.md:684
msgid "Implement interface `Eq` for rose trees."
msgstr "为玫瑰树实现接口 `Eq`。"

#. type: Bullet: '3. '
#: ../src/Tutorial/Folds.md:686
msgid "Implement interface `Functor` for rose trees."
msgstr "为玫瑰树实现接口 `Functor`。"

#. type: Bullet: '4. '
#: ../src/Tutorial/Folds.md:688
msgid "For the fun of it: Implement interface `Show` for rose trees."
msgstr "为了乐趣：为玫瑰树实现接口`Show`。"

#. type: Bullet: '5. '
#: ../src/Tutorial/Folds.md:692
msgid ""
"In order not to forget how to program with dependent types, implement "
"function `treeToVect` for converting a rose tree to a vector of the correct "
"size."
msgstr ""
"为了不忘记如何使用依赖类型进行编程，请实现函数 `treeToVect` 以将玫瑰树转换为"
"正确大小的向量。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:696
#, no-wrap
msgid ""
"   Hint: Make sure to follow the same recursion scheme as in\n"
"   the implementation of `treeSize`. Otherwise, this might be\n"
"   very hard to get to work.\n"
msgstr "   提示：确保遵循与`treeSize` 的实现中相同的递归方案。否则，这可能是很难工作。\n"

#. type: Title ##
#: ../src/Tutorial/Folds.md:697
#, no-wrap
msgid "Interface Foldable"
msgstr "Foldable 接口"

#. type: Plain text
#: ../src/Tutorial/Folds.md:707
msgid ""
"When looking back at all the exercises we solved in the section about "
"recursion, most tail recursive functions on lists were of the following "
"pattern: Iterate over all list elements from head to tail while passing "
"along some state for accumulating intermediate results. At the end of the "
"list, return the final state or convert it with an additional function call."
msgstr ""
"当回顾我们在递归部分解决的所有练习时，列表中的大多数尾递归函数都遵循以下模"
"式：从头到尾迭代所有列表元素，同时传递一些状态以累积中间结果。在列表的末尾，"
"返回最终状态或使用附加函数调用对其进行转换。"

#. type: Title ###
#: ../src/Tutorial/Folds.md:708
#, no-wrap
msgid "Left Folds"
msgstr "左折叠"

#. type: Plain text
#: ../src/Tutorial/Folds.md:719
#, no-wrap
msgid ""
"This is functional programming, and we'd like to abstract\n"
"over such reoccurring patterns. In order to tail recursively\n"
"iterate over a list, all we need is an accumulator function\n"
"and some initial state. But what should be the type of\n"
"the accumulator? Well, it combines the current state\n"
"with the list's next element and returns an updated\n"
"state: `state -> elem -> state`. Surely, we can come\n"
"up with a higher-order function to encapsulate this\n"
"behavior:\n"
msgstr "这是函数式编程，我们想抽象出这种重复出现的模式。为了对列表进行递归迭代，我们只需要一个累加器函数和一些初始状态。但是累加器的类型应该是什么？好吧，它将当前状态与列表的下一个元素组合并返回更新状态：`state -> elem -> state`。当然，我们可以提出一个高阶函数来封装这种行为：\n"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:720
#, no-wrap
msgid ""
"leftFold : (acc : state -> el -> state) -> (st : state) -> List el -> state\n"
"leftFold _   st []        = st\n"
"leftFold acc st (x :: xs) = leftFold acc (acc st x) xs\n"
msgstr ""
"leftFold : (acc : state -> el -> state) -> (st : state) -> List el -> state\n"
"leftFold _   st []        = st\n"
"leftFold acc st (x :: xs) = leftFold acc (acc st x) xs\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:734
msgid ""
"We call this function a *left fold*, as it iterates over the list from left "
"to right (head to tail), collapsing (or *folding*) the list until just a "
"single value remains.  This new value might still be a list or other "
"container type, but the original list has been consumed from head to tail.  "
"Note how `leftFold` is tail recursive, and therefore all functions "
"implemented in terms of `leftFold` are tail recursive (and thus, stack "
"safe!) as well."
msgstr ""
"我们将此函数称为 *左折叠*，因为它从左到右（从头到尾）迭代列表，折叠（或 "
"*folding*）列表直到只剩下一个值。这个新值可能仍然是一个列表或其他容器类型，但"
"原来的列表已经从头到尾被消耗掉了。请注意 `leftFold` 是如何尾递归的，因此根据 "
"`leftFold` 实现的所有函数也是尾递归的（因此，堆栈安全！）。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:736
msgid "Here are a few examples:"
msgstr "这里有一些例子："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:737
#, no-wrap
msgid ""
"sumLF : Num a => List a -> a\n"
"sumLF = leftFold (+) 0\n"
"\n"
"reverseLF : List a -> List a\n"
"reverseLF = leftFold (flip (::)) Nil\n"
"\n"
"-- this is more natural than `reverseLF`!\n"
"toSnocListLF : List a -> SnocList a\n"
"toSnocListLF = leftFold (:<) Lin\n"
msgstr ""
"sumLF : Num a => List a -> a\n"
"sumLF = leftFold (+) 0\n"
"\n"
"reverseLF : List a -> List a\n"
"reverseLF = leftFold (flip (::)) Nil\n"
"\n"
"-- this is more natural than `reverseLF`!\n"
"toSnocListLF : List a -> SnocList a\n"
"toSnocListLF = leftFold (:<) Lin\n"

#. type: Title ###
#: ../src/Tutorial/Folds.md:749
#, no-wrap
msgid "Right Folds"
msgstr "右折叠"

#. type: Plain text
#: ../src/Tutorial/Folds.md:760
msgid ""
"The example functions we implemented in terms of `leftFold` had to always "
"completely traverse the whole list, as every single element was required to "
"compute the result. This is not always necessary, however. For instance, if "
"you look at `findList` from the exercises, we could abort iterating over the "
"list as soon as our search was successful. It is *not* possible to implement "
"this more efficient behavior in terms of `leftFold`: There, the result will "
"only be returned when our pattern match reaches the `Nil` case."
msgstr ""
"我们根据 `leftFold` 实现的示例函数必须始终完全遍历整个列表，因为需要每个元素"
"来计算结果。然而，这并不总是必要的。例如，如果您查看练习中的 `findList`，我们"
"可以在搜索成功后立即中止迭代列表。在 `leftFold` 方面，*不* 可能实现这种更有效"
"的行为：在那里，只有当我们的模式匹配达到 `Nil` 情况时才会返回结果。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:765
msgid ""
"Interestingly, there is another, non-tail recursive fold, which reflects the "
"list structure more naturally, we can use for breaking out early from an "
"iteration. We call this a *right fold*. Here is its implementation:"
msgstr ""
"有趣的是，还有另一种非尾递归折叠，它更自然地反映了列表结构，我们可以用于从迭"
"代的早期突破。我们称之为 *右折叠*。这是它的实现："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:766
#, no-wrap
msgid ""
"rightFold : (acc : el -> state -> state) -> state -> List el -> state\n"
"rightFold acc st []        = st\n"
"rightFold acc st (x :: xs) = acc x (rightFold acc st xs)\n"
msgstr ""
"rightFold : (acc : el -> state -> state) -> state -> List el -> state\n"
"rightFold acc st []        = st\n"
"rightFold acc st (x :: xs) = acc x (rightFold acc st xs)\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:775
msgid ""
"Now, it might not immediately be obvious how this differs from `leftFold`.  "
"In order to see this, we will have to talk about lazy evaluation first."
msgstr ""
"现在，它与 `leftFold` 的区别可能不是很明显。为了看到这一点，我们必须先谈谈惰"
"性求值。"

#. type: Title ####
#: ../src/Tutorial/Folds.md:776
#, no-wrap
msgid "Lazy Evaluation in Idris"
msgstr "Idris 中的惰性求值"

#. type: Plain text
#: ../src/Tutorial/Folds.md:784
msgid ""
"For some computations, it is not necessary to evaluate all function "
"arguments in order to return a result. For instance, consider boolean "
"operator `(&&)`: If the first argument evaluates to `False`, we already know "
"that the result is `False` without even looking at the second argument. In "
"such a case, we don't want to unnecessarily evaluate the second argument, as "
"this might include a lengthy computation."
msgstr ""
"对于某些计算，无需求值所有函数参数即可返回结果。例如，考虑布尔运算符 `(&&)`："
"如果第一个参数的计算结果为 `False`，我们甚至无需查看第二个参数就已经知道争论"
"结果是 `False`。在这种情况下，我们不想也不需要地求值第二个参数，因为这可能包"
"括冗长的计算。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:786
msgid "Consider the following REPL session:"
msgstr "考虑以下 REPL 会话："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Folds.md:787
#, no-wrap
msgid ""
"Tutorial.Folds> False && (length [1..10000000000] > 100)\n"
"False\n"
msgstr ""
"Tutorial.Folds> False && (length [1..10000000000] > 100)\n"
"False\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:797
msgid ""
"If the second argument were evaluated, this computation would most certainly "
"blow up your computer's memory, or at least take a very long time to run to "
"completion. However, in this case, the result `False` is printed "
"immediately. If you look at the type of `(&&)`, you'll see the following:"
msgstr ""
"如果计算第二个参数，这个计算肯定会炸毁你的计算机内存，或者至少需要很长时间才"
"能完成。但是，在这种情况下，会立即打印结果 `False`。如果查看 `(&&)` 的类型，"
"您将看到以下内容："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Folds.md:798
#, no-wrap
msgid ""
"Tutorial.Folds> :t (&&)\n"
"Prelude.&& : Bool -> Lazy Bool -> Bool\n"
msgstr ""
"Tutorial.Folds> :t (&&)\n"
"Prelude.&& : Bool -> Lazy Bool -> Bool\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:816
msgid ""
"As you can see, the second argument is wrapped in a `Lazy` type constructor. "
"This is a built-in type, and the details are handled by Idris automatically "
"most of the time. For instance, when passing arguments to `(&&)`, we don't "
"have to manually wrap the values in some data constructor.  A lazy function "
"argument will only be evaluated at the moment it is *required* in the "
"function's implementation, for instance, because it is being pattern matched "
"on, or it is being passed as a strict argument to another function. In the "
"implementation of `(&&)`, the pattern match happens on the first argument, "
"so the second will only be evaluated if the first argument is `True` and the "
"second is returned as the function's (strict) result."
msgstr ""
"如您所见，第二个参数包装在 `Lazy` 类型构造函数中。这是一个内置类型，大部分时"
"间细节由 Idris 自动处理。例如，当将参数传递给 `(&&)` 时，我们不必手动将值包装"
"在某些数据构造函数中。惰性函数参数仅在函数实现中为 *required* 时才被评估，例"
"如，因为它正在被模式匹配，或者它作为严格参数传递给另一个函数。在 `(&&)` 的实"
"现中，模式匹配发生在第一个参数上，因此只有当第一个参数是 `True` 并且第二个参"
"数作为函数返回时才会计算第二个参数（严格）结果。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:821
msgid ""
"There are two utility functions for working with lazy evaluation: Function "
"`delay` wraps a value in the `Lazy` data type. Note, that the argument of "
"`delay` is strict, so the following might take several seconds to print its "
"result:"
msgstr ""
"有两个实用函数用于处理惰性求值： 函数 `delay` 将值包装在 `Lazy` 数据类型中。"
"请注意，`delay` 的参数是严格的，因此以下可能需要几秒钟才能打印其结果："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Folds.md:822
#, no-wrap
msgid ""
"Tutorial.Folds> False && (delay $ length [1..10000] > 100)\n"
"False\n"
msgstr ""
"Tutorial.Folds> False && (delay $ length [1..10000] > 100)\n"
"False\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:829
msgid ""
"In addition, there is function `force`, which forces evaluation of a `Lazy` "
"value."
msgstr "此外，还有一个函数 `force`，它强制对 `Lazy` 值进行求值。"

#. type: Title ####
#: ../src/Tutorial/Folds.md:830
#, no-wrap
msgid "Lazy Evaluation and Right Folds"
msgstr "惰性求值和右折叠"

#. type: Plain text
#: ../src/Tutorial/Folds.md:838
msgid ""
"We will now learn how to make use of `rightFold` and lazy evaluation to "
"implement folds, which can break out from iteration early.  Note, that in "
"the implementation of `rightFold` the result of folding over the remainder "
"of the list is passed as an argument to the accumulator (instead of the "
"result of invoking the accumulator being used in the recursive call):"
msgstr ""
"我们现在将学习如何利用 `rightFold` 和惰性求值来实现折叠，它可以在迭代早期中断"
"迭代。请注意，在 `rightFold` 的实现中，折叠列表剩余部分的结果作为参数传递给累"
"加器（而不是在递归调用中调用累加器的结果）："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Folds.md:839
#, no-wrap
msgid "rightFold acc st (x :: xs) = acc x (rightFold acc st xs)\n"
msgstr "rightFold acc st (x :: xs) = acc x (rightFold acc st xs)\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:846
msgid ""
"If the second argument of `acc` were lazily evaluated, it would be possible "
"to abort the computation of `acc`'s result without having to iterate till "
"the end of the list:"
msgstr ""
"如果 `acc` 的第二个参数被延迟求值，则可以中止 `acc` 的结果的计算，而不必迭代"
"到列表末尾："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:847
#, no-wrap
msgid ""
"foldHead : List a -> Maybe a\n"
"foldHead = force . rightFold first Nothing\n"
"  where first : a -> Lazy (Maybe a) -> Lazy (Maybe a)\n"
"        first v _ = Just v\n"
msgstr ""
"foldHead : List a -> Maybe a\n"
"foldHead = force . rightFold first Nothing\n"
"  where first : a -> Lazy (Maybe a) -> Lazy (Maybe a)\n"
"        first v _ = Just v\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:858
msgid ""
"Note, how Idris takes care of the bookkeeping of laziness most of the time. "
"(It doesn't handle the curried invocation of `rightFold` correctly, though, "
"so we either must pass on the list argument of `foldHead` explicitly, or "
"compose the curried function with `force` to get the types right.)"
msgstr ""
"请注意，Idris 在大多数情况下是如何处理懒惰的。 （但是，它不能正确处理 "
"`rightFold` 的柯里化调用，因此我们要么必须显式传递 `foldHead` 的列表参数，要"
"么使用 `force` 组合柯里化函数获得正确的类型。）"

#. type: Plain text
#: ../src/Tutorial/Folds.md:865
msgid ""
"In order to verify that this works correctly, we need a debugging utility "
"called `trace` from module `Debug.Trace`. This \"function\" allows us to "
"print debugging messages to the console at certain points in our pure code. "
"Please note, that this is for debugging purposes only and should never be "
"left lying around in production code, as, strictly speaking, printing stuff "
"to the console breaks referential transparency."
msgstr ""
"为了验证它是否正常工作，我们需要一个来自模块 `Debug.Trace` 的名为 `trace` 的"
"调试实用程序。这个“函数”允许我们在纯代码中的某些点将调试消息打印到控制台。请"
"注意，这仅用于调试目的，绝不应留在生产代码中，因为严格来说，将内容打印到控制"
"台会破坏引用透明度。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:868
msgid ""
"Here is an adjusted version of `foldHead`, which prints \"folded\" to "
"standard output every time utility function `first` is being invoked:"
msgstr ""
"这是 `foldHead` 的调整版本，每次调用实用函数 `first` 时都会将“折叠”打印到标准"
"输出："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:869
#, no-wrap
msgid ""
"foldHeadTraced : List a -> Maybe a\n"
"foldHeadTraced = force . rightFold first Nothing\n"
"  where first : a -> Lazy (Maybe a) -> Lazy (Maybe a)\n"
"        first v _ = trace \"folded\" (Just v)\n"
msgstr ""
"foldHeadTraced : List a -> Maybe a\n"
"foldHeadTraced = force . rightFold first Nothing\n"
"  where first : a -> Lazy (Maybe a) -> Lazy (Maybe a)\n"
"        first v _ = trace \"folded\" (Just v)\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:879
msgid ""
"In order to test this at the REPL, we need to know that `trace` uses "
"`unsafePerformIO` internally and therefore will not reduce during "
"evaluation. We have to resort to the `:exec` command to see this in action "
"at the REPL:"
msgstr ""
"为了在 REPL 上进行测试，我们需要知道 `trace` 在内部使用 `unsafePerformIO`，因"
"此在求值期间不会缩减「译者注：不会执行副作用」。我们必须求助于 `:exec` 命令才"
"能在 REPL 中看到这一点："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Folds.md:880
#, no-wrap
msgid ""
"Tutorial.Folds> :exec printLn $ foldHeadTraced [1..10]\n"
"folded\n"
"Just 1\n"
msgstr ""
"Tutorial.Folds> :exec printLn $ foldHeadTraced [1..10]\n"
"folded\n"
"Just 1\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:888
msgid ""
"As you can see, although the list holds ten elements, `first` is only called "
"once resulting in a considerable increase of efficiency."
msgstr ""
"如您所见，虽然列表包含十个元素，但 `first` 仅被调用一次，从而大大提高了效率。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:891
msgid ""
"Let's see what happens, if we change the implementation of `first` to use "
"strict evaluation:"
msgstr "让我们看看会发生什么，如果我们将 `first` 的实现更改为使用严格求值："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:892
#, no-wrap
msgid ""
"foldHeadTracedStrict : List a -> Maybe a\n"
"foldHeadTracedStrict = rightFold first Nothing\n"
"  where first : a -> Maybe a -> Maybe a\n"
"        first v _ = trace \"folded\" (Just v)\n"
msgstr ""
"foldHeadTracedStrict : List a -> Maybe a\n"
"foldHeadTracedStrict = rightFold first Nothing\n"
"  where first : a -> Maybe a -> Maybe a\n"
"        first v _ = trace \"folded\" (Just v)\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:903
msgid ""
"Although we don't use the second argument in the implementation of `first`, "
"it is still being evaluated before evaluating the body of `first`, because "
"Idris - unlike Haskell! - defaults to use strict semantics. Here's how this "
"behaves at the REPL:"
msgstr ""
"虽然我们在 `first` 的实现中没有使用第二个参数，但它仍然在评估 `first` 的主体"
"之前被评估，因为 Idris - 不像 Haskell！ - 默认使用严格的语义。以下是它在 "
"REPL 中的行为方式："

#. type: Fenced code block (repl)
#: ../src/Tutorial/Folds.md:904
#, no-wrap
msgid ""
"Tutorial.Folds> :exec printLn $ foldHeadTracedStrict [1..10]\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"Just 1\n"
msgstr ""
"Tutorial.Folds> :exec printLn $ foldHeadTracedStrict [1..10]\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"folded\n"
"Just 1\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:925
msgid ""
"While this technique can sometimes lead to very elegant code, always "
"remember that `rightFold` is not stack safe in the general case. So, unless "
"your accumulator is guaranteed to return a result after not too many "
"iterations, consider implementing your function tail recursively with an "
"explicit pattern match. Your code will be slightly more verbose, but with "
"the guaranteed benefit of stack safety."
msgstr ""
"虽然这种技术有时会产生非常优雅的代码，但请始终记住 `rightFold` 在一般情况下不"
"是堆栈安全的。因此，除非您的累加器不能保证在没有太多迭代后返回结果，否则请考"
"虑使用显式模式匹配的尾递归地实现您的函数。您的代码会稍微冗长一些，但可以保证"
"堆栈安全。"

#. type: Title ###
#: ../src/Tutorial/Folds.md:926
#, no-wrap
msgid "Folds and Monoids"
msgstr "折叠和幺半群"

#. type: Plain text
#: ../src/Tutorial/Folds.md:934
msgid ""
"Left and right folds share a common pattern: In both cases, we start with an "
"initial *state* value and use an accumulator function for combining the "
"current state with the current element. This principle of *combining values* "
"after starting from an *initial value* lies at the heart of an interface "
"we've already learned about: `Monoid`.  It therefore makes sense to fold a "
"list over a monoid:"
msgstr ""
"左右折叠有一个共同的模式：在这两种情况下，我们从初始*状态*值开始，并使用累加"
"器函数将当前状态与当前元素相结合。从*初始值*开始后*组合值*的原理是我们已经了"
"解的接口的核心：`Monoid`。因此，将列表折叠在一个幺半群上是有意义的："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:935
#, no-wrap
msgid ""
"foldMapList : Monoid m => (a -> m) -> List a -> m\n"
"foldMapList f = leftFold (\\vm,va => vm <+> f va) neutral\n"
msgstr ""
"foldMapList : Monoid m => (a -> m) -> List a -> m\n"
"foldMapList f = leftFold (\\vm,va => vm <+> f va) neutral\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:946
msgid ""
"Note how, with `foldMapList`, we no longer need to pass an accumulator "
"function. All we need is a conversion from the element type to a type with "
"an implementation of `Monoid`. As we have already seen in the chapter about "
"[interfaces](Interfaces.md), there are *many* monoids in functional "
"programming, and therefore, `foldMapList` is an incredibly useful function."
msgstr ""
"请注意，使用 `foldMapList`，我们不再需要传递累加器函数。我们所需要的只是将元"
"素类型转换为具有 `Monoid` 实现的类型。正如我们在关于 [接口](Interfaces.md) 的"
"章节中已经看到的，在函数式编程中有 *很多* 幺半群，因此，`foldMapList` 是一个"
"非常有用的函数。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:950
msgid ""
"We could make this even shorter: If the elements in our list already are of "
"a type with a monoid implementation, we don't even need a conversion "
"function to collapse the list:"
msgstr ""
"我们可以让这个更短：如果我们列表中的元素已经是具有 monoid 实现的类型，我们甚"
"至不需要转换函数来折叠列表："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:951
#, no-wrap
msgid ""
"concatList : Monoid m => List m -> m\n"
"concatList = foldMapList id\n"
msgstr ""
"concatList : Monoid m => List m -> m\n"
"concatList = foldMapList id\n"

#. type: Title ###
#: ../src/Tutorial/Folds.md:956
#, no-wrap
msgid "Stop Using `List` for Everything"
msgstr "停止对所有内容使用 `List`"

#. type: Plain text
#: ../src/Tutorial/Folds.md:971
msgid ""
"And here we are, finally, looking at a large pile of utility functions all "
"dealing in some way with the concept of collapsing (or folding)  a list of "
"values into a single result. But all of these folding functions are just as "
"useful when working with vectors, with non-empty lists, with rose trees, "
"even with single-value containers like `Maybe`, `Either e`, or `Identity`. "
"Heck, for the sake of completeness, they are even useful when working with "
"zero-value containers like `Control.Applicative.Const e`! And since there "
"are so many of these functions, we'd better look out for an essential set of "
"them in terms of which we can implement all the others, and wrap up the "
"whole bunch in an interface. This interface is called `Foldable`, and is "
"available from the `Prelude`. When you look at its definition in the REPL "
"(`:doc Foldable`), you'll see that it consists of six essential functions:"
msgstr ""
"最后，我们在这里查看一大堆实用函数，它们都以某种方式处理将值列表折叠（或折"
"叠）为单个结果的概念。但是所有这些折叠函数在处理向量、非空列表、玫瑰树，甚至"
"是单值容器（如 `Maybe`、`e` 或`Identity`。哎呀，为了完整起见，它们甚至在使用"
"诸如 `Control.Applicative.Const e` 之类的零值容器时很有用！而且由于这些功能有"
"很多，我们最好找出其中的一组基本功能，我们可以根据这些功能实现所有其他功能，"
"并将所有功能封装在一个接口中。此接口称为 `Foldable`，可从 `Prelude` 获得。当"
"你在 REPL (`:doc Foldable`) 中查看它的定义时，你会发现它包含六个基本函数："

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:978
msgid "`foldr`, for folds from the right"
msgstr "`foldr`，用于从右侧折叠"

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:978
msgid "`foldl`, for folds from the left"
msgstr "`foldl`，用于从左侧折叠"

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:978
msgid "`null`, for testing if the container is empty or not"
msgstr "`null`，用于测试容器是否为空"

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:978
msgid "`foldlM`, for effectful folds in a monad"
msgstr "`foldlM`，用于单子中的副作用折叠"

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:978
msgid "`toList`, for converting the container to a list of values"
msgstr "`toList`，用于将容器转换为值列表"

#. type: Bullet: '* '
#: ../src/Tutorial/Folds.md:978
msgid "`foldMap`, for folding over a monoid"
msgstr "`foldMap`，用于折叠一个幺半群"

#. type: Plain text
#: ../src/Tutorial/Folds.md:987
msgid ""
"For a minimal implementation of `Foldable`, it is sufficient to only "
"implement `foldr`. However, consider implementing all six functions "
"manually, because folds over container types are often performance critical "
"operations, and each of them should be optimized accordingly.  For instance, "
"implementing `toList` in terms of `foldr` for `List` just makes no sense, as "
"this is a non-tail recursive function running in linear time complexity, "
"while a hand-written implementation can just return its argument without any "
"modifications."
msgstr ""
"对于 `Foldable` 的最小实现，仅实现 `foldr` 就足够了。但是，请考虑手动实现所有"
"六个函数，因为对容器类型的折叠通常是性能关键操作，并且应相应地优化它们中的每"
"一个。例如，根据 `List` 的 `foldr` 来实现 `toList` 是没有意义的，因为这是一个"
"以线性时间复杂度运行的非尾递归函数，而一个手写的实现可以只返回它的参数而不做"
"任何修改。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:993
msgid ""
"In these exercises, you are going to implement `Foldable` for different data "
"types. Make sure to try and manually implement all six functions of the "
"interface."
msgstr ""
"在这些练习中，您将为不同的数据类型实现 `Foldable`。确保尝试手动实现接口中的所"
"有六个函数。"

#. type: Bullet: '1. '
#: ../src/Tutorial/Folds.md:995
msgid "Implement `Foldable` for `Crud i`:"
msgstr "为 `Crud i` 实现 `Foldable`："

#. type: Bullet: '2. '
#: ../src/Tutorial/Folds.md:1005
msgid "Implement `Foldable` for `Response e i`:"
msgstr "为 `Response e i` 实现 `Foldable`："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:1006 ../src/Tutorial/Functor.md:429
#: ../src/Tutorial/Traverse.md:295
#, no-wrap
msgid ""
"   data Response : (e, i, a : Type) -> Type where\n"
"     Created : (id : i) -> (value : a) -> Response e i a\n"
"     Updated : (id : i) -> (value : a) -> Response e i a\n"
"     Found   : (values : List a) -> Response e i a\n"
"     Deleted : (id : i) -> Response e i a\n"
"     Error   : (err : e) -> Response e i a\n"
msgstr ""
"   data Response : (e, i, a : Type) -> Type where\n"
"     Created : (id : i) -> (value : a) -> Response e i a\n"
"     Updated : (id : i) -> (value : a) -> Response e i a\n"
"     Found   : (values : List a) -> Response e i a\n"
"     Deleted : (id : i) -> Response e i a\n"
"     Error   : (err : e) -> Response e i a\n"

#. type: Bullet: '3. '
#: ../src/Tutorial/Folds.md:1018
msgid ""
"Implement `Foldable` for `List01`. Use tail recursion in the implementations "
"of `toList`, `foldMap`, and `foldl`."
msgstr ""
"为 `List01` 实现 `Foldable`。在 `toList`、`foldMap` 和 `foldl` 的实现中使用尾"
"递归。"

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:1019 ../src/Tutorial/IO.md:753
#: ../src/Tutorial/Traverse.md:267
#, no-wrap
msgid ""
"   data List01 : (nonEmpty : Bool) -> Type -> Type where\n"
"     Nil  : List01 False a\n"
"     (::) : a -> List01 False a -> List01 ne a\n"
msgstr ""
"   data List01 : (nonEmpty : Bool) -> Type -> Type where\n"
"     Nil  : List01 False a\n"
"     (::) : a -> List01 False a -> List01 ne a\n"

#. type: Bullet: '4. '
#: ../src/Tutorial/Folds.md:1030
msgid ""
"Implement `Foldable` for `Tree`. There is no need to use tail recursion in "
"your implementations, but your functions must be accepted by the totality "
"checker, and you are not allowed to cheat by using `assert_smaller` or "
"`assert_total`."
msgstr ""
"为 `Tree` 实现 `Foldable`。在你的实现中不需要使用尾递归，但你的函数必须被完全"
"性检查器接受，并且你不能使用 `assert_smaller` 或 `assert_total` 作弊。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:1034
#, no-wrap
msgid ""
"   Hint: You can test the correct behavior of your implementations\n"
"   by running the same folds on the result of `treeToVect` and\n"
"   verify that the outcome is the same.\n"
msgstr ""
"   提示：您可以测试实现的正确行为\n"
"   通过对 `treeToVect` 的结果运行相同的折叠并且验证结果是否相同。\n"

#. type: Bullet: '5. '
#: ../src/Tutorial/Folds.md:1039
msgid ""
"Like `Functor` and `Applicative`, `Foldable` composes: The product and "
"composition of two foldable container types are again foldable container "
"types. Proof this by implementing `Foldable` for `Comp` and `Product`:"
msgstr ""
"与 `Functor` 和 `Applicative` 一样，`Foldable` 组合： 两种可折叠容器类型的乘"
"积和组合又是可折叠容器类型。通过为 `Comp` 和 `Product` 实现 `Foldable` 来证明"
"这一点："

#. type: Fenced code block (idris)
#: ../src/Tutorial/Folds.md:1040 ../src/Tutorial/Traverse.md:308
#, no-wrap
msgid ""
"   record Comp (f,g : Type -> Type) (a : Type) where\n"
"     constructor MkComp\n"
"     unComp  : f (g a)\n"
"\n"
"   record Product (f,g : Type -> Type) (a : Type) where\n"
"     constructor MkProduct\n"
"     fst : f a\n"
"     snd : g a\n"
msgstr ""
"   record Comp (f,g : Type -> Type) (a : Type) where\n"
"     constructor MkComp\n"
"     unComp  : f (g a)\n"
"\n"
"   record Product (f,g : Type -> Type) (a : Type) where\n"
"     constructor MkProduct\n"
"     fst : f a\n"
"     snd : g a\n"

#. type: Plain text
#: ../src/Tutorial/Folds.md:1058
msgid ""
"We learned a lot about recursion, totality checking, and folds in this "
"chapter, all of which are important concepts in pure functional programming "
"in general. Wrapping one's head around recursion takes time and experience. "
"Therefore - as usual - try to solve as many exercises as you can."
msgstr ""
"我们在本章中学到了很多关于递归、完全性检查和折叠的知识，所有这些都是纯函数式"
"编程中的重要概念。围绕递归进行思考需要时间和经验。因此 - 像往常一样 - 尝试尽"
"可能多地解决练习。"

#. type: Plain text
#: ../src/Tutorial/Folds.md:1062
msgid ""
"In the [next chapter](./Traverse.md), we are taking the concept of iterating "
"over container types one step further and look at effectful data traversals."
msgstr "在下一章中，我们将迭代容器类型的概念更进一步，并研究有效的数据遍历。"
