# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Stefan HÃ¶ck
# This file is distributed under the same license as the Functional Programming in Idris 2 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Functional Programming in Idris 2 1.0\n"
"POT-Creation-Date: 2025-05-15 07:57+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title ##
#: ../src/Tutorial/DataTypes.md:1319 ../src/Tutorial/Dependent.md:872
#: ../src/Tutorial/DPair.md:1191 ../src/Tutorial/Eq.md:1085
#: ../src/Tutorial/Folds.md:1051 ../src/Tutorial/Functions1.md:524
#: ../src/Tutorial/Functions2.md:924 ../src/Tutorial/Functor.md:1398
#: ../src/Tutorial/Interfaces.md:792 ../src/Tutorial/IO.md:1095
#: ../src/Tutorial/Predicates.md:1358 ../src/Tutorial/Traverse.md:1109
#: ../src/Appendices/Install.md:102 ../src/Appendices/Neovim.md:364
#: ../src/Appendices/Projects.md:878 ../src/Appendices/QTT.md:442
#, no-wrap
msgid "Conclusion"
msgstr ""

#. type: Plain text
#: ../src/Tutorial/DataTypes.md:1368 ../src/Tutorial/Dependent.md:910
#: ../src/Tutorial/DPair.md:1206 ../src/Tutorial/Eq.md:1100
#: ../src/Tutorial/Folds.md:1064 ../src/Tutorial/Functions1.md:583
#: ../src/Tutorial/Functions2.md:964 ../src/Tutorial/Functor.md:1430
#: ../src/Tutorial/Interfaces.md:821 ../src/Tutorial/Intro.md:453
#: ../src/Tutorial/IO.md:1125 ../src/Tutorial/Predicates.md:1371
#: ../src/Tutorial/Prim.md:1410 ../src/Tutorial/Traverse.md:1148
#: ../src/Appendices/Neovim.md:374 ../src/Appendices/Projects.md:890
#, no-wrap
msgid ""
"<!-- vi: filetype=idris2:syntax=markdown\n"
"-->\n"
msgstr ""

#. type: Title #
#: ../src/Appendices/Neovim.md:1
#, no-wrap
msgid "Interactive Editing in Neovim"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:10
msgid ""
"Idris provides extensive capabilities to interactively analyze the types of "
"values and expressions in our programs and fill out skeleton implementations "
"and sometimes even whole programs for us based on the types provided. These "
"interactive editing features are available via plugins in different "
"editors.  Since I am a Neovim user, I explain the Idris related parts of my "
"own setup in detail here."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:20
msgid ""
"The main component required to get all these features to run in Neovim is an "
"executable provided by the [idris2-lsp](https://github.com/idris-community/"
"idris2-lsp) project.  This executable makes use of the Idris compiler API "
"(application programming interface) internally and can check the syntax and "
"types of the source code we are working on. It communicates with Neovim via "
"the language server protocol (LSP). This communication is setup through the "
"[idris2-nvim](https://github.com/ShinKage/idris2-nvim)  plugin."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:31
msgid ""
"As we will see in this tutorial, the `idris2-lsp` executable not only "
"supports syntax and type checking, but comes also with additional "
"interactive editing features. Finally, the Idris compiler API supports "
"semantic highlighting of Idris source code: Identifiers and keywords are "
"highlighted not only based on the language's syntax (that would be *syntax "
"highlighting*, a feature expected from all modern programming environments "
"and editors), but also based on their *semantics*. For instance, a local "
"variable in a function implementation gets highlighted differently than the "
"name of a top level function, although syntactically these are both just "
"identifiers."
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:32
#, no-wrap
msgid ""
"module Appendices.Neovim\n"
"\n"
"import Data.Vect\n"
"\n"
"%default total\n"
msgstr ""

#. type: Title ##
#: ../src/Appendices/Neovim.md:40
#, no-wrap
msgid "Setup"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:44
msgid ""
"In order to make full use of interactive Idris editing in Neovim, at least "
"the following tools need to be installed:"
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid "A recent version of Neovim (version 0.5 or later)."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid "A recent version of the Idris compiler (at least version 0.5.1)."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid "The Idris compiler API."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid ""
"The [idris2-lsp](https://github.com/idris-community/idris2-lsp) package."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:52
msgid "The following Neovim plugins:"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Appendices/Neovim.md:52
msgid "[idris2-nvim](https://github.com/ShinKage/idris2-nvim)"
msgstr ""

#. type: Bullet: '  * '
#: ../src/Appendices/Neovim.md:52
msgid "[nvim-lspconfig](https://github.com/neovim/nvim-lspconfig)"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:57
msgid ""
"The `idris2-lsp` project gives detailed instructions about how to install "
"Idris 2 together with its standard libraries and compiler API. Make sure to "
"follow these instructions so that your compiler and `idris2-lsp` executable "
"are in sync."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:67
msgid ""
"If you are new to Neovim, you might want to use the `init.vim` file provided "
"in the `resources` folder. In that case, the necessary Neovim plugins are "
"already included, but you need to install [vim-plug](https://github.com/"
"junegunn/vim-plug), a plugin manager.  Afterwards, copy all or parts of "
"`resources/init.vim` to your own `init.vim` file. (Use `:help init.vim` from "
"within Neovim in order to find out where to look for this file.). After "
"setting up your `init.vim` file, restart Neovim and run `:PlugUpdate` to "
"install the necessary plugins."
msgstr ""

#. type: Title ##
#: ../src/Appendices/Neovim.md:68
#, no-wrap
msgid "A Typical Workflow"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:77
msgid ""
"In order to checkout the interactive editing features available to us, we "
"will reimplement some small utilities from the *Prelude*. To follow along, "
"you should have already worked through the [Introduction](../Tutorial/"
"Intro.md), [Functions Part 1](../Tutorial/Functions1.md), and at least parts "
"of [Algebraic Data Types](../Tutorial/DataTypes.md), otherwise it will be "
"hard to understand what's going on here."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:83
msgid ""
"Before we begin, note that the commands and actions shown in this tutorial "
"might not work correctly after you edited a source file but did not write "
"your changes to disk. Therefore, the first thing you should try if the "
"things described here do not work, is to quickly save the current file "
"(`:w`)."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:85
msgid "Let's start with negation of a boolean value:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:86
#, no-wrap
msgid "negate1 : Bool -> Bool\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:102
msgid ""
"Typically, when writing Idris code we follow the mantra \"types first\". "
"Although you might already have an idea about how to implement a certain "
"piece of functionality, you still need to provide an accurate type before "
"you can start writing your implementation. This means, when programming in "
"Idris, we have to mentally keep track of the implementation of an algorithm "
"and the types involved at the same time, both of which can become "
"arbitrarily complex. Or do we? Remember that Idris knows at least as much "
"about the variables and their types available in the current context of a "
"function implementation as we do, so we probably should ask it for guidance "
"instead of trying to do everything on our own."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:112
#, no-wrap
msgid ""
"So, in order to proceed, we ask Idris for a skeleton function\n"
"body: In normal editor mode, move your cursor on the line where\n"
"`negate1` is declared and enter `<LocalLeader>a` in quick\n"
"succession. `<LocalLeader>` is a special key that can be specified\n"
"in the `init.vim` file. If you\n"
"use the `init.vim` from the `resources` folder, it is set to\n"
"the comma character (`,`), in which case the above command\n"
"consists of a comma quickly followed by the lowercase letter \"a\".\n"
"See also `:help leader` and `:help localleader` in Neovim\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:115
msgid "Idris will generate a skeleton implementation similar to the following:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:116
#, no-wrap
msgid ""
"negate2 : Bool -> Bool\n"
"negate2 x = ?negate2_rhs\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:139
#, no-wrap
msgid ""
"Note, that on the left hand side a new variable with name\n"
"`x` was introduced, while on the right hand side Idris\n"
"added a *metavariable* (also called a *hole*). This is an\n"
"identifier prefixed with a question mark. It signals to Idris,\n"
"that we will implement this part of the function at a later time.\n"
"The great thing about holes is, that we can *hover* over them\n"
"and inspect their types and the types of values in the\n"
"surrounding context. You can do so by placing the cursor\n"
"on the identifier of a hole and entering `K` (the uppercase letter) in\n"
"normal mode. This will open a popup displaying the type of\n"
"the variable under the cursor plus the types and quantities of the variables\n"
"in the surrounding context. You can also have this information\n"
"displayed in a separate window: Enter `<LocalLeader>so` to\n"
"open this window and repeat the hovering. The information will\n"
"appear in the new window and as an additional benefit, it will\n"
"be semantically highlighted. Enter `<LocalLeader>sc` to close\n"
"this window again. Go ahead and checkout the type and\n"
"context of `?negate2_rhs`.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:148
#, no-wrap
msgid ""
"Most functions in Idris are implemented by pattern matching\n"
"on one or more of the arguments. Idris,\n"
"knowing the data constructors of all non-primitive data types,\n"
"can write such pattern matches for us (a process also called\n"
"*case splitting*). To give this a try, move the cursor onto the `x`\n"
"in the skeleton implementation of `negate2`, and enter\n"
"`<LocalLeader>c` in normal mode. The result will look as\n"
"follows:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:149
#, no-wrap
msgid ""
"negate3 : Bool -> Bool\n"
"negate3 False = ?negate3_rhs_0\n"
"negate3 True = ?negate3_rhs_1\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:158
msgid ""
"As you can see, Idris inserted a hole for each of the cases on the right "
"hand side. We can again inspect their types or replace them with a proper "
"implementation directly."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:164
msgid ""
"This concludes the introduction of the (in my opinion) core features of "
"interactive editing: Hovering on metavariables, adding skeleton function "
"implementations, and case splitting (which also works in case blocks and for "
"nested pattern matches). You should start using these all the time *now*!"
msgstr ""

#. type: Title ##
#: ../src/Appendices/Neovim.md:165
#, no-wrap
msgid "Expression Search"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:173
msgid ""
"Sometimes, Idris knows enough about the types involved to come up with a "
"function implementation on its own. For instance, let us implement function "
"`either` from the *Prelude*.  After giving its type, creating a skeleton "
"implementation, and case splitting on the `Either` argument, we arrive at "
"something similar to the following:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:174
#, no-wrap
msgid ""
"either2 : (a -> c) -> (b -> c) -> Either a b -> c\n"
"either2 f g (Left x) = ?either2_rhs_0\n"
"either2 f g (Right x) = ?either2_rhs_1\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:186
#, no-wrap
msgid ""
"Idris can come up with expressions for the two metavariables\n"
"on its own, because the types are specific enough. Move\n"
"the cursor onto one of the metavariables and enter\n"
"`<LocalLeader>o` in normal mode. You will be given\n"
"a selection of possible expressions (only one in this case),\n"
"of which you can choose a fitting one (or abort with `q`).\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:190
msgid ""
"Here is another example: A reimplementation of function `maybe`.  If you run "
"an expression search on `?maybe2_rhs1`, you will get a larger list of "
"choices."
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:191
#, no-wrap
msgid ""
"maybe2 : b -> (a -> b) -> Maybe a -> b\n"
"maybe2 x f Nothing = x\n"
"maybe2 x f (Just y) = ?maybe2_rhs_1\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:208
#, no-wrap
msgid ""
"Idris is also sometimes capable of coming up with complete function\n"
"implementations based on a function's type. For this to work well\n"
"in practice, the number of possible implementations satisfying\n"
"the type checker must be pretty small. As an example, here is\n"
"function `zipWith` for vectors. You might not have heard\n"
"about vectors yet: They will be introduced in the chapter about\n"
"[dependent types](../Tutorial/Dependent.md). You can still give\n"
"this a go to check out its effect. Just move the cursor on the\n"
"line declaring `zipWithV`, enter `<LocalLeader>gd` and select the first option.\n"
"This will automatically generate the whole function body including\n"
"case splits and implementations.\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:209
#, no-wrap
msgid "zipWithV : (a -> b -> c) -> Vect n a -> Vect n b -> Vect n c\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:218
#, no-wrap
msgid ""
"Expression search only works well if the types are specific\n"
"enough. If you feel like that might be the case, go ahead\n"
"and give it a go, either by running `<LocalLeader>o` on\n"
"a metavariable, or by trying `<LocalLeader>gd` on a\n"
"function declaration.\n"
msgstr ""

#. type: Title ##
#: ../src/Appendices/Neovim.md:219
#, no-wrap
msgid "More Code Actions"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:223
msgid ""
"There are other shortcuts available for generating part of your code, two of "
"which I'll explain here."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:231
#, no-wrap
msgid ""
"First, it is possible to add a new case block by entering\n"
"`<LocalLeader>mc` in normal mode when on a metavariable.\n"
"For instance, here is part of an implementation of `filterList`,\n"
"which appears in an exercise in the chapter about\n"
"algebraic data types. I arrived at this by letting Idris\n"
"generate a skeleton implementation followed by a case split\n"
"and an expression search on the first metavariable:\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:232
#, no-wrap
msgid ""
"filterList : (a -> Bool) -> List a -> List a\n"
"filterList f [] = []\n"
"filterList f (x :: xs) = ?filterList_rhs_1\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:247
#, no-wrap
msgid ""
"We will next have to pattern match on the result of applying\n"
"`x` to `f`. Idris can introduce a new case block for us,\n"
"if we move the cursor onto metavariable `?filterList_rhs_1`\n"
"and enter `<LocalLeader>mc` in normal mode. We can then\n"
"continue with our implementation by first giving the\n"
"expression to use in the case block (`f x`) followed by a\n"
"case split on the new variable in the case block.\n"
"This will lead us to an implementation similar to the following\n"
"(I had to fix the indentation, though):\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:248
#, no-wrap
msgid ""
"filterList2 : (a -> Bool) -> List a -> List a\n"
"filterList2 f [] = []\n"
"filterList2 f (x :: xs) = case f x of\n"
"  False => ?filterList2_rhs_2\n"
"  True => ?filterList2_rhs_3\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:266
#, no-wrap
msgid ""
"Sometimes, we want to extract a utility function from\n"
"an implementation we are working on. For instance, this is often\n"
"useful or even necessary when we write proofs about our code\n"
"(see chapters [Propositional Equality](../Tutorial/Eq.md)\n"
"and [Predicates](../Tutorial/Predicates.md), for instance).\n"
"In order to do so, we can move the cursor on a metavariable,\n"
"and enter `<LocalLeader>ml`. Give this a try with\n"
"`?whatNow` in the following example (this will work better\n"
"in a regular Idris source file instead of the literate\n"
"file I use for this tutorial):\n"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:267
#, no-wrap
msgid ""
"traverseEither : (a -> Either e b) -> List a -> Either e (List b)\n"
"traverseEither f [] = Right []\n"
"traverseEither f (x :: xs) = ?whatNow x xs f (f x) (traverseEither f xs)\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:279
msgid ""
"Idris will create a new function declaration with the type and name of `?"
"whatNow`, which takes as arguments all variables currently in scope. It also "
"replaces the hole in `traverseEither` with a call to this new function. "
"Typically, you will have to manually remove unneeded arguments afterwards. "
"This led me to the following version:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:280
#, no-wrap
msgid ""
"whatNow2 : Either e b -> Either e (List b) -> Either e (List b)\n"
"\n"
"traverseEither2 : (a -> Either e b) -> List a -> Either e (List b)\n"
"traverseEither2 f [] = Right []\n"
"traverseEither2 f (x :: xs) = whatNow2 (f x) (traverseEither f xs)\n"
msgstr ""

#. type: Title ##
#: ../src/Appendices/Neovim.md:288
#, no-wrap
msgid "Getting Information"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:294
msgid ""
"The `idris2-lsp` executable and through it, the `idris2-nvim` plugin, not "
"only supports the code actions described above. Here is a non-comprehensive "
"list of other capabilities. I suggest you try out each of them from within "
"this source file."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `K` when on an identifier or operator in normal mode shows its type "
"and namespace (if any). In case of a metavariable, variables in the current "
"context are displayed as well together with their types and quantities "
"(quantities will be explained in [Functions Part 2](../Tutorial/"
"Functions2.md)).  If you don't like popups, enter `<LocalLeader>so` to open "
"a new window where this information is displayed and semantically "
"highlighted instead."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `gd` on a function, operator, data constructor or type constructor in "
"normal mode jumps to the item's definition.  For external modules, this "
"works only if the module in question has been installed together with its "
"source code (by using the `idris2 --install-with-src` command)."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader>mm` opens a popup window listing all metavariables in "
"the current module. You can place the cursor on an entry and jump to its "
"location by pressing `<Enter>`."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader>mn` (or `<LocalLeader>mp`) jumps to the next (or "
"previous) metavariable in the current module."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader>br` opens a popup where you can enter a namespace. "
"Idris will then show all functions (plus their types)  exported from that "
"namespace in a popup window, and you can jump to a function's definition by "
"pressing enter on one of the entries. Note: The module in question must be "
"imported in the current source file."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader>x` opens a popup where you can enter a REPL command or "
"Idris expression, and the plugin will reply with a response from the REPL. "
"Whenever REPL examples are shown in the main part of this guide, you can try "
"them from within Neovim with this shortcut if you like."
msgstr ""

#. type: Bullet: '* '
#: ../src/Appendices/Neovim.md:329
msgid ""
"Typing `<LocalLeader><LocalLeader>e` will display the error message from the "
"current line in a popup window. This can be highly useful, if error messages "
"are too long to fit on a single line. Likewise, "
"`<LocalLeader><LocalLeader>el` will list all error messages from the current "
"buffer in a new window. You can then select an error message and jump to its "
"origin by pressing `<Enter>`."
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:332
msgid ""
"Other use cases and examples are described on the GitHub page of the `idris2-"
"nvim` plugin and can be included as described there."
msgstr ""

#. type: Title ##
#: ../src/Appendices/Neovim.md:333
#, no-wrap
msgid "The `%name` Pragma"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:345
#, no-wrap
msgid ""
"When you ask Idris for a skeleton implementation with `<LocalLeader>a`\n"
"or a case split with `<LocalLeader>c`,\n"
"it has to decide on what names to use for the new variables it introduces.\n"
"If these variables already have predefined names (from the function's\n"
"signature, record fields, or named data constructor arguments),\n"
"those names will be used, but\n"
"otherwise Idris will as a default use names `x`, `y`, and `z`, followed\n"
"by other letters. You can change this default behavior by\n"
"specifying a list of names to use for such occasions for any\n"
"data type.\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:347
msgid "For instance:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:348
#, no-wrap
msgid ""
"data Element = H | He | C | N | O | F | Ne\n"
"\n"
"%name Element e,f\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:358
msgid ""
"Idris will then use these names (followed by these names postfixed with "
"increasing integers), when it has to come up with variable names of this "
"type on its own. For instance, here is a test function and the result of "
"adding a skeleton definition to it:"
msgstr ""

#. type: Fenced code block (idris)
#: ../src/Appendices/Neovim.md:359
#, no-wrap
msgid ""
"test : Element -> Element -> Element -> Element -> Element -> Element\n"
"test e f e1 f1 e2 = ?test_rhs\n"
msgstr ""

#. type: Plain text
#: ../src/Appendices/Neovim.md:372
msgid ""
"Neovim, together with the `idris2-lsp` executable and the `idris2-nvim` "
"editor plugin, provides extensive utilities for interactive editing when "
"programming in Idris. Similar functionality is available for some other "
"editors, so feel free to ask what's available for your editor of choice, for "
"instance on the [Idris 2 Discord channel](https://discord.gg/UX68fDs2jc)."
msgstr ""
